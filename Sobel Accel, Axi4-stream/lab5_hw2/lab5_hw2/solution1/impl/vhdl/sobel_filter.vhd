-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_filter is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_IMAGE_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    INPUT_IMAGE_TVALID : IN STD_LOGIC;
    INPUT_IMAGE_TREADY : OUT STD_LOGIC;
    INPUT_IMAGE_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_IMAGE_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_IMAGE_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    INPUT_IMAGE_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_IMAGE_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_IMAGE_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    OUTPUT_IMAGE_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUTPUT_IMAGE_TVALID : OUT STD_LOGIC;
    OUTPUT_IMAGE_TREADY : IN STD_LOGIC;
    OUTPUT_IMAGE_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_IMAGE_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_IMAGE_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    OUTPUT_IMAGE_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_IMAGE_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    OUTPUT_IMAGE_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_ctrl_bus_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_bus_WVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_bus_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_bus_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_bus_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_bus_RREADY : IN STD_LOGIC;
    s_axi_ctrl_bus_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_bus_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_bus_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_bus_BREADY : IN STD_LOGIC;
    s_axi_ctrl_bus_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sobel_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel_filter,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=12587028,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=748,HLS_SYN_LUT=2008,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv21_1FFFFF : STD_LOGIC_VECTOR (20 downto 0) := "111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv21_20000 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv21_400 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv21_800 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_const_lv21_802 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000010";
    constant ap_const_lv21_801 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv11_401 : STD_LOGIC_VECTOR (10 downto 0) := "10000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal INPUT_IMAGE_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_IMAGE_V_data_V_0_vld_in : STD_LOGIC;
    signal INPUT_IMAGE_V_data_V_0_vld_out : STD_LOGIC;
    signal INPUT_IMAGE_V_data_V_0_ack_in : STD_LOGIC;
    signal INPUT_IMAGE_V_data_V_0_ack_out : STD_LOGIC;
    signal INPUT_IMAGE_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_IMAGE_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_IMAGE_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_IMAGE_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_IMAGE_V_data_V_0_sel : STD_LOGIC;
    signal INPUT_IMAGE_V_data_V_0_load_A : STD_LOGIC;
    signal INPUT_IMAGE_V_data_V_0_load_B : STD_LOGIC;
    signal INPUT_IMAGE_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_IMAGE_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_IMAGE_V_keep_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_IMAGE_V_keep_V_0_vld_in : STD_LOGIC;
    signal INPUT_IMAGE_V_keep_V_0_vld_out : STD_LOGIC;
    signal INPUT_IMAGE_V_keep_V_0_ack_in : STD_LOGIC;
    signal INPUT_IMAGE_V_keep_V_0_ack_out : STD_LOGIC;
    signal INPUT_IMAGE_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_IMAGE_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_IMAGE_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_IMAGE_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_IMAGE_V_keep_V_0_sel : STD_LOGIC;
    signal INPUT_IMAGE_V_keep_V_0_load_A : STD_LOGIC;
    signal INPUT_IMAGE_V_keep_V_0_load_B : STD_LOGIC;
    signal INPUT_IMAGE_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_IMAGE_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_IMAGE_V_strb_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_IMAGE_V_strb_V_0_vld_in : STD_LOGIC;
    signal INPUT_IMAGE_V_strb_V_0_vld_out : STD_LOGIC;
    signal INPUT_IMAGE_V_strb_V_0_ack_in : STD_LOGIC;
    signal INPUT_IMAGE_V_strb_V_0_ack_out : STD_LOGIC;
    signal INPUT_IMAGE_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_IMAGE_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal INPUT_IMAGE_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_IMAGE_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_IMAGE_V_strb_V_0_sel : STD_LOGIC;
    signal INPUT_IMAGE_V_strb_V_0_load_A : STD_LOGIC;
    signal INPUT_IMAGE_V_strb_V_0_load_B : STD_LOGIC;
    signal INPUT_IMAGE_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_IMAGE_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_IMAGE_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_IMAGE_V_user_V_0_vld_in : STD_LOGIC;
    signal INPUT_IMAGE_V_user_V_0_vld_out : STD_LOGIC;
    signal INPUT_IMAGE_V_user_V_0_ack_in : STD_LOGIC;
    signal INPUT_IMAGE_V_user_V_0_ack_out : STD_LOGIC;
    signal INPUT_IMAGE_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_IMAGE_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal INPUT_IMAGE_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_IMAGE_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_IMAGE_V_user_V_0_sel : STD_LOGIC;
    signal INPUT_IMAGE_V_user_V_0_load_A : STD_LOGIC;
    signal INPUT_IMAGE_V_user_V_0_load_B : STD_LOGIC;
    signal INPUT_IMAGE_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_IMAGE_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_IMAGE_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal INPUT_IMAGE_V_id_V_0_vld_in : STD_LOGIC;
    signal INPUT_IMAGE_V_id_V_0_vld_out : STD_LOGIC;
    signal INPUT_IMAGE_V_id_V_0_ack_in : STD_LOGIC;
    signal INPUT_IMAGE_V_id_V_0_ack_out : STD_LOGIC;
    signal INPUT_IMAGE_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal INPUT_IMAGE_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal INPUT_IMAGE_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_IMAGE_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_IMAGE_V_id_V_0_sel : STD_LOGIC;
    signal INPUT_IMAGE_V_id_V_0_load_A : STD_LOGIC;
    signal INPUT_IMAGE_V_id_V_0_load_B : STD_LOGIC;
    signal INPUT_IMAGE_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_IMAGE_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal INPUT_IMAGE_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal INPUT_IMAGE_V_dest_V_0_vld_in : STD_LOGIC;
    signal INPUT_IMAGE_V_dest_V_0_vld_out : STD_LOGIC;
    signal INPUT_IMAGE_V_dest_V_0_ack_in : STD_LOGIC;
    signal INPUT_IMAGE_V_dest_V_0_ack_out : STD_LOGIC;
    signal INPUT_IMAGE_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal INPUT_IMAGE_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal INPUT_IMAGE_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_IMAGE_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_IMAGE_V_dest_V_0_sel : STD_LOGIC;
    signal INPUT_IMAGE_V_dest_V_0_load_A : STD_LOGIC;
    signal INPUT_IMAGE_V_dest_V_0_load_B : STD_LOGIC;
    signal INPUT_IMAGE_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_IMAGE_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal OUTPUT_IMAGE_V_data_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_IMAGE_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_IMAGE_V_data_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_data_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_data_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_data_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_IMAGE_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_IMAGE_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_data_V_1_sel : STD_LOGIC;
    signal OUTPUT_IMAGE_V_data_V_1_load_A : STD_LOGIC;
    signal OUTPUT_IMAGE_V_data_V_1_load_B : STD_LOGIC;
    signal OUTPUT_IMAGE_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_IMAGE_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_IMAGE_V_keep_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_IMAGE_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_IMAGE_V_keep_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_keep_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_keep_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_keep_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_IMAGE_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_IMAGE_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_keep_V_1_sel : STD_LOGIC;
    signal OUTPUT_IMAGE_V_keep_V_1_load_A : STD_LOGIC;
    signal OUTPUT_IMAGE_V_keep_V_1_load_B : STD_LOGIC;
    signal OUTPUT_IMAGE_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_IMAGE_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_IMAGE_V_strb_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_IMAGE_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_IMAGE_V_strb_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_strb_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_strb_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_strb_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_IMAGE_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_IMAGE_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_strb_V_1_sel : STD_LOGIC;
    signal OUTPUT_IMAGE_V_strb_V_1_load_A : STD_LOGIC;
    signal OUTPUT_IMAGE_V_strb_V_1_load_B : STD_LOGIC;
    signal OUTPUT_IMAGE_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_IMAGE_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_IMAGE_V_user_V_1_data_in : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_IMAGE_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_IMAGE_V_user_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_user_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_user_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_user_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_IMAGE_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal OUTPUT_IMAGE_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_user_V_1_sel : STD_LOGIC;
    signal OUTPUT_IMAGE_V_user_V_1_load_A : STD_LOGIC;
    signal OUTPUT_IMAGE_V_user_V_1_load_B : STD_LOGIC;
    signal OUTPUT_IMAGE_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_IMAGE_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_IMAGE_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_IMAGE_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_IMAGE_V_last_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_last_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_last_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_last_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_IMAGE_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_IMAGE_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_last_V_1_sel : STD_LOGIC;
    signal OUTPUT_IMAGE_V_last_V_1_load_A : STD_LOGIC;
    signal OUTPUT_IMAGE_V_last_V_1_load_B : STD_LOGIC;
    signal OUTPUT_IMAGE_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_IMAGE_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_IMAGE_V_id_V_1_data_in : STD_LOGIC_VECTOR (4 downto 0);
    signal OUTPUT_IMAGE_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal OUTPUT_IMAGE_V_id_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_id_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_id_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_id_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal OUTPUT_IMAGE_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal OUTPUT_IMAGE_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_id_V_1_sel : STD_LOGIC;
    signal OUTPUT_IMAGE_V_id_V_1_load_A : STD_LOGIC;
    signal OUTPUT_IMAGE_V_id_V_1_load_B : STD_LOGIC;
    signal OUTPUT_IMAGE_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_IMAGE_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_IMAGE_V_dest_V_1_data_in : STD_LOGIC_VECTOR (5 downto 0);
    signal OUTPUT_IMAGE_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal OUTPUT_IMAGE_V_dest_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_dest_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_dest_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_IMAGE_V_dest_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_IMAGE_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal OUTPUT_IMAGE_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal OUTPUT_IMAGE_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_IMAGE_V_dest_V_1_sel : STD_LOGIC;
    signal OUTPUT_IMAGE_V_dest_V_1_load_A : STD_LOGIC;
    signal OUTPUT_IMAGE_V_dest_V_1_load_B : STD_LOGIC;
    signal OUTPUT_IMAGE_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_IMAGE_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal Gx_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Gx_ce0 : STD_LOGIC;
    signal Gx_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Gy_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Gy_ce0 : STD_LOGIC;
    signal Gy_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal INPUT_IMAGE_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal OUTPUT_IMAGE_TDATA_blk_n : STD_LOGIC;
    signal and_ln52_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln66_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal and_ln52_reg_1653 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1657 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln101_fu_1335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_2_fu_477_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1477 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal counter_fu_483_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal counter_reg_1482 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln29_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1487 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_501_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_1495 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln34_fu_507_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln34_reg_1500 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln30_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_1_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_1_reg_1505 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_2_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_2_reg_1510 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_3_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_3_reg_1520 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_541_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_1536 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal pixelbuffer_val_1_a_reg_1541 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln31_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixelbuffer_val_2_a_reg_1546 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln41_1_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_1_reg_1551 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_1_fu_596_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln34_1_reg_1564 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_state5_io : BOOLEAN;
    signal tmp_keep_V_3_reg_1569 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_3_reg_1575 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_3_reg_1581 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_3_reg_1587 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_3_reg_1593 : STD_LOGIC_VECTOR (5 downto 0);
    signal window_val_2_1_7_fu_951_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_7_reg_1599 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln41_fu_958_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln41_reg_1605 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_51_fu_965_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_51_reg_1611 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln41_2_fu_972_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln41_2_reg_1617 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln41_3_fu_979_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln41_3_reg_1623 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_52_fu_986_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_52_reg_1629 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln41_5_fu_993_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln41_5_reg_1635 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln41_6_fu_1000_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln41_6_reg_1641 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_53_fu_1007_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_53_reg_1647 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln61_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal colOffset_fu_1048_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal colOffset_reg_1664 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state6_io : BOOLEAN;
    signal zext_ln68_2_fu_1054_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln68_2_reg_1669 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln68_1_fu_1064_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln68_1_reg_1674 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_V_fu_1170_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rowOffset_fu_1189_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal rowOffset_reg_1687 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln67_fu_1179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_1253_p11 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1702 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1374_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_1382_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_1341_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_1720 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal tmp_last_V_fu_1367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixelbuffer_val_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal pixelbuffer_val_1_ce0 : STD_LOGIC;
    signal pixelbuffer_val_1_we0 : STD_LOGIC;
    signal pixelbuffer_val_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelbuffer_val_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal pixelbuffer_val_2_ce0 : STD_LOGIC;
    signal pixelbuffer_val_2_we0 : STD_LOGIC;
    signal pixelbuffer_val_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_322 : STD_LOGIC_VECTOR (3 downto 0);
    signal counter_0_reg_333 : STD_LOGIC_VECTOR (20 downto 0);
    signal counter_1_reg_345 : STD_LOGIC_VECTOR (20 downto 0);
    signal row_assign_reg_356 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_assign_reg_367 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_predicate_op236_write_state9 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal counter_2_reg_379 : STD_LOGIC_VECTOR (20 downto 0);
    signal colOffset_0_reg_390 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_dir_0_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_dir_0_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal rowOffset_0_reg_425 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_dir_1_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_dir_1_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_460 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln729_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln69_fu_1218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_dest_V_fu_162 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_keep_V_fu_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_fu_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_fu_174 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_fu_178 : STD_LOGIC_VECTOR (4 downto 0);
    signal window_val_2_2_1_fu_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_2_fu_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_1_fu_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_3_fu_194 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_0_fu_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_fu_202 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_4_fu_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_0_fu_210 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_fu_214 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln274_fu_519_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln41_2_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln274_1_fu_632_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln274_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln274_1_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal window_val_2_1_3_fu_720_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_fu_742_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_1_2_fu_766_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_35_fu_782_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_2_fu_806_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_38_fu_822_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_4_fu_734_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_5_fu_846_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_33_fu_750_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_41_fu_860_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_34_fu_758_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_43_fu_874_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_3_fu_814_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_4_fu_888_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_39_fu_830_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_45_fu_902_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_40_fu_838_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_47_fu_916_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_1_3_fu_774_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_36_fu_790_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_37_fu_798_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_6_fu_853_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_1_1_fu_642_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_42_fu_867_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_0_1_fu_650_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_44_fu_881_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_13_fu_658_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_1_5_fu_895_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_2_1_fu_666_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_46_fu_909_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_1_0_1_fu_674_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_48_fu_923_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_17_fu_682_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_1_4_fu_930_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_2_1_fu_690_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_49_fu_937_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_0_0_fu_698_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_50_fu_944_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_val_2_2_27_fu_706_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln52_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_1_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln68_fu_1044_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln68_2_fu_1058_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal abscond_fu_1074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_fu_1068_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abscond199_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg198_fu_1088_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs_fu_1080_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal abs200_fu_1100_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1114_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_fu_1108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1130_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln80_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln80_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln80_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln80_fu_1156_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_12_fu_1146_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_1199_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln69_fu_1195_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln69_fu_1207_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln69_fu_1213_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln68_1_fu_1185_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln493_fu_1224_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_1234_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln68_fu_1230_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln68_fu_1242_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1253_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1374_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln69_1_fu_1268_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1382_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component sobel_filter_mux_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_filter_mac_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sobel_filter_Gx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component sobel_filter_Gy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component sobel_filter_pixebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_filter_ctrl_bus_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    Gx_U : component sobel_filter_Gx
    generic map (
        DataWidth => 3,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Gx_address0,
        ce0 => Gx_ce0,
        q0 => Gx_q0);

    Gy_U : component sobel_filter_Gy
    generic map (
        DataWidth => 3,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Gy_address0,
        ce0 => Gy_ce0,
        q0 => Gy_q0);

    sobel_filter_ctrl_bus_s_axi_U : component sobel_filter_ctrl_bus_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_bus_AWVALID,
        AWREADY => s_axi_ctrl_bus_AWREADY,
        AWADDR => s_axi_ctrl_bus_AWADDR,
        WVALID => s_axi_ctrl_bus_WVALID,
        WREADY => s_axi_ctrl_bus_WREADY,
        WDATA => s_axi_ctrl_bus_WDATA,
        WSTRB => s_axi_ctrl_bus_WSTRB,
        ARVALID => s_axi_ctrl_bus_ARVALID,
        ARREADY => s_axi_ctrl_bus_ARREADY,
        ARADDR => s_axi_ctrl_bus_ARADDR,
        RVALID => s_axi_ctrl_bus_RVALID,
        RREADY => s_axi_ctrl_bus_RREADY,
        RDATA => s_axi_ctrl_bus_RDATA,
        RRESP => s_axi_ctrl_bus_RRESP,
        BVALID => s_axi_ctrl_bus_BVALID,
        BREADY => s_axi_ctrl_bus_BREADY,
        BRESP => s_axi_ctrl_bus_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    pixelbuffer_val_1_U : component sobel_filter_pixebkb
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pixelbuffer_val_1_address0,
        ce0 => pixelbuffer_val_1_ce0,
        we0 => pixelbuffer_val_1_we0,
        d0 => pixelbuffer_val_2_q0,
        q0 => pixelbuffer_val_1_q0);

    pixelbuffer_val_2_U : component sobel_filter_pixebkb
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pixelbuffer_val_2_address0,
        ce0 => pixelbuffer_val_2_ce0,
        we0 => pixelbuffer_val_2_we0,
        d0 => INPUT_IMAGE_V_data_V_0_data_out,
        q0 => pixelbuffer_val_2_q0);

    sobel_filter_mux_dEe_U1 : component sobel_filter_mux_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => window_val_2_2_53_reg_1647,
        din1 => select_ln41_6_reg_1641,
        din2 => select_ln41_5_reg_1635,
        din3 => window_val_2_2_52_reg_1629,
        din4 => select_ln41_3_reg_1623,
        din5 => select_ln41_2_reg_1617,
        din6 => window_val_2_2_51_reg_1611,
        din7 => select_ln41_reg_1605,
        din8 => window_val_2_1_7_reg_1599,
        din9 => tmp_1_fu_1253_p10,
        dout => tmp_1_fu_1253_p11);

    sobel_filter_mac_eOg_U2 : component sobel_filter_mac_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => Gx_q0,
        din1 => grp_fu_1374_p1,
        din2 => x_dir_1_reg_436,
        dout => grp_fu_1374_p3);

    sobel_filter_mac_eOg_U3 : component sobel_filter_mac_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => Gy_q0,
        din1 => grp_fu_1382_p1,
        din2 => y_dir_1_reg_448,
        dout => grp_fu_1382_p3);





    INPUT_IMAGE_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_vld_out))) then 
                                        INPUT_IMAGE_V_data_V_0_sel_rd <= not(INPUT_IMAGE_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_ack_in) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_vld_in))) then 
                                        INPUT_IMAGE_V_data_V_0_sel_wr <= not(INPUT_IMAGE_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_IMAGE_V_data_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_IMAGE_V_data_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_in) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_ack_out)))) then 
                    INPUT_IMAGE_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_IMAGE_V_data_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_IMAGE_V_data_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_vld_in)))) then 
                    INPUT_IMAGE_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_in) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_IMAGE_V_data_V_0_state)) or ((ap_const_lv2_1 = INPUT_IMAGE_V_data_V_0_state) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_IMAGE_V_data_V_0_state) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_vld_in)))) then 
                    INPUT_IMAGE_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_IMAGE_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_vld_out))) then 
                                        INPUT_IMAGE_V_dest_V_0_sel_rd <= not(INPUT_IMAGE_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_ack_in) and (ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_vld_in))) then 
                                        INPUT_IMAGE_V_dest_V_0_sel_wr <= not(INPUT_IMAGE_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_IMAGE_V_dest_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_dest_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_IMAGE_V_dest_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_dest_V_0_vld_in) and (ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_ack_out)))) then 
                    INPUT_IMAGE_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_IMAGE_V_dest_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_dest_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_IMAGE_V_dest_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_dest_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_vld_in)))) then 
                    INPUT_IMAGE_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_IMAGE_V_dest_V_0_vld_in) and (ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_IMAGE_V_dest_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_IMAGE_V_dest_V_0_state)) or ((ap_const_lv2_1 = INPUT_IMAGE_V_dest_V_0_state) and (ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_IMAGE_V_dest_V_0_state) and (ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_vld_in)))) then 
                    INPUT_IMAGE_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_IMAGE_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_vld_out))) then 
                                        INPUT_IMAGE_V_id_V_0_sel_rd <= not(INPUT_IMAGE_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_ack_in) and (ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_vld_in))) then 
                                        INPUT_IMAGE_V_id_V_0_sel_wr <= not(INPUT_IMAGE_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_IMAGE_V_id_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_id_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_IMAGE_V_id_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_id_V_0_vld_in) and (ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_ack_out)))) then 
                    INPUT_IMAGE_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_IMAGE_V_id_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_id_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_IMAGE_V_id_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_id_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_vld_in)))) then 
                    INPUT_IMAGE_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_IMAGE_V_id_V_0_vld_in) and (ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_IMAGE_V_id_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_IMAGE_V_id_V_0_state)) or ((ap_const_lv2_1 = INPUT_IMAGE_V_id_V_0_state) and (ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_IMAGE_V_id_V_0_state) and (ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_vld_in)))) then 
                    INPUT_IMAGE_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_IMAGE_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_vld_out))) then 
                                        INPUT_IMAGE_V_keep_V_0_sel_rd <= not(INPUT_IMAGE_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_ack_in) and (ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_vld_in))) then 
                                        INPUT_IMAGE_V_keep_V_0_sel_wr <= not(INPUT_IMAGE_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_IMAGE_V_keep_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_keep_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_IMAGE_V_keep_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_keep_V_0_vld_in) and (ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_ack_out)))) then 
                    INPUT_IMAGE_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_IMAGE_V_keep_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_keep_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_IMAGE_V_keep_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_keep_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_vld_in)))) then 
                    INPUT_IMAGE_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_IMAGE_V_keep_V_0_vld_in) and (ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_IMAGE_V_keep_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_IMAGE_V_keep_V_0_state)) or ((ap_const_lv2_1 = INPUT_IMAGE_V_keep_V_0_state) and (ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_IMAGE_V_keep_V_0_state) and (ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_vld_in)))) then 
                    INPUT_IMAGE_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_IMAGE_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_vld_out))) then 
                                        INPUT_IMAGE_V_strb_V_0_sel_rd <= not(INPUT_IMAGE_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_ack_in) and (ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_vld_in))) then 
                                        INPUT_IMAGE_V_strb_V_0_sel_wr <= not(INPUT_IMAGE_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_IMAGE_V_strb_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_strb_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_IMAGE_V_strb_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_strb_V_0_vld_in) and (ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_ack_out)))) then 
                    INPUT_IMAGE_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_IMAGE_V_strb_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_strb_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_IMAGE_V_strb_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_strb_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_vld_in)))) then 
                    INPUT_IMAGE_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_IMAGE_V_strb_V_0_vld_in) and (ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_IMAGE_V_strb_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_IMAGE_V_strb_V_0_state)) or ((ap_const_lv2_1 = INPUT_IMAGE_V_strb_V_0_state) and (ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_IMAGE_V_strb_V_0_state) and (ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_vld_in)))) then 
                    INPUT_IMAGE_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_IMAGE_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_vld_out))) then 
                                        INPUT_IMAGE_V_user_V_0_sel_rd <= not(INPUT_IMAGE_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_ack_in) and (ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_vld_in))) then 
                                        INPUT_IMAGE_V_user_V_0_sel_wr <= not(INPUT_IMAGE_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_IMAGE_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_IMAGE_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_IMAGE_V_user_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_user_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_IMAGE_V_user_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_user_V_0_vld_in) and (ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_ack_out)))) then 
                    INPUT_IMAGE_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_IMAGE_V_user_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_user_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_IMAGE_V_user_V_0_state) and (ap_const_logic_0 = INPUT_IMAGE_V_user_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_vld_in)))) then 
                    INPUT_IMAGE_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_IMAGE_V_user_V_0_vld_in) and (ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_IMAGE_V_user_V_0_ack_out) and (ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_IMAGE_V_user_V_0_state)) or ((ap_const_lv2_1 = INPUT_IMAGE_V_user_V_0_state) and (ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_IMAGE_V_user_V_0_state) and (ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_vld_in)))) then 
                    INPUT_IMAGE_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_IMAGE_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_vld_out))) then 
                                        OUTPUT_IMAGE_V_data_V_1_sel_rd <= not(OUTPUT_IMAGE_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_vld_in))) then 
                                        OUTPUT_IMAGE_V_data_V_1_sel_wr <= not(OUTPUT_IMAGE_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_data_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_data_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_ack_out)))) then 
                    OUTPUT_IMAGE_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_IMAGE_V_data_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_IMAGE_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_vld_out))) then 
                                        OUTPUT_IMAGE_V_dest_V_1_sel_rd <= not(OUTPUT_IMAGE_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_vld_in))) then 
                                        OUTPUT_IMAGE_V_dest_V_1_sel_wr <= not(OUTPUT_IMAGE_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_dest_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_dest_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_ack_out)))) then 
                    OUTPUT_IMAGE_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_IMAGE_V_dest_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_IMAGE_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_vld_out))) then 
                                        OUTPUT_IMAGE_V_id_V_1_sel_rd <= not(OUTPUT_IMAGE_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_vld_in))) then 
                                        OUTPUT_IMAGE_V_id_V_1_sel_wr <= not(OUTPUT_IMAGE_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_id_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_id_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_ack_out)))) then 
                    OUTPUT_IMAGE_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_IMAGE_V_id_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_IMAGE_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_vld_out))) then 
                                        OUTPUT_IMAGE_V_keep_V_1_sel_rd <= not(OUTPUT_IMAGE_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_vld_in))) then 
                                        OUTPUT_IMAGE_V_keep_V_1_sel_wr <= not(OUTPUT_IMAGE_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_keep_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_keep_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_ack_out)))) then 
                    OUTPUT_IMAGE_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_IMAGE_V_keep_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_IMAGE_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_vld_out))) then 
                                        OUTPUT_IMAGE_V_last_V_1_sel_rd <= not(OUTPUT_IMAGE_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_vld_in))) then 
                                        OUTPUT_IMAGE_V_last_V_1_sel_wr <= not(OUTPUT_IMAGE_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_ack_out)))) then 
                    OUTPUT_IMAGE_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_IMAGE_V_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_IMAGE_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_vld_out))) then 
                                        OUTPUT_IMAGE_V_strb_V_1_sel_rd <= not(OUTPUT_IMAGE_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_vld_in))) then 
                                        OUTPUT_IMAGE_V_strb_V_1_sel_wr <= not(OUTPUT_IMAGE_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_strb_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_strb_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_ack_out)))) then 
                    OUTPUT_IMAGE_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_IMAGE_V_strb_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_IMAGE_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_vld_out))) then 
                                        OUTPUT_IMAGE_V_user_V_1_sel_rd <= not(OUTPUT_IMAGE_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_vld_in))) then 
                                        OUTPUT_IMAGE_V_user_V_1_sel_wr <= not(OUTPUT_IMAGE_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_IMAGE_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_IMAGE_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_user_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_V_user_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_ack_out)))) then 
                    OUTPUT_IMAGE_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_IMAGE_V_user_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_IMAGE_TREADY) and (ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_vld_in)))) then 
                    OUTPUT_IMAGE_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_IMAGE_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    colOffset_0_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (icmp_ln61_fu_1032_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                colOffset_0_reg_390 <= ap_const_lv3_7;
            elsif (((icmp_ln67_fu_1179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                colOffset_0_reg_390 <= colOffset_reg_1664;
            end if; 
        end if;
    end process;

    col_assign_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_io))) then 
                col_assign_reg_367 <= j_reg_1536;
            elsif (((icmp_ln30_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                col_assign_reg_367 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    counter_0_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                counter_0_reg_333 <= counter_reg_1482;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                counter_0_reg_333 <= ap_const_lv21_1FFFFF;
            end if; 
        end if;
    end process;

    counter_1_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                counter_1_reg_345 <= add_ln34_reg_1500;
            elsif (((icmp_ln29_fu_471_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                counter_1_reg_345 <= counter_0_reg_333;
            end if; 
        end if;
    end process;

    counter_2_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_io))) then 
                counter_2_reg_379 <= add_ln34_1_reg_1564;
            elsif (((icmp_ln30_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                counter_2_reg_379 <= counter_1_reg_345;
            end if; 
        end if;
    end process;

    i_0_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_322 <= i_2_reg_1477;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_322 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_460 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_1_reg_460 <= i_reg_1720;
            end if; 
        end if;
    end process;

    rowOffset_0_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_1038_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io))) then 
                rowOffset_0_reg_425 <= ap_const_lv3_7;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                rowOffset_0_reg_425 <= rowOffset_reg_1687;
            end if; 
        end if;
    end process;

    row_assign_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                row_assign_reg_356 <= k_reg_1495;
            elsif (((icmp_ln29_fu_471_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_assign_reg_356 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    x_dir_0_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (icmp_ln61_fu_1032_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_dir_0_reg_401 <= ap_const_lv32_0;
            elsif (((icmp_ln67_fu_1179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                x_dir_0_reg_401 <= x_dir_1_reg_436;
            end if; 
        end if;
    end process;

    x_dir_1_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_1038_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io))) then 
                x_dir_1_reg_436 <= x_dir_0_reg_401;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                x_dir_1_reg_436 <= grp_fu_1374_p3;
            end if; 
        end if;
    end process;

    y_dir_0_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (icmp_ln61_fu_1032_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_dir_0_reg_413 <= ap_const_lv32_0;
            elsif (((icmp_ln67_fu_1179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                y_dir_0_reg_413 <= y_dir_1_reg_448;
            end if; 
        end if;
    end process;

    y_dir_1_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_1038_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io))) then 
                y_dir_1_reg_448 <= y_dir_0_reg_413;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                y_dir_1_reg_448 <= grp_fu_1382_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_load_A)) then
                INPUT_IMAGE_V_data_V_0_payload_A <= INPUT_IMAGE_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_load_B)) then
                INPUT_IMAGE_V_data_V_0_payload_B <= INPUT_IMAGE_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_load_A)) then
                INPUT_IMAGE_V_dest_V_0_payload_A <= INPUT_IMAGE_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_load_B)) then
                INPUT_IMAGE_V_dest_V_0_payload_B <= INPUT_IMAGE_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_load_A)) then
                INPUT_IMAGE_V_id_V_0_payload_A <= INPUT_IMAGE_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_load_B)) then
                INPUT_IMAGE_V_id_V_0_payload_B <= INPUT_IMAGE_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_load_A)) then
                INPUT_IMAGE_V_keep_V_0_payload_A <= INPUT_IMAGE_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_load_B)) then
                INPUT_IMAGE_V_keep_V_0_payload_B <= INPUT_IMAGE_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_load_A)) then
                INPUT_IMAGE_V_strb_V_0_payload_A <= INPUT_IMAGE_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_load_B)) then
                INPUT_IMAGE_V_strb_V_0_payload_B <= INPUT_IMAGE_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_load_A)) then
                INPUT_IMAGE_V_user_V_0_payload_A <= INPUT_IMAGE_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_load_B)) then
                INPUT_IMAGE_V_user_V_0_payload_B <= INPUT_IMAGE_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_load_A)) then
                OUTPUT_IMAGE_V_data_V_1_payload_A <= OUTPUT_IMAGE_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_load_B)) then
                OUTPUT_IMAGE_V_data_V_1_payload_B <= OUTPUT_IMAGE_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_load_A)) then
                OUTPUT_IMAGE_V_dest_V_1_payload_A <= OUTPUT_IMAGE_V_dest_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_load_B)) then
                OUTPUT_IMAGE_V_dest_V_1_payload_B <= OUTPUT_IMAGE_V_dest_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_load_A)) then
                OUTPUT_IMAGE_V_id_V_1_payload_A <= OUTPUT_IMAGE_V_id_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_load_B)) then
                OUTPUT_IMAGE_V_id_V_1_payload_B <= OUTPUT_IMAGE_V_id_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_load_A)) then
                OUTPUT_IMAGE_V_keep_V_1_payload_A <= OUTPUT_IMAGE_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_load_B)) then
                OUTPUT_IMAGE_V_keep_V_1_payload_B <= OUTPUT_IMAGE_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_load_A)) then
                OUTPUT_IMAGE_V_last_V_1_payload_A <= OUTPUT_IMAGE_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_load_B)) then
                OUTPUT_IMAGE_V_last_V_1_payload_B <= OUTPUT_IMAGE_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_load_A)) then
                OUTPUT_IMAGE_V_strb_V_1_payload_A <= OUTPUT_IMAGE_V_strb_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_load_B)) then
                OUTPUT_IMAGE_V_strb_V_1_payload_B <= OUTPUT_IMAGE_V_strb_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_load_A)) then
                OUTPUT_IMAGE_V_user_V_1_payload_A <= OUTPUT_IMAGE_V_user_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_load_B)) then
                OUTPUT_IMAGE_V_user_V_1_payload_B <= OUTPUT_IMAGE_V_user_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln34_1_reg_1564 <= add_ln34_1_fu_596_p2;
                and_ln52_reg_1653 <= and_ln52_fu_1026_p2;
                select_ln41_2_reg_1617 <= select_ln41_2_fu_972_p3;
                select_ln41_3_reg_1623 <= select_ln41_3_fu_979_p3;
                select_ln41_5_reg_1635 <= select_ln41_5_fu_993_p3;
                select_ln41_6_reg_1641 <= select_ln41_6_fu_1000_p3;
                select_ln41_reg_1605 <= select_ln41_fu_958_p3;
                tmp_dest_V_3_reg_1593 <= INPUT_IMAGE_V_dest_V_0_data_out;
                tmp_id_V_3_reg_1587 <= INPUT_IMAGE_V_id_V_0_data_out;
                tmp_keep_V_3_reg_1569 <= INPUT_IMAGE_V_keep_V_0_data_out;
                tmp_strb_V_3_reg_1575 <= INPUT_IMAGE_V_strb_V_0_data_out;
                tmp_user_V_3_reg_1581 <= INPUT_IMAGE_V_user_V_0_data_out;
                window_val_2_1_7_reg_1599 <= window_val_2_1_7_fu_951_p3;
                window_val_2_2_51_reg_1611 <= window_val_2_2_51_fu_965_p3;
                window_val_2_2_52_reg_1629 <= window_val_2_2_52_fu_986_p3;
                window_val_2_2_53_reg_1647 <= window_val_2_2_53_fu_1007_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_495_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln34_reg_1500 <= add_ln34_fu_507_p2;
                icmp_ln274_2_reg_1510 <= icmp_ln274_2_fu_523_p2;
                icmp_ln274_3_reg_1520 <= icmp_ln274_3_fu_529_p2;
                icmp_ln41_1_reg_1505 <= icmp_ln41_1_fu_513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                and_ln41_1_reg_1551 <= and_ln41_1_fu_564_p2;
                pixelbuffer_val_1_a_reg_1541 <= zext_ln729_fu_547_p1(10 - 1 downto 0);
                pixelbuffer_val_2_a_reg_1546 <= zext_ln729_fu_547_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_1038_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io))) then
                colOffset_reg_1664 <= colOffset_fu_1048_p2;
                    zext_ln68_1_reg_1674(1 downto 0) <= zext_ln68_1_fu_1064_p1(1 downto 0);
                    zext_ln68_2_reg_1669(2 downto 0) <= zext_ln68_2_fu_1054_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_471_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                counter_reg_1482 <= counter_fu_483_p2;
                icmp_ln41_reg_1487 <= icmp_ln41_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_1477 <= i_2_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or (ap_const_boolean_1 = ap_block_state11_io) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                i_reg_1720 <= i_fu_1341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_0 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                icmp_ln61_reg_1657 <= icmp_ln61_fu_1032_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_1536 <= j_fu_541_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_reg_1495 <= k_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_1179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                rowOffset_reg_1687 <= rowOffset_fu_1189_p2;
                tmp_1_reg_1702 <= tmp_1_fu_1253_p11;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_io))) then
                tmp_dest_V_fu_162 <= tmp_dest_V_3_reg_1593;
                tmp_id_V_fu_178 <= tmp_id_V_3_reg_1587;
                tmp_keep_V_fu_166 <= tmp_keep_V_3_reg_1569;
                tmp_strb_V_fu_170 <= tmp_strb_V_3_reg_1575;
                tmp_user_V_fu_174 <= tmp_user_V_3_reg_1581;
                window_val_0_1_fu_190 <= select_ln41_5_reg_1635;
                window_val_1_0_fu_198 <= select_ln41_3_reg_1623;
                window_val_1_1_fu_202 <= select_ln41_2_reg_1617;
                window_val_2_0_fu_210 <= select_ln41_reg_1605;
                window_val_2_1_fu_214 <= window_val_2_1_7_reg_1599;
                window_val_2_2_1_fu_182 <= window_val_2_2_53_reg_1647;
                window_val_2_2_2_fu_186 <= select_ln41_6_reg_1641;
                window_val_2_2_3_fu_194 <= window_val_2_2_52_reg_1629;
                window_val_2_2_4_fu_206 <= window_val_2_2_51_reg_1611;
            end if;
        end if;
    end process;
    zext_ln68_2_reg_1669(4 downto 3) <= "00";
    zext_ln68_1_reg_1674(3 downto 2) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, INPUT_IMAGE_V_data_V_0_vld_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_ack_in, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state10, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state9, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, ap_CS_fsm_state12, ap_CS_fsm_state2, icmp_ln29_fu_471_p2, ap_CS_fsm_state3, icmp_ln30_fu_495_p2, ap_CS_fsm_state4, icmp_ln31_fu_535_p2, ap_block_state5_io, icmp_ln61_fu_1032_p2, ap_block_state6_io, ap_CS_fsm_state7, icmp_ln67_fu_1179_p2, ap_block_state11_io, ap_block_state9_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln29_fu_471_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln30_fu_495_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln31_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (icmp_ln61_fu_1032_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_0 = and_ln52_fu_1026_p2) and (icmp_ln61_fu_1032_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln66_fu_1038_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln67_fu_1179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or (ap_const_boolean_1 = ap_block_state11_io) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or (ap_const_boolean_1 = ap_block_state11_io) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    Gx_address0 <= sext_ln69_fu_1218_p1(4 - 1 downto 0);

    Gx_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Gx_ce0 <= ap_const_logic_1;
        else 
            Gx_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Gy_address0 <= sext_ln69_fu_1218_p1(4 - 1 downto 0);

    Gy_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Gy_ce0 <= ap_const_logic_1;
        else 
            Gy_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_IMAGE_TDATA_blk_n_assign_proc : process(INPUT_IMAGE_V_data_V_0_state, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            INPUT_IMAGE_TDATA_blk_n <= INPUT_IMAGE_V_data_V_0_state(0);
        else 
            INPUT_IMAGE_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_IMAGE_TREADY <= INPUT_IMAGE_V_dest_V_0_state(1);
    INPUT_IMAGE_V_data_V_0_ack_in <= INPUT_IMAGE_V_data_V_0_state(1);

    INPUT_IMAGE_V_data_V_0_ack_out_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_block_state5_io)
    begin
        if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            INPUT_IMAGE_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_IMAGE_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_IMAGE_V_data_V_0_data_out_assign_proc : process(INPUT_IMAGE_V_data_V_0_payload_A, INPUT_IMAGE_V_data_V_0_payload_B, INPUT_IMAGE_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_sel)) then 
            INPUT_IMAGE_V_data_V_0_data_out <= INPUT_IMAGE_V_data_V_0_payload_B;
        else 
            INPUT_IMAGE_V_data_V_0_data_out <= INPUT_IMAGE_V_data_V_0_payload_A;
        end if; 
    end process;

    INPUT_IMAGE_V_data_V_0_load_A <= (not(INPUT_IMAGE_V_data_V_0_sel_wr) and INPUT_IMAGE_V_data_V_0_state_cmp_full);
    INPUT_IMAGE_V_data_V_0_load_B <= (INPUT_IMAGE_V_data_V_0_state_cmp_full and INPUT_IMAGE_V_data_V_0_sel_wr);
    INPUT_IMAGE_V_data_V_0_sel <= INPUT_IMAGE_V_data_V_0_sel_rd;
    INPUT_IMAGE_V_data_V_0_state_cmp_full <= '0' when (INPUT_IMAGE_V_data_V_0_state = ap_const_lv2_1) else '1';
    INPUT_IMAGE_V_data_V_0_vld_in <= INPUT_IMAGE_TVALID;
    INPUT_IMAGE_V_data_V_0_vld_out <= INPUT_IMAGE_V_data_V_0_state(0);
    INPUT_IMAGE_V_dest_V_0_ack_in <= INPUT_IMAGE_V_dest_V_0_state(1);

    INPUT_IMAGE_V_dest_V_0_ack_out_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_block_state5_io)
    begin
        if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            INPUT_IMAGE_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_IMAGE_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_IMAGE_V_dest_V_0_data_out_assign_proc : process(INPUT_IMAGE_V_dest_V_0_payload_A, INPUT_IMAGE_V_dest_V_0_payload_B, INPUT_IMAGE_V_dest_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_IMAGE_V_dest_V_0_sel)) then 
            INPUT_IMAGE_V_dest_V_0_data_out <= INPUT_IMAGE_V_dest_V_0_payload_B;
        else 
            INPUT_IMAGE_V_dest_V_0_data_out <= INPUT_IMAGE_V_dest_V_0_payload_A;
        end if; 
    end process;

    INPUT_IMAGE_V_dest_V_0_load_A <= (not(INPUT_IMAGE_V_dest_V_0_sel_wr) and INPUT_IMAGE_V_dest_V_0_state_cmp_full);
    INPUT_IMAGE_V_dest_V_0_load_B <= (INPUT_IMAGE_V_dest_V_0_state_cmp_full and INPUT_IMAGE_V_dest_V_0_sel_wr);
    INPUT_IMAGE_V_dest_V_0_sel <= INPUT_IMAGE_V_dest_V_0_sel_rd;
    INPUT_IMAGE_V_dest_V_0_state_cmp_full <= '0' when (INPUT_IMAGE_V_dest_V_0_state = ap_const_lv2_1) else '1';
    INPUT_IMAGE_V_dest_V_0_vld_in <= INPUT_IMAGE_TVALID;
    INPUT_IMAGE_V_dest_V_0_vld_out <= INPUT_IMAGE_V_dest_V_0_state(0);
    INPUT_IMAGE_V_id_V_0_ack_in <= INPUT_IMAGE_V_id_V_0_state(1);

    INPUT_IMAGE_V_id_V_0_ack_out_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_block_state5_io)
    begin
        if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            INPUT_IMAGE_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_IMAGE_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_IMAGE_V_id_V_0_data_out_assign_proc : process(INPUT_IMAGE_V_id_V_0_payload_A, INPUT_IMAGE_V_id_V_0_payload_B, INPUT_IMAGE_V_id_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_IMAGE_V_id_V_0_sel)) then 
            INPUT_IMAGE_V_id_V_0_data_out <= INPUT_IMAGE_V_id_V_0_payload_B;
        else 
            INPUT_IMAGE_V_id_V_0_data_out <= INPUT_IMAGE_V_id_V_0_payload_A;
        end if; 
    end process;

    INPUT_IMAGE_V_id_V_0_load_A <= (not(INPUT_IMAGE_V_id_V_0_sel_wr) and INPUT_IMAGE_V_id_V_0_state_cmp_full);
    INPUT_IMAGE_V_id_V_0_load_B <= (INPUT_IMAGE_V_id_V_0_state_cmp_full and INPUT_IMAGE_V_id_V_0_sel_wr);
    INPUT_IMAGE_V_id_V_0_sel <= INPUT_IMAGE_V_id_V_0_sel_rd;
    INPUT_IMAGE_V_id_V_0_state_cmp_full <= '0' when (INPUT_IMAGE_V_id_V_0_state = ap_const_lv2_1) else '1';
    INPUT_IMAGE_V_id_V_0_vld_in <= INPUT_IMAGE_TVALID;
    INPUT_IMAGE_V_id_V_0_vld_out <= INPUT_IMAGE_V_id_V_0_state(0);
    INPUT_IMAGE_V_keep_V_0_ack_in <= INPUT_IMAGE_V_keep_V_0_state(1);

    INPUT_IMAGE_V_keep_V_0_ack_out_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_block_state5_io)
    begin
        if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            INPUT_IMAGE_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_IMAGE_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_IMAGE_V_keep_V_0_data_out_assign_proc : process(INPUT_IMAGE_V_keep_V_0_payload_A, INPUT_IMAGE_V_keep_V_0_payload_B, INPUT_IMAGE_V_keep_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_IMAGE_V_keep_V_0_sel)) then 
            INPUT_IMAGE_V_keep_V_0_data_out <= INPUT_IMAGE_V_keep_V_0_payload_B;
        else 
            INPUT_IMAGE_V_keep_V_0_data_out <= INPUT_IMAGE_V_keep_V_0_payload_A;
        end if; 
    end process;

    INPUT_IMAGE_V_keep_V_0_load_A <= (not(INPUT_IMAGE_V_keep_V_0_sel_wr) and INPUT_IMAGE_V_keep_V_0_state_cmp_full);
    INPUT_IMAGE_V_keep_V_0_load_B <= (INPUT_IMAGE_V_keep_V_0_state_cmp_full and INPUT_IMAGE_V_keep_V_0_sel_wr);
    INPUT_IMAGE_V_keep_V_0_sel <= INPUT_IMAGE_V_keep_V_0_sel_rd;
    INPUT_IMAGE_V_keep_V_0_state_cmp_full <= '0' when (INPUT_IMAGE_V_keep_V_0_state = ap_const_lv2_1) else '1';
    INPUT_IMAGE_V_keep_V_0_vld_in <= INPUT_IMAGE_TVALID;
    INPUT_IMAGE_V_keep_V_0_vld_out <= INPUT_IMAGE_V_keep_V_0_state(0);
    INPUT_IMAGE_V_strb_V_0_ack_in <= INPUT_IMAGE_V_strb_V_0_state(1);

    INPUT_IMAGE_V_strb_V_0_ack_out_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_block_state5_io)
    begin
        if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            INPUT_IMAGE_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_IMAGE_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_IMAGE_V_strb_V_0_data_out_assign_proc : process(INPUT_IMAGE_V_strb_V_0_payload_A, INPUT_IMAGE_V_strb_V_0_payload_B, INPUT_IMAGE_V_strb_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_IMAGE_V_strb_V_0_sel)) then 
            INPUT_IMAGE_V_strb_V_0_data_out <= INPUT_IMAGE_V_strb_V_0_payload_B;
        else 
            INPUT_IMAGE_V_strb_V_0_data_out <= INPUT_IMAGE_V_strb_V_0_payload_A;
        end if; 
    end process;

    INPUT_IMAGE_V_strb_V_0_load_A <= (not(INPUT_IMAGE_V_strb_V_0_sel_wr) and INPUT_IMAGE_V_strb_V_0_state_cmp_full);
    INPUT_IMAGE_V_strb_V_0_load_B <= (INPUT_IMAGE_V_strb_V_0_state_cmp_full and INPUT_IMAGE_V_strb_V_0_sel_wr);
    INPUT_IMAGE_V_strb_V_0_sel <= INPUT_IMAGE_V_strb_V_0_sel_rd;
    INPUT_IMAGE_V_strb_V_0_state_cmp_full <= '0' when (INPUT_IMAGE_V_strb_V_0_state = ap_const_lv2_1) else '1';
    INPUT_IMAGE_V_strb_V_0_vld_in <= INPUT_IMAGE_TVALID;
    INPUT_IMAGE_V_strb_V_0_vld_out <= INPUT_IMAGE_V_strb_V_0_state(0);
    INPUT_IMAGE_V_user_V_0_ack_in <= INPUT_IMAGE_V_user_V_0_state(1);

    INPUT_IMAGE_V_user_V_0_ack_out_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_block_state5_io)
    begin
        if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            INPUT_IMAGE_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_IMAGE_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_IMAGE_V_user_V_0_data_out_assign_proc : process(INPUT_IMAGE_V_user_V_0_payload_A, INPUT_IMAGE_V_user_V_0_payload_B, INPUT_IMAGE_V_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_IMAGE_V_user_V_0_sel)) then 
            INPUT_IMAGE_V_user_V_0_data_out <= INPUT_IMAGE_V_user_V_0_payload_B;
        else 
            INPUT_IMAGE_V_user_V_0_data_out <= INPUT_IMAGE_V_user_V_0_payload_A;
        end if; 
    end process;

    INPUT_IMAGE_V_user_V_0_load_A <= (not(INPUT_IMAGE_V_user_V_0_sel_wr) and INPUT_IMAGE_V_user_V_0_state_cmp_full);
    INPUT_IMAGE_V_user_V_0_load_B <= (INPUT_IMAGE_V_user_V_0_state_cmp_full and INPUT_IMAGE_V_user_V_0_sel_wr);
    INPUT_IMAGE_V_user_V_0_sel <= INPUT_IMAGE_V_user_V_0_sel_rd;
    INPUT_IMAGE_V_user_V_0_state_cmp_full <= '0' when (INPUT_IMAGE_V_user_V_0_state = ap_const_lv2_1) else '1';
    INPUT_IMAGE_V_user_V_0_vld_in <= INPUT_IMAGE_TVALID;
    INPUT_IMAGE_V_user_V_0_vld_out <= INPUT_IMAGE_V_user_V_0_state(0);
    OUTPUT_IMAGE_TDATA <= OUTPUT_IMAGE_V_data_V_1_data_out;

    OUTPUT_IMAGE_TDATA_blk_n_assign_proc : process(OUTPUT_IMAGE_V_data_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state10, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state9, and_ln52_reg_1653, icmp_ln61_reg_1657, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln61_reg_1657 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln52_reg_1653) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            OUTPUT_IMAGE_TDATA_blk_n <= OUTPUT_IMAGE_V_data_V_1_state(1);
        else 
            OUTPUT_IMAGE_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUTPUT_IMAGE_TDEST <= OUTPUT_IMAGE_V_dest_V_1_data_out;
    OUTPUT_IMAGE_TID <= OUTPUT_IMAGE_V_id_V_1_data_out;
    OUTPUT_IMAGE_TKEEP <= OUTPUT_IMAGE_V_keep_V_1_data_out;
    OUTPUT_IMAGE_TLAST <= OUTPUT_IMAGE_V_last_V_1_data_out;
    OUTPUT_IMAGE_TSTRB <= OUTPUT_IMAGE_V_strb_V_1_data_out;
    OUTPUT_IMAGE_TUSER <= OUTPUT_IMAGE_V_user_V_1_data_out;
    OUTPUT_IMAGE_TVALID <= OUTPUT_IMAGE_V_dest_V_1_state(0);
    OUTPUT_IMAGE_V_data_V_1_ack_in <= OUTPUT_IMAGE_V_data_V_1_state(1);
    OUTPUT_IMAGE_V_data_V_1_ack_out <= OUTPUT_IMAGE_TREADY;

    OUTPUT_IMAGE_V_data_V_1_data_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, tmp_data_V_fu_1170_p3)
    begin
        if (((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            OUTPUT_IMAGE_V_data_V_1_data_in <= tmp_data_V_fu_1170_p3;
        elsif (((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            OUTPUT_IMAGE_V_data_V_1_data_in <= ap_const_lv8_0;
        else 
            OUTPUT_IMAGE_V_data_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    OUTPUT_IMAGE_V_data_V_1_data_out_assign_proc : process(OUTPUT_IMAGE_V_data_V_1_payload_A, OUTPUT_IMAGE_V_data_V_1_payload_B, OUTPUT_IMAGE_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_IMAGE_V_data_V_1_sel)) then 
            OUTPUT_IMAGE_V_data_V_1_data_out <= OUTPUT_IMAGE_V_data_V_1_payload_B;
        else 
            OUTPUT_IMAGE_V_data_V_1_data_out <= OUTPUT_IMAGE_V_data_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_IMAGE_V_data_V_1_load_A <= (not(OUTPUT_IMAGE_V_data_V_1_sel_wr) and OUTPUT_IMAGE_V_data_V_1_state_cmp_full);
    OUTPUT_IMAGE_V_data_V_1_load_B <= (OUTPUT_IMAGE_V_data_V_1_state_cmp_full and OUTPUT_IMAGE_V_data_V_1_sel_wr);
    OUTPUT_IMAGE_V_data_V_1_sel <= OUTPUT_IMAGE_V_data_V_1_sel_rd;
    OUTPUT_IMAGE_V_data_V_1_state_cmp_full <= '0' when (OUTPUT_IMAGE_V_data_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_IMAGE_V_data_V_1_vld_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, ap_block_state5_io, ap_block_state6_io, ap_block_state11_io)
    begin
        if (((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or (ap_const_boolean_1 = ap_block_state11_io) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io)) or (not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            OUTPUT_IMAGE_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_IMAGE_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_IMAGE_V_data_V_1_vld_out <= OUTPUT_IMAGE_V_data_V_1_state(0);
    OUTPUT_IMAGE_V_dest_V_1_ack_in <= OUTPUT_IMAGE_V_dest_V_1_state(1);
    OUTPUT_IMAGE_V_dest_V_1_ack_out <= OUTPUT_IMAGE_TREADY;

    OUTPUT_IMAGE_V_dest_V_1_data_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, INPUT_IMAGE_V_dest_V_0_data_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, tmp_dest_V_3_reg_1593, tmp_dest_V_fu_162)
    begin
        if ((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            OUTPUT_IMAGE_V_dest_V_1_data_in <= tmp_dest_V_fu_162;
        elsif (((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            OUTPUT_IMAGE_V_dest_V_1_data_in <= tmp_dest_V_3_reg_1593;
        elsif (((ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            OUTPUT_IMAGE_V_dest_V_1_data_in <= INPUT_IMAGE_V_dest_V_0_data_out;
        else 
            OUTPUT_IMAGE_V_dest_V_1_data_in <= "XXXXXX";
        end if; 
    end process;


    OUTPUT_IMAGE_V_dest_V_1_data_out_assign_proc : process(OUTPUT_IMAGE_V_dest_V_1_payload_A, OUTPUT_IMAGE_V_dest_V_1_payload_B, OUTPUT_IMAGE_V_dest_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_IMAGE_V_dest_V_1_sel)) then 
            OUTPUT_IMAGE_V_dest_V_1_data_out <= OUTPUT_IMAGE_V_dest_V_1_payload_B;
        else 
            OUTPUT_IMAGE_V_dest_V_1_data_out <= OUTPUT_IMAGE_V_dest_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_IMAGE_V_dest_V_1_load_A <= (not(OUTPUT_IMAGE_V_dest_V_1_sel_wr) and OUTPUT_IMAGE_V_dest_V_1_state_cmp_full);
    OUTPUT_IMAGE_V_dest_V_1_load_B <= (OUTPUT_IMAGE_V_dest_V_1_state_cmp_full and OUTPUT_IMAGE_V_dest_V_1_sel_wr);
    OUTPUT_IMAGE_V_dest_V_1_sel <= OUTPUT_IMAGE_V_dest_V_1_sel_rd;
    OUTPUT_IMAGE_V_dest_V_1_state_cmp_full <= '0' when (OUTPUT_IMAGE_V_dest_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_IMAGE_V_dest_V_1_vld_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, ap_block_state5_io, ap_block_state6_io, ap_block_state11_io)
    begin
        if (((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or (ap_const_boolean_1 = ap_block_state11_io) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io)) or (not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            OUTPUT_IMAGE_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_IMAGE_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_IMAGE_V_dest_V_1_vld_out <= OUTPUT_IMAGE_V_dest_V_1_state(0);
    OUTPUT_IMAGE_V_id_V_1_ack_in <= OUTPUT_IMAGE_V_id_V_1_state(1);
    OUTPUT_IMAGE_V_id_V_1_ack_out <= OUTPUT_IMAGE_TREADY;

    OUTPUT_IMAGE_V_id_V_1_data_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, INPUT_IMAGE_V_id_V_0_data_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, tmp_id_V_3_reg_1587, tmp_id_V_fu_178)
    begin
        if ((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            OUTPUT_IMAGE_V_id_V_1_data_in <= tmp_id_V_fu_178;
        elsif (((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            OUTPUT_IMAGE_V_id_V_1_data_in <= tmp_id_V_3_reg_1587;
        elsif (((ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            OUTPUT_IMAGE_V_id_V_1_data_in <= INPUT_IMAGE_V_id_V_0_data_out;
        else 
            OUTPUT_IMAGE_V_id_V_1_data_in <= "XXXXX";
        end if; 
    end process;


    OUTPUT_IMAGE_V_id_V_1_data_out_assign_proc : process(OUTPUT_IMAGE_V_id_V_1_payload_A, OUTPUT_IMAGE_V_id_V_1_payload_B, OUTPUT_IMAGE_V_id_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_IMAGE_V_id_V_1_sel)) then 
            OUTPUT_IMAGE_V_id_V_1_data_out <= OUTPUT_IMAGE_V_id_V_1_payload_B;
        else 
            OUTPUT_IMAGE_V_id_V_1_data_out <= OUTPUT_IMAGE_V_id_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_IMAGE_V_id_V_1_load_A <= (not(OUTPUT_IMAGE_V_id_V_1_sel_wr) and OUTPUT_IMAGE_V_id_V_1_state_cmp_full);
    OUTPUT_IMAGE_V_id_V_1_load_B <= (OUTPUT_IMAGE_V_id_V_1_state_cmp_full and OUTPUT_IMAGE_V_id_V_1_sel_wr);
    OUTPUT_IMAGE_V_id_V_1_sel <= OUTPUT_IMAGE_V_id_V_1_sel_rd;
    OUTPUT_IMAGE_V_id_V_1_state_cmp_full <= '0' when (OUTPUT_IMAGE_V_id_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_IMAGE_V_id_V_1_vld_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, ap_block_state5_io, ap_block_state6_io, ap_block_state11_io)
    begin
        if (((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or (ap_const_boolean_1 = ap_block_state11_io) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io)) or (not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            OUTPUT_IMAGE_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_IMAGE_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_IMAGE_V_id_V_1_vld_out <= OUTPUT_IMAGE_V_id_V_1_state(0);
    OUTPUT_IMAGE_V_keep_V_1_ack_in <= OUTPUT_IMAGE_V_keep_V_1_state(1);
    OUTPUT_IMAGE_V_keep_V_1_ack_out <= OUTPUT_IMAGE_TREADY;

    OUTPUT_IMAGE_V_keep_V_1_data_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, INPUT_IMAGE_V_keep_V_0_data_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, tmp_keep_V_3_reg_1569, tmp_keep_V_fu_166)
    begin
        if ((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            OUTPUT_IMAGE_V_keep_V_1_data_in <= tmp_keep_V_fu_166;
        elsif (((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            OUTPUT_IMAGE_V_keep_V_1_data_in <= tmp_keep_V_3_reg_1569;
        elsif (((ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            OUTPUT_IMAGE_V_keep_V_1_data_in <= INPUT_IMAGE_V_keep_V_0_data_out;
        else 
            OUTPUT_IMAGE_V_keep_V_1_data_in <= "X";
        end if; 
    end process;


    OUTPUT_IMAGE_V_keep_V_1_data_out_assign_proc : process(OUTPUT_IMAGE_V_keep_V_1_payload_A, OUTPUT_IMAGE_V_keep_V_1_payload_B, OUTPUT_IMAGE_V_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_IMAGE_V_keep_V_1_sel)) then 
            OUTPUT_IMAGE_V_keep_V_1_data_out <= OUTPUT_IMAGE_V_keep_V_1_payload_B;
        else 
            OUTPUT_IMAGE_V_keep_V_1_data_out <= OUTPUT_IMAGE_V_keep_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_IMAGE_V_keep_V_1_load_A <= (not(OUTPUT_IMAGE_V_keep_V_1_sel_wr) and OUTPUT_IMAGE_V_keep_V_1_state_cmp_full);
    OUTPUT_IMAGE_V_keep_V_1_load_B <= (OUTPUT_IMAGE_V_keep_V_1_state_cmp_full and OUTPUT_IMAGE_V_keep_V_1_sel_wr);
    OUTPUT_IMAGE_V_keep_V_1_sel <= OUTPUT_IMAGE_V_keep_V_1_sel_rd;
    OUTPUT_IMAGE_V_keep_V_1_state_cmp_full <= '0' when (OUTPUT_IMAGE_V_keep_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_IMAGE_V_keep_V_1_vld_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, ap_block_state5_io, ap_block_state6_io, ap_block_state11_io)
    begin
        if (((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or (ap_const_boolean_1 = ap_block_state11_io) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io)) or (not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            OUTPUT_IMAGE_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_IMAGE_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_IMAGE_V_keep_V_1_vld_out <= OUTPUT_IMAGE_V_keep_V_1_state(0);
    OUTPUT_IMAGE_V_last_V_1_ack_in <= OUTPUT_IMAGE_V_last_V_1_state(1);
    OUTPUT_IMAGE_V_last_V_1_ack_out <= OUTPUT_IMAGE_TREADY;

    OUTPUT_IMAGE_V_last_V_1_data_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, tmp_last_V_fu_1367_p2)
    begin
        if ((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            OUTPUT_IMAGE_V_last_V_1_data_in <= tmp_last_V_fu_1367_p2;
        elsif ((((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            OUTPUT_IMAGE_V_last_V_1_data_in <= ap_const_lv1_0;
        else 
            OUTPUT_IMAGE_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    OUTPUT_IMAGE_V_last_V_1_data_out_assign_proc : process(OUTPUT_IMAGE_V_last_V_1_payload_A, OUTPUT_IMAGE_V_last_V_1_payload_B, OUTPUT_IMAGE_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_IMAGE_V_last_V_1_sel)) then 
            OUTPUT_IMAGE_V_last_V_1_data_out <= OUTPUT_IMAGE_V_last_V_1_payload_B;
        else 
            OUTPUT_IMAGE_V_last_V_1_data_out <= OUTPUT_IMAGE_V_last_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_IMAGE_V_last_V_1_load_A <= (not(OUTPUT_IMAGE_V_last_V_1_sel_wr) and OUTPUT_IMAGE_V_last_V_1_state_cmp_full);
    OUTPUT_IMAGE_V_last_V_1_load_B <= (OUTPUT_IMAGE_V_last_V_1_state_cmp_full and OUTPUT_IMAGE_V_last_V_1_sel_wr);
    OUTPUT_IMAGE_V_last_V_1_sel <= OUTPUT_IMAGE_V_last_V_1_sel_rd;
    OUTPUT_IMAGE_V_last_V_1_state_cmp_full <= '0' when (OUTPUT_IMAGE_V_last_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_IMAGE_V_last_V_1_vld_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, ap_block_state5_io, ap_block_state6_io, ap_block_state11_io)
    begin
        if (((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or (ap_const_boolean_1 = ap_block_state11_io) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io)) or (not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            OUTPUT_IMAGE_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_IMAGE_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_IMAGE_V_last_V_1_vld_out <= OUTPUT_IMAGE_V_last_V_1_state(0);
    OUTPUT_IMAGE_V_strb_V_1_ack_in <= OUTPUT_IMAGE_V_strb_V_1_state(1);
    OUTPUT_IMAGE_V_strb_V_1_ack_out <= OUTPUT_IMAGE_TREADY;

    OUTPUT_IMAGE_V_strb_V_1_data_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, INPUT_IMAGE_V_strb_V_0_data_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, tmp_strb_V_3_reg_1575, tmp_strb_V_fu_170)
    begin
        if ((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            OUTPUT_IMAGE_V_strb_V_1_data_in <= tmp_strb_V_fu_170;
        elsif (((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            OUTPUT_IMAGE_V_strb_V_1_data_in <= tmp_strb_V_3_reg_1575;
        elsif (((ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            OUTPUT_IMAGE_V_strb_V_1_data_in <= INPUT_IMAGE_V_strb_V_0_data_out;
        else 
            OUTPUT_IMAGE_V_strb_V_1_data_in <= "X";
        end if; 
    end process;


    OUTPUT_IMAGE_V_strb_V_1_data_out_assign_proc : process(OUTPUT_IMAGE_V_strb_V_1_payload_A, OUTPUT_IMAGE_V_strb_V_1_payload_B, OUTPUT_IMAGE_V_strb_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_IMAGE_V_strb_V_1_sel)) then 
            OUTPUT_IMAGE_V_strb_V_1_data_out <= OUTPUT_IMAGE_V_strb_V_1_payload_B;
        else 
            OUTPUT_IMAGE_V_strb_V_1_data_out <= OUTPUT_IMAGE_V_strb_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_IMAGE_V_strb_V_1_load_A <= (not(OUTPUT_IMAGE_V_strb_V_1_sel_wr) and OUTPUT_IMAGE_V_strb_V_1_state_cmp_full);
    OUTPUT_IMAGE_V_strb_V_1_load_B <= (OUTPUT_IMAGE_V_strb_V_1_state_cmp_full and OUTPUT_IMAGE_V_strb_V_1_sel_wr);
    OUTPUT_IMAGE_V_strb_V_1_sel <= OUTPUT_IMAGE_V_strb_V_1_sel_rd;
    OUTPUT_IMAGE_V_strb_V_1_state_cmp_full <= '0' when (OUTPUT_IMAGE_V_strb_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_IMAGE_V_strb_V_1_vld_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, ap_block_state5_io, ap_block_state6_io, ap_block_state11_io)
    begin
        if (((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or (ap_const_boolean_1 = ap_block_state11_io) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io)) or (not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            OUTPUT_IMAGE_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_IMAGE_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_IMAGE_V_strb_V_1_vld_out <= OUTPUT_IMAGE_V_strb_V_1_state(0);
    OUTPUT_IMAGE_V_user_V_1_ack_in <= OUTPUT_IMAGE_V_user_V_1_state(1);
    OUTPUT_IMAGE_V_user_V_1_ack_out <= OUTPUT_IMAGE_TREADY;

    OUTPUT_IMAGE_V_user_V_1_data_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, INPUT_IMAGE_V_user_V_0_data_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, tmp_user_V_3_reg_1581, tmp_user_V_fu_174)
    begin
        if ((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            OUTPUT_IMAGE_V_user_V_1_data_in <= tmp_user_V_fu_174;
        elsif (((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            OUTPUT_IMAGE_V_user_V_1_data_in <= tmp_user_V_3_reg_1581;
        elsif (((ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = INPUT_IMAGE_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            OUTPUT_IMAGE_V_user_V_1_data_in <= INPUT_IMAGE_V_user_V_0_data_out;
        else 
            OUTPUT_IMAGE_V_user_V_1_data_in <= "XX";
        end if; 
    end process;


    OUTPUT_IMAGE_V_user_V_1_data_out_assign_proc : process(OUTPUT_IMAGE_V_user_V_1_payload_A, OUTPUT_IMAGE_V_user_V_1_payload_B, OUTPUT_IMAGE_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_IMAGE_V_user_V_1_sel)) then 
            OUTPUT_IMAGE_V_user_V_1_data_out <= OUTPUT_IMAGE_V_user_V_1_payload_B;
        else 
            OUTPUT_IMAGE_V_user_V_1_data_out <= OUTPUT_IMAGE_V_user_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_IMAGE_V_user_V_1_load_A <= (not(OUTPUT_IMAGE_V_user_V_1_sel_wr) and OUTPUT_IMAGE_V_user_V_1_state_cmp_full);
    OUTPUT_IMAGE_V_user_V_1_load_B <= (OUTPUT_IMAGE_V_user_V_1_state_cmp_full and OUTPUT_IMAGE_V_user_V_1_sel_wr);
    OUTPUT_IMAGE_V_user_V_1_sel <= OUTPUT_IMAGE_V_user_V_1_sel_rd;
    OUTPUT_IMAGE_V_user_V_1_state_cmp_full <= '0' when (OUTPUT_IMAGE_V_user_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_IMAGE_V_user_V_1_vld_in_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state5, and_ln52_fu_1026_p2, ap_CS_fsm_state6, icmp_ln66_fu_1038_p2, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, ap_block_state5_io, ap_block_state6_io, ap_block_state11_io)
    begin
        if (((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or (ap_const_boolean_1 = ap_block_state11_io) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_io)) or (not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            OUTPUT_IMAGE_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_IMAGE_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_IMAGE_V_user_V_1_vld_out <= OUTPUT_IMAGE_V_user_V_1_state(0);
    abs200_fu_1100_p3 <= 
        y_dir_0_reg_413 when (abscond199_fu_1094_p2(0) = '1') else 
        neg198_fu_1088_p2;
    abs_fu_1080_p3 <= 
        x_dir_0_reg_401 when (abscond_fu_1074_p2(0) = '1') else 
        neg_fu_1068_p2;
    abscond199_fu_1094_p2 <= "1" when (signed(y_dir_0_reg_413) > signed(ap_const_lv32_0)) else "0";
    abscond_fu_1074_p2 <= "1" when (signed(x_dir_0_reg_401) > signed(ap_const_lv32_0)) else "0";
    add_ln34_1_fu_596_p2 <= std_logic_vector(unsigned(ap_const_lv21_1) + unsigned(counter_2_reg_379));
    add_ln34_fu_507_p2 <= std_logic_vector(unsigned(ap_const_lv21_400) + unsigned(counter_1_reg_345));
    add_ln493_fu_1224_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln68_1_fu_1185_p1));
    add_ln68_2_fu_1058_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln68_fu_1044_p1));
    add_ln69_fu_1213_p2 <= std_logic_vector(unsigned(zext_ln68_2_reg_1669) + unsigned(sub_ln69_fu_1207_p2));
    and_ln41_1_fu_564_p2 <= (icmp_ln41_reg_1487 and and_ln41_fu_559_p2);
    and_ln41_fu_559_p2 <= (icmp_ln41_2_fu_553_p2 and icmp_ln41_1_reg_1505);
    and_ln52_fu_1026_p2 <= (icmp_ln52_fu_1014_p2 and icmp_ln52_1_fu_1020_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_assign_proc : process(OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state)
    begin
                ap_block_state11 <= ((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)));
    end process;


    ap_block_state11_io_assign_proc : process(OUTPUT_IMAGE_V_data_V_1_ack_in, icmp_ln101_fu_1335_p2)
    begin
                ap_block_state11_io <= ((icmp_ln101_fu_1335_p2 = ap_const_lv1_0) and (ap_const_logic_0 = OUTPUT_IMAGE_V_data_V_1_ack_in));
    end process;


    ap_block_state5_io_assign_proc : process(OUTPUT_IMAGE_V_data_V_1_ack_in, and_ln52_fu_1026_p2)
    begin
                ap_block_state5_io <= ((ap_const_lv1_1 = and_ln52_fu_1026_p2) and (ap_const_logic_0 = OUTPUT_IMAGE_V_data_V_1_ack_in));
    end process;


    ap_block_state6_io_assign_proc : process(OUTPUT_IMAGE_V_data_V_1_ack_in, icmp_ln66_fu_1038_p2)
    begin
                ap_block_state6_io <= ((icmp_ln66_fu_1038_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUTPUT_IMAGE_V_data_V_1_ack_in));
    end process;


    ap_block_state9_io_assign_proc : process(OUTPUT_IMAGE_V_data_V_1_ack_in, ap_predicate_op236_write_state9)
    begin
                ap_block_state9_io <= ((ap_const_logic_0 = OUTPUT_IMAGE_V_data_V_1_ack_in) and (ap_predicate_op236_write_state9 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, ap_block_state11_io)
    begin
        if ((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or (ap_const_boolean_1 = ap_block_state11_io) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op236_write_state9_assign_proc : process(and_ln52_reg_1653, icmp_ln61_reg_1657)
    begin
                ap_predicate_op236_write_state9 <= ((icmp_ln61_reg_1657 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln52_reg_1653));
    end process;


    ap_ready_assign_proc : process(OUTPUT_IMAGE_TREADY, OUTPUT_IMAGE_V_data_V_1_state, OUTPUT_IMAGE_V_keep_V_1_state, OUTPUT_IMAGE_V_strb_V_1_state, OUTPUT_IMAGE_V_user_V_1_state, OUTPUT_IMAGE_V_last_V_1_state, OUTPUT_IMAGE_V_id_V_1_state, OUTPUT_IMAGE_V_dest_V_1_state, ap_CS_fsm_state11, icmp_ln101_fu_1335_p2, ap_block_state11_io)
    begin
        if ((not(((ap_const_lv2_1 = OUTPUT_IMAGE_V_dest_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_id_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_last_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_user_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_strb_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_keep_V_1_state) or (ap_const_lv2_1 = OUTPUT_IMAGE_V_data_V_1_state) or (ap_const_boolean_1 = ap_block_state11_io) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_dest_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_id_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_last_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_user_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_strb_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_keep_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)) or ((ap_const_lv2_3 = OUTPUT_IMAGE_V_data_V_1_state) and (ap_const_logic_0 = OUTPUT_IMAGE_TREADY)))) and (icmp_ln101_fu_1335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    colOffset_fu_1048_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(colOffset_0_reg_390));
    counter_fu_483_p2 <= std_logic_vector(unsigned(counter_0_reg_333) + unsigned(ap_const_lv21_20000));
    empty_12_fu_1146_p1 <= result_fu_1108_p2(8 - 1 downto 0);
    grp_fu_1374_p1 <= zext_ln69_1_fu_1268_p1(8 - 1 downto 0);
    grp_fu_1382_p1 <= zext_ln69_1_fu_1268_p1(8 - 1 downto 0);
    i_2_fu_477_p2 <= std_logic_vector(unsigned(i_0_reg_322) + unsigned(ap_const_lv4_1));
    i_fu_1341_p2 <= std_logic_vector(unsigned(i_1_reg_460) + unsigned(ap_const_lv11_1));
    icmp_ln101_fu_1335_p2 <= "1" when (i_1_reg_460 = ap_const_lv11_401) else "0";
    icmp_ln274_1_fu_728_p2 <= "1" when (trunc_ln274_1_fu_632_p1 = ap_const_lv2_0) else "0";
    icmp_ln274_2_fu_523_p2 <= "1" when (trunc_ln274_fu_519_p1 = ap_const_lv2_1) else "0";
    icmp_ln274_3_fu_529_p2 <= "1" when (trunc_ln274_fu_519_p1 = ap_const_lv2_0) else "0";
    icmp_ln274_fu_714_p2 <= "1" when (trunc_ln274_1_fu_632_p1 = ap_const_lv2_1) else "0";
    icmp_ln29_fu_471_p2 <= "1" when (i_0_reg_322 = ap_const_lv4_8) else "0";
    icmp_ln30_fu_495_p2 <= "1" when (row_assign_reg_356 = ap_const_lv8_80) else "0";
    icmp_ln31_fu_535_p2 <= "1" when (col_assign_reg_367 = ap_const_lv11_400) else "0";
    icmp_ln41_1_fu_513_p2 <= "1" when (unsigned(row_assign_reg_356) < unsigned(ap_const_lv8_3)) else "0";
    icmp_ln41_2_fu_553_p2 <= "1" when (unsigned(col_assign_reg_367) < unsigned(ap_const_lv11_3)) else "0";
    icmp_ln41_fu_489_p2 <= "1" when (i_0_reg_322 = ap_const_lv4_0) else "0";
    icmp_ln43_fu_636_p2 <= "1" when (signed(add_ln34_1_fu_596_p2) > signed(ap_const_lv21_800)) else "0";
    icmp_ln52_1_fu_1020_p2 <= "1" when (signed(add_ln34_1_fu_596_p2) < signed(ap_const_lv21_802)) else "0";
    icmp_ln52_fu_1014_p2 <= "1" when (signed(add_ln34_1_fu_596_p2) > signed(ap_const_lv21_400)) else "0";
    icmp_ln61_fu_1032_p2 <= "1" when (signed(add_ln34_1_fu_596_p2) > signed(ap_const_lv21_801)) else "0";
    icmp_ln66_fu_1038_p2 <= "1" when (colOffset_0_reg_390 = ap_const_lv3_2) else "0";
    icmp_ln67_fu_1179_p2 <= "1" when (rowOffset_0_reg_425 = ap_const_lv3_2) else "0";
    icmp_ln80_fu_1124_p2 <= "1" when (tmp_2_fu_1114_p4 = ap_const_lv10_0) else "0";
    icmp_ln82_fu_1140_p2 <= "1" when (signed(tmp_4_fu_1130_p4) > signed(ap_const_lv24_0)) else "0";
    j_fu_541_p2 <= std_logic_vector(unsigned(col_assign_reg_367) + unsigned(ap_const_lv11_1));
    k_fu_501_p2 <= std_logic_vector(unsigned(row_assign_reg_356) + unsigned(ap_const_lv8_1));
    neg198_fu_1088_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(y_dir_0_reg_413));
    neg_fu_1068_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(x_dir_0_reg_401));
    or_ln80_fu_1164_p2 <= (icmp_ln82_fu_1140_p2 or icmp_ln80_fu_1124_p2);

    pixelbuffer_val_1_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, pixelbuffer_val_1_a_reg_1541, zext_ln729_fu_547_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pixelbuffer_val_1_address0 <= pixelbuffer_val_1_a_reg_1541;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pixelbuffer_val_1_address0 <= zext_ln729_fu_547_p1(10 - 1 downto 0);
        else 
            pixelbuffer_val_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    pixelbuffer_val_1_ce0_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_block_state5_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            pixelbuffer_val_1_ce0 <= ap_const_logic_1;
        else 
            pixelbuffer_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pixelbuffer_val_1_we0_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_block_state5_io)
    begin
        if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pixelbuffer_val_1_we0 <= ap_const_logic_1;
        else 
            pixelbuffer_val_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pixelbuffer_val_2_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, pixelbuffer_val_2_a_reg_1546, zext_ln729_fu_547_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pixelbuffer_val_2_address0 <= pixelbuffer_val_2_a_reg_1546;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pixelbuffer_val_2_address0 <= zext_ln729_fu_547_p1(10 - 1 downto 0);
        else 
            pixelbuffer_val_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    pixelbuffer_val_2_ce0_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_block_state5_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            pixelbuffer_val_2_ce0 <= ap_const_logic_1;
        else 
            pixelbuffer_val_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pixelbuffer_val_2_we0_assign_proc : process(INPUT_IMAGE_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_block_state5_io)
    begin
        if ((not(((ap_const_logic_0 = INPUT_IMAGE_V_data_V_0_vld_out) or (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pixelbuffer_val_2_we0 <= ap_const_logic_1;
        else 
            pixelbuffer_val_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_fu_1108_p2 <= std_logic_vector(unsigned(abs_fu_1080_p3) - unsigned(abs200_fu_1100_p3));
    rowOffset_fu_1189_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(rowOffset_0_reg_425));
    select_ln41_2_fu_972_p3 <= 
        window_val_1_1_5_fu_895_p3 when (and_ln41_1_reg_1551(0) = '1') else 
        window_val_1_2_1_fu_666_p3;
    select_ln41_3_fu_979_p3 <= 
        window_val_2_2_46_fu_909_p3 when (and_ln41_1_reg_1551(0) = '1') else 
        window_val_1_0_1_fu_674_p3;
    select_ln41_5_fu_993_p3 <= 
        window_val_0_1_4_fu_930_p3 when (and_ln41_1_reg_1551(0) = '1') else 
        window_val_0_2_1_fu_690_p3;
    select_ln41_6_fu_1000_p3 <= 
        window_val_2_2_49_fu_937_p3 when (and_ln41_1_reg_1551(0) = '1') else 
        window_val_0_0_fu_698_p3;
    select_ln41_fu_958_p3 <= 
        window_val_2_2_42_fu_867_p3 when (and_ln41_1_reg_1551(0) = '1') else 
        window_val_2_0_1_fu_650_p3;
    select_ln80_fu_1156_p3 <= 
        ap_const_lv8_FF when (xor_ln80_fu_1150_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln69_fu_1218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln69_fu_1213_p2),64));

    shl_ln_fu_1234_p3 <= (add_ln493_fu_1224_p2 & ap_const_lv2_0);
    sub_ln68_fu_1242_p2 <= std_logic_vector(unsigned(shl_ln_fu_1234_p3) - unsigned(zext_ln68_fu_1230_p1));
    sub_ln69_fu_1207_p2 <= std_logic_vector(unsigned(tmp_3_fu_1199_p3) - unsigned(zext_ln69_fu_1195_p1));
    tmp_1_fu_1253_p10 <= std_logic_vector(unsigned(sub_ln68_fu_1242_p2) + unsigned(zext_ln68_1_reg_1674));
    tmp_2_fu_1114_p4 <= col_assign_reg_367(10 downto 1);
    tmp_3_fu_1199_p3 <= (rowOffset_fu_1189_p2 & ap_const_lv2_0);
    tmp_4_fu_1130_p4 <= result_fu_1108_p2(31 downto 8);
    tmp_data_V_fu_1170_p3 <= 
        select_ln80_fu_1156_p3 when (or_ln80_fu_1164_p2(0) = '1') else 
        empty_12_fu_1146_p1;
    tmp_last_V_fu_1367_p2 <= "1" when (i_1_reg_460 = ap_const_lv11_400) else "0";
    trunc_ln274_1_fu_632_p1 <= col_assign_reg_367(2 - 1 downto 0);
    trunc_ln274_fu_519_p1 <= row_assign_reg_356(2 - 1 downto 0);
    trunc_ln68_1_fu_1185_p1 <= rowOffset_0_reg_425(2 - 1 downto 0);
    trunc_ln68_fu_1044_p1 <= colOffset_0_reg_390(2 - 1 downto 0);
    window_val_0_0_fu_698_p3 <= 
        window_val_0_1_fu_190 when (icmp_ln43_fu_636_p2(0) = '1') else 
        window_val_2_2_2_fu_186;
    window_val_0_1_2_fu_766_p3 <= 
        window_val_0_1_fu_190 when (icmp_ln274_fu_714_p2(0) = '1') else 
        INPUT_IMAGE_V_data_V_0_data_out;
    window_val_0_1_3_fu_774_p3 <= 
        window_val_0_1_fu_190 when (icmp_ln274_1_fu_728_p2(0) = '1') else 
        window_val_0_1_2_fu_766_p3;
    window_val_0_1_4_fu_930_p3 <= 
        window_val_0_1_3_fu_774_p3 when (icmp_ln274_3_reg_1520(0) = '1') else 
        window_val_0_1_fu_190;
    window_val_0_2_1_fu_690_p3 <= 
        pixelbuffer_val_1_q0 when (icmp_ln43_fu_636_p2(0) = '1') else 
        window_val_0_1_fu_190;
    window_val_1_0_1_fu_674_p3 <= 
        window_val_1_1_fu_202 when (icmp_ln43_fu_636_p2(0) = '1') else 
        window_val_1_0_fu_198;
    window_val_1_1_2_fu_806_p3 <= 
        window_val_1_1_fu_202 when (icmp_ln274_fu_714_p2(0) = '1') else 
        INPUT_IMAGE_V_data_V_0_data_out;
    window_val_1_1_3_fu_814_p3 <= 
        window_val_1_1_fu_202 when (icmp_ln274_1_fu_728_p2(0) = '1') else 
        window_val_1_1_2_fu_806_p3;
    window_val_1_1_4_fu_888_p3 <= 
        window_val_1_1_3_fu_814_p3 when (icmp_ln274_2_reg_1510(0) = '1') else 
        window_val_1_1_fu_202;
    window_val_1_1_5_fu_895_p3 <= 
        window_val_1_1_fu_202 when (icmp_ln274_3_reg_1520(0) = '1') else 
        window_val_1_1_4_fu_888_p3;
    window_val_1_2_1_fu_666_p3 <= 
        pixelbuffer_val_2_q0 when (icmp_ln43_fu_636_p2(0) = '1') else 
        window_val_1_1_fu_202;
    window_val_2_0_1_fu_650_p3 <= 
        window_val_2_1_fu_214 when (icmp_ln43_fu_636_p2(0) = '1') else 
        window_val_2_0_fu_210;
    window_val_2_1_1_fu_642_p3 <= 
        INPUT_IMAGE_V_data_V_0_data_out when (icmp_ln43_fu_636_p2(0) = '1') else 
        window_val_2_1_fu_214;
    window_val_2_1_3_fu_720_p3 <= 
        window_val_2_1_fu_214 when (icmp_ln274_fu_714_p2(0) = '1') else 
        INPUT_IMAGE_V_data_V_0_data_out;
    window_val_2_1_4_fu_734_p3 <= 
        window_val_2_1_fu_214 when (icmp_ln274_1_fu_728_p2(0) = '1') else 
        window_val_2_1_3_fu_720_p3;
    window_val_2_1_5_fu_846_p3 <= 
        window_val_2_1_fu_214 when (icmp_ln274_2_reg_1510(0) = '1') else 
        window_val_2_1_4_fu_734_p3;
    window_val_2_1_6_fu_853_p3 <= 
        window_val_2_1_fu_214 when (icmp_ln274_3_reg_1520(0) = '1') else 
        window_val_2_1_5_fu_846_p3;
    window_val_2_1_7_fu_951_p3 <= 
        window_val_2_1_6_fu_853_p3 when (and_ln41_1_reg_1551(0) = '1') else 
        window_val_2_1_1_fu_642_p3;
    window_val_2_2_13_fu_658_p3 <= 
        window_val_2_0_fu_210 when (icmp_ln43_fu_636_p2(0) = '1') else 
        window_val_2_2_4_fu_206;
    window_val_2_2_17_fu_682_p3 <= 
        window_val_1_0_fu_198 when (icmp_ln43_fu_636_p2(0) = '1') else 
        window_val_2_2_3_fu_194;
    window_val_2_2_27_fu_706_p3 <= 
        window_val_2_2_2_fu_186 when (icmp_ln43_fu_636_p2(0) = '1') else 
        window_val_2_2_1_fu_182;
    window_val_2_2_33_fu_750_p3 <= 
        window_val_2_0_fu_210 when (icmp_ln274_1_fu_728_p2(0) = '1') else 
        window_val_2_2_fu_742_p3;
    window_val_2_2_34_fu_758_p3 <= 
        INPUT_IMAGE_V_data_V_0_data_out when (icmp_ln274_1_fu_728_p2(0) = '1') else 
        window_val_2_2_4_fu_206;
    window_val_2_2_35_fu_782_p3 <= 
        INPUT_IMAGE_V_data_V_0_data_out when (icmp_ln274_fu_714_p2(0) = '1') else 
        window_val_2_2_2_fu_186;
    window_val_2_2_36_fu_790_p3 <= 
        window_val_2_2_2_fu_186 when (icmp_ln274_1_fu_728_p2(0) = '1') else 
        window_val_2_2_35_fu_782_p3;
    window_val_2_2_37_fu_798_p3 <= 
        INPUT_IMAGE_V_data_V_0_data_out when (icmp_ln274_1_fu_728_p2(0) = '1') else 
        window_val_2_2_1_fu_182;
    window_val_2_2_38_fu_822_p3 <= 
        INPUT_IMAGE_V_data_V_0_data_out when (icmp_ln274_fu_714_p2(0) = '1') else 
        window_val_1_0_fu_198;
    window_val_2_2_39_fu_830_p3 <= 
        window_val_1_0_fu_198 when (icmp_ln274_1_fu_728_p2(0) = '1') else 
        window_val_2_2_38_fu_822_p3;
    window_val_2_2_40_fu_838_p3 <= 
        INPUT_IMAGE_V_data_V_0_data_out when (icmp_ln274_1_fu_728_p2(0) = '1') else 
        window_val_2_2_3_fu_194;
    window_val_2_2_41_fu_860_p3 <= 
        window_val_2_0_fu_210 when (icmp_ln274_2_reg_1510(0) = '1') else 
        window_val_2_2_33_fu_750_p3;
    window_val_2_2_42_fu_867_p3 <= 
        window_val_2_0_fu_210 when (icmp_ln274_3_reg_1520(0) = '1') else 
        window_val_2_2_41_fu_860_p3;
    window_val_2_2_43_fu_874_p3 <= 
        window_val_2_2_4_fu_206 when (icmp_ln274_2_reg_1510(0) = '1') else 
        window_val_2_2_34_fu_758_p3;
    window_val_2_2_44_fu_881_p3 <= 
        window_val_2_2_4_fu_206 when (icmp_ln274_3_reg_1520(0) = '1') else 
        window_val_2_2_43_fu_874_p3;
    window_val_2_2_45_fu_902_p3 <= 
        window_val_2_2_39_fu_830_p3 when (icmp_ln274_2_reg_1510(0) = '1') else 
        window_val_1_0_fu_198;
    window_val_2_2_46_fu_909_p3 <= 
        window_val_1_0_fu_198 when (icmp_ln274_3_reg_1520(0) = '1') else 
        window_val_2_2_45_fu_902_p3;
    window_val_2_2_47_fu_916_p3 <= 
        window_val_2_2_40_fu_838_p3 when (icmp_ln274_2_reg_1510(0) = '1') else 
        window_val_2_2_3_fu_194;
    window_val_2_2_48_fu_923_p3 <= 
        window_val_2_2_3_fu_194 when (icmp_ln274_3_reg_1520(0) = '1') else 
        window_val_2_2_47_fu_916_p3;
    window_val_2_2_49_fu_937_p3 <= 
        window_val_2_2_36_fu_790_p3 when (icmp_ln274_3_reg_1520(0) = '1') else 
        window_val_2_2_2_fu_186;
    window_val_2_2_50_fu_944_p3 <= 
        window_val_2_2_37_fu_798_p3 when (icmp_ln274_3_reg_1520(0) = '1') else 
        window_val_2_2_1_fu_182;
    window_val_2_2_51_fu_965_p3 <= 
        window_val_2_2_44_fu_881_p3 when (and_ln41_1_reg_1551(0) = '1') else 
        window_val_2_2_13_fu_658_p3;
    window_val_2_2_52_fu_986_p3 <= 
        window_val_2_2_48_fu_923_p3 when (and_ln41_1_reg_1551(0) = '1') else 
        window_val_2_2_17_fu_682_p3;
    window_val_2_2_53_fu_1007_p3 <= 
        window_val_2_2_50_fu_944_p3 when (and_ln41_1_reg_1551(0) = '1') else 
        window_val_2_2_27_fu_706_p3;
    window_val_2_2_fu_742_p3 <= 
        INPUT_IMAGE_V_data_V_0_data_out when (icmp_ln274_fu_714_p2(0) = '1') else 
        window_val_2_0_fu_210;
    xor_ln80_fu_1150_p2 <= (icmp_ln80_fu_1124_p2 xor ap_const_lv1_1);
    zext_ln68_1_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_2_fu_1058_p2),4));
    zext_ln68_2_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colOffset_fu_1048_p2),5));
    zext_ln68_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln493_fu_1224_p2),4));
    zext_ln69_1_fu_1268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1702),12));
    zext_ln69_fu_1195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rowOffset_fu_1189_p2),5));
    zext_ln729_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_reg_367),64));
end behav;

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sobel_filter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sobel_filter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sobel_filter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<12> sobel_filter::ap_ST_fsm_state1 = "1";
const sc_lv<12> sobel_filter::ap_ST_fsm_state2 = "10";
const sc_lv<12> sobel_filter::ap_ST_fsm_state3 = "100";
const sc_lv<12> sobel_filter::ap_ST_fsm_state4 = "1000";
const sc_lv<12> sobel_filter::ap_ST_fsm_state5 = "10000";
const sc_lv<12> sobel_filter::ap_ST_fsm_state6 = "100000";
const sc_lv<12> sobel_filter::ap_ST_fsm_state7 = "1000000";
const sc_lv<12> sobel_filter::ap_ST_fsm_state8 = "10000000";
const sc_lv<12> sobel_filter::ap_ST_fsm_state9 = "100000000";
const sc_lv<12> sobel_filter::ap_ST_fsm_state10 = "1000000000";
const sc_lv<12> sobel_filter::ap_ST_fsm_state11 = "10000000000";
const sc_lv<12> sobel_filter::ap_ST_fsm_state12 = "100000000000";
const sc_lv<32> sobel_filter::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool sobel_filter::ap_const_boolean_1 = true;
const sc_lv<1> sobel_filter::ap_const_lv1_0 = "0";
const sc_lv<1> sobel_filter::ap_const_lv1_1 = "1";
const sc_lv<2> sobel_filter::ap_const_lv2_0 = "00";
const sc_lv<2> sobel_filter::ap_const_lv2_2 = "10";
const sc_lv<2> sobel_filter::ap_const_lv2_3 = "11";
const sc_lv<2> sobel_filter::ap_const_lv2_1 = "1";
const sc_lv<32> sobel_filter::ap_const_lv32_4 = "100";
const sc_lv<32> sobel_filter::ap_const_lv32_9 = "1001";
const sc_lv<32> sobel_filter::ap_const_lv32_5 = "101";
const sc_lv<32> sobel_filter::ap_const_lv32_8 = "1000";
const sc_lv<32> sobel_filter::ap_const_lv32_A = "1010";
const sc_lv<32> sobel_filter::ap_const_lv32_B = "1011";
const int sobel_filter::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> sobel_filter::ap_const_lv32_1 = "1";
const sc_lv<32> sobel_filter::ap_const_lv32_2 = "10";
const sc_lv<32> sobel_filter::ap_const_lv32_3 = "11";
const bool sobel_filter::ap_const_boolean_0 = false;
const sc_lv<32> sobel_filter::ap_const_lv32_6 = "110";
const sc_lv<32> sobel_filter::ap_const_lv32_7 = "111";
const sc_lv<4> sobel_filter::ap_const_lv4_0 = "0000";
const sc_lv<21> sobel_filter::ap_const_lv21_1FFFFF = "111111111111111111111";
const sc_lv<8> sobel_filter::ap_const_lv8_0 = "00000000";
const sc_lv<11> sobel_filter::ap_const_lv11_0 = "00000000000";
const sc_lv<3> sobel_filter::ap_const_lv3_7 = "111";
const sc_lv<4> sobel_filter::ap_const_lv4_8 = "1000";
const sc_lv<4> sobel_filter::ap_const_lv4_1 = "1";
const sc_lv<21> sobel_filter::ap_const_lv21_20000 = "100000000000000000";
const sc_lv<8> sobel_filter::ap_const_lv8_80 = "10000000";
const sc_lv<8> sobel_filter::ap_const_lv8_1 = "1";
const sc_lv<21> sobel_filter::ap_const_lv21_400 = "10000000000";
const sc_lv<8> sobel_filter::ap_const_lv8_3 = "11";
const sc_lv<11> sobel_filter::ap_const_lv11_400 = "10000000000";
const sc_lv<11> sobel_filter::ap_const_lv11_1 = "1";
const sc_lv<11> sobel_filter::ap_const_lv11_3 = "11";
const sc_lv<21> sobel_filter::ap_const_lv21_1 = "1";
const sc_lv<21> sobel_filter::ap_const_lv21_800 = "100000000000";
const sc_lv<21> sobel_filter::ap_const_lv21_802 = "100000000010";
const sc_lv<21> sobel_filter::ap_const_lv21_801 = "100000000001";
const sc_lv<3> sobel_filter::ap_const_lv3_2 = "10";
const sc_lv<3> sobel_filter::ap_const_lv3_1 = "1";
const sc_lv<10> sobel_filter::ap_const_lv10_0 = "0000000000";
const sc_lv<32> sobel_filter::ap_const_lv32_1F = "11111";
const sc_lv<24> sobel_filter::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<8> sobel_filter::ap_const_lv8_FF = "11111111";
const sc_lv<11> sobel_filter::ap_const_lv11_401 = "10000000001";

sobel_filter::sobel_filter(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Gx_U = new sobel_filter_Gx("Gx_U");
    Gx_U->clk(ap_clk);
    Gx_U->reset(ap_rst_n_inv);
    Gx_U->address0(Gx_address0);
    Gx_U->ce0(Gx_ce0);
    Gx_U->q0(Gx_q0);
    Gy_U = new sobel_filter_Gy("Gy_U");
    Gy_U->clk(ap_clk);
    Gy_U->reset(ap_rst_n_inv);
    Gy_U->address0(Gy_address0);
    Gy_U->ce0(Gy_ce0);
    Gy_U->q0(Gy_q0);
    sobel_filter_ctrl_bus_s_axi_U = new sobel_filter_ctrl_bus_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("sobel_filter_ctrl_bus_s_axi_U");
    sobel_filter_ctrl_bus_s_axi_U->AWVALID(s_axi_ctrl_bus_AWVALID);
    sobel_filter_ctrl_bus_s_axi_U->AWREADY(s_axi_ctrl_bus_AWREADY);
    sobel_filter_ctrl_bus_s_axi_U->AWADDR(s_axi_ctrl_bus_AWADDR);
    sobel_filter_ctrl_bus_s_axi_U->WVALID(s_axi_ctrl_bus_WVALID);
    sobel_filter_ctrl_bus_s_axi_U->WREADY(s_axi_ctrl_bus_WREADY);
    sobel_filter_ctrl_bus_s_axi_U->WDATA(s_axi_ctrl_bus_WDATA);
    sobel_filter_ctrl_bus_s_axi_U->WSTRB(s_axi_ctrl_bus_WSTRB);
    sobel_filter_ctrl_bus_s_axi_U->ARVALID(s_axi_ctrl_bus_ARVALID);
    sobel_filter_ctrl_bus_s_axi_U->ARREADY(s_axi_ctrl_bus_ARREADY);
    sobel_filter_ctrl_bus_s_axi_U->ARADDR(s_axi_ctrl_bus_ARADDR);
    sobel_filter_ctrl_bus_s_axi_U->RVALID(s_axi_ctrl_bus_RVALID);
    sobel_filter_ctrl_bus_s_axi_U->RREADY(s_axi_ctrl_bus_RREADY);
    sobel_filter_ctrl_bus_s_axi_U->RDATA(s_axi_ctrl_bus_RDATA);
    sobel_filter_ctrl_bus_s_axi_U->RRESP(s_axi_ctrl_bus_RRESP);
    sobel_filter_ctrl_bus_s_axi_U->BVALID(s_axi_ctrl_bus_BVALID);
    sobel_filter_ctrl_bus_s_axi_U->BREADY(s_axi_ctrl_bus_BREADY);
    sobel_filter_ctrl_bus_s_axi_U->BRESP(s_axi_ctrl_bus_BRESP);
    sobel_filter_ctrl_bus_s_axi_U->ACLK(ap_clk);
    sobel_filter_ctrl_bus_s_axi_U->ARESET(ap_rst_n_inv);
    sobel_filter_ctrl_bus_s_axi_U->ACLK_EN(ap_var_for_const0);
    sobel_filter_ctrl_bus_s_axi_U->ap_start(ap_start);
    sobel_filter_ctrl_bus_s_axi_U->interrupt(interrupt);
    sobel_filter_ctrl_bus_s_axi_U->ap_ready(ap_ready);
    sobel_filter_ctrl_bus_s_axi_U->ap_done(ap_done);
    sobel_filter_ctrl_bus_s_axi_U->ap_idle(ap_idle);
    pixelbuffer_val_1_U = new sobel_filter_pixebkb("pixelbuffer_val_1_U");
    pixelbuffer_val_1_U->clk(ap_clk);
    pixelbuffer_val_1_U->reset(ap_rst_n_inv);
    pixelbuffer_val_1_U->address0(pixelbuffer_val_1_address0);
    pixelbuffer_val_1_U->ce0(pixelbuffer_val_1_ce0);
    pixelbuffer_val_1_U->we0(pixelbuffer_val_1_we0);
    pixelbuffer_val_1_U->d0(pixelbuffer_val_2_q0);
    pixelbuffer_val_1_U->q0(pixelbuffer_val_1_q0);
    pixelbuffer_val_2_U = new sobel_filter_pixebkb("pixelbuffer_val_2_U");
    pixelbuffer_val_2_U->clk(ap_clk);
    pixelbuffer_val_2_U->reset(ap_rst_n_inv);
    pixelbuffer_val_2_U->address0(pixelbuffer_val_2_address0);
    pixelbuffer_val_2_U->ce0(pixelbuffer_val_2_ce0);
    pixelbuffer_val_2_U->we0(pixelbuffer_val_2_we0);
    pixelbuffer_val_2_U->d0(INPUT_IMAGE_V_data_V_0_data_out);
    pixelbuffer_val_2_U->q0(pixelbuffer_val_2_q0);
    sobel_filter_mux_dEe_U1 = new sobel_filter_mux_dEe<1,1,8,8,8,8,8,8,8,8,8,4,8>("sobel_filter_mux_dEe_U1");
    sobel_filter_mux_dEe_U1->din0(window_val_2_2_53_reg_1647);
    sobel_filter_mux_dEe_U1->din1(select_ln41_6_reg_1641);
    sobel_filter_mux_dEe_U1->din2(select_ln41_5_reg_1635);
    sobel_filter_mux_dEe_U1->din3(window_val_2_2_52_reg_1629);
    sobel_filter_mux_dEe_U1->din4(select_ln41_3_reg_1623);
    sobel_filter_mux_dEe_U1->din5(select_ln41_2_reg_1617);
    sobel_filter_mux_dEe_U1->din6(window_val_2_2_51_reg_1611);
    sobel_filter_mux_dEe_U1->din7(select_ln41_reg_1605);
    sobel_filter_mux_dEe_U1->din8(window_val_2_1_7_reg_1599);
    sobel_filter_mux_dEe_U1->din9(tmp_1_fu_1253_p10);
    sobel_filter_mux_dEe_U1->dout(tmp_1_fu_1253_p11);
    sobel_filter_mac_eOg_U2 = new sobel_filter_mac_eOg<1,1,3,8,32,32>("sobel_filter_mac_eOg_U2");
    sobel_filter_mac_eOg_U2->din0(Gx_q0);
    sobel_filter_mac_eOg_U2->din1(grp_fu_1374_p1);
    sobel_filter_mac_eOg_U2->din2(x_dir_1_reg_436);
    sobel_filter_mac_eOg_U2->dout(grp_fu_1374_p3);
    sobel_filter_mac_eOg_U3 = new sobel_filter_mac_eOg<1,1,3,8,32,32>("sobel_filter_mac_eOg_U3");
    sobel_filter_mac_eOg_U3->din0(Gy_q0);
    sobel_filter_mac_eOg_U3->din1(grp_fu_1382_p1);
    sobel_filter_mac_eOg_U3->din2(y_dir_1_reg_448);
    sobel_filter_mac_eOg_U3->dout(grp_fu_1382_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Gx_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( sext_ln69_fu_1218_p1 );

    SC_METHOD(thread_Gx_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_Gy_address0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( sext_ln69_fu_1218_p1 );

    SC_METHOD(thread_Gy_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_INPUT_IMAGE_TDATA_blk_n);
    sensitive << ( INPUT_IMAGE_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_INPUT_IMAGE_TREADY);
    sensitive << ( INPUT_IMAGE_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_data_V_0_ack_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_data_V_0_ack_out);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_INPUT_IMAGE_V_data_V_0_data_out);
    sensitive << ( INPUT_IMAGE_V_data_V_0_payload_A );
    sensitive << ( INPUT_IMAGE_V_data_V_0_payload_B );
    sensitive << ( INPUT_IMAGE_V_data_V_0_sel );

    SC_METHOD(thread_INPUT_IMAGE_V_data_V_0_load_A);
    sensitive << ( INPUT_IMAGE_V_data_V_0_sel_wr );
    sensitive << ( INPUT_IMAGE_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_IMAGE_V_data_V_0_load_B);
    sensitive << ( INPUT_IMAGE_V_data_V_0_sel_wr );
    sensitive << ( INPUT_IMAGE_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_IMAGE_V_data_V_0_sel);
    sensitive << ( INPUT_IMAGE_V_data_V_0_sel_rd );

    SC_METHOD(thread_INPUT_IMAGE_V_data_V_0_state_cmp_full);
    sensitive << ( INPUT_IMAGE_V_data_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_data_V_0_vld_in);
    sensitive << ( INPUT_IMAGE_TVALID );

    SC_METHOD(thread_INPUT_IMAGE_V_data_V_0_vld_out);
    sensitive << ( INPUT_IMAGE_V_data_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_dest_V_0_ack_in);
    sensitive << ( INPUT_IMAGE_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_dest_V_0_ack_out);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_INPUT_IMAGE_V_dest_V_0_data_out);
    sensitive << ( INPUT_IMAGE_V_dest_V_0_payload_A );
    sensitive << ( INPUT_IMAGE_V_dest_V_0_payload_B );
    sensitive << ( INPUT_IMAGE_V_dest_V_0_sel );

    SC_METHOD(thread_INPUT_IMAGE_V_dest_V_0_load_A);
    sensitive << ( INPUT_IMAGE_V_dest_V_0_sel_wr );
    sensitive << ( INPUT_IMAGE_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_IMAGE_V_dest_V_0_load_B);
    sensitive << ( INPUT_IMAGE_V_dest_V_0_sel_wr );
    sensitive << ( INPUT_IMAGE_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_IMAGE_V_dest_V_0_sel);
    sensitive << ( INPUT_IMAGE_V_dest_V_0_sel_rd );

    SC_METHOD(thread_INPUT_IMAGE_V_dest_V_0_state_cmp_full);
    sensitive << ( INPUT_IMAGE_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_dest_V_0_vld_in);
    sensitive << ( INPUT_IMAGE_TVALID );

    SC_METHOD(thread_INPUT_IMAGE_V_dest_V_0_vld_out);
    sensitive << ( INPUT_IMAGE_V_dest_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_id_V_0_ack_in);
    sensitive << ( INPUT_IMAGE_V_id_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_id_V_0_ack_out);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_INPUT_IMAGE_V_id_V_0_data_out);
    sensitive << ( INPUT_IMAGE_V_id_V_0_payload_A );
    sensitive << ( INPUT_IMAGE_V_id_V_0_payload_B );
    sensitive << ( INPUT_IMAGE_V_id_V_0_sel );

    SC_METHOD(thread_INPUT_IMAGE_V_id_V_0_load_A);
    sensitive << ( INPUT_IMAGE_V_id_V_0_sel_wr );
    sensitive << ( INPUT_IMAGE_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_IMAGE_V_id_V_0_load_B);
    sensitive << ( INPUT_IMAGE_V_id_V_0_sel_wr );
    sensitive << ( INPUT_IMAGE_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_IMAGE_V_id_V_0_sel);
    sensitive << ( INPUT_IMAGE_V_id_V_0_sel_rd );

    SC_METHOD(thread_INPUT_IMAGE_V_id_V_0_state_cmp_full);
    sensitive << ( INPUT_IMAGE_V_id_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_id_V_0_vld_in);
    sensitive << ( INPUT_IMAGE_TVALID );

    SC_METHOD(thread_INPUT_IMAGE_V_id_V_0_vld_out);
    sensitive << ( INPUT_IMAGE_V_id_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_keep_V_0_ack_in);
    sensitive << ( INPUT_IMAGE_V_keep_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_keep_V_0_ack_out);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_INPUT_IMAGE_V_keep_V_0_data_out);
    sensitive << ( INPUT_IMAGE_V_keep_V_0_payload_A );
    sensitive << ( INPUT_IMAGE_V_keep_V_0_payload_B );
    sensitive << ( INPUT_IMAGE_V_keep_V_0_sel );

    SC_METHOD(thread_INPUT_IMAGE_V_keep_V_0_load_A);
    sensitive << ( INPUT_IMAGE_V_keep_V_0_sel_wr );
    sensitive << ( INPUT_IMAGE_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_IMAGE_V_keep_V_0_load_B);
    sensitive << ( INPUT_IMAGE_V_keep_V_0_sel_wr );
    sensitive << ( INPUT_IMAGE_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_IMAGE_V_keep_V_0_sel);
    sensitive << ( INPUT_IMAGE_V_keep_V_0_sel_rd );

    SC_METHOD(thread_INPUT_IMAGE_V_keep_V_0_state_cmp_full);
    sensitive << ( INPUT_IMAGE_V_keep_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_keep_V_0_vld_in);
    sensitive << ( INPUT_IMAGE_TVALID );

    SC_METHOD(thread_INPUT_IMAGE_V_keep_V_0_vld_out);
    sensitive << ( INPUT_IMAGE_V_keep_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_strb_V_0_ack_in);
    sensitive << ( INPUT_IMAGE_V_strb_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_strb_V_0_ack_out);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_INPUT_IMAGE_V_strb_V_0_data_out);
    sensitive << ( INPUT_IMAGE_V_strb_V_0_payload_A );
    sensitive << ( INPUT_IMAGE_V_strb_V_0_payload_B );
    sensitive << ( INPUT_IMAGE_V_strb_V_0_sel );

    SC_METHOD(thread_INPUT_IMAGE_V_strb_V_0_load_A);
    sensitive << ( INPUT_IMAGE_V_strb_V_0_sel_wr );
    sensitive << ( INPUT_IMAGE_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_IMAGE_V_strb_V_0_load_B);
    sensitive << ( INPUT_IMAGE_V_strb_V_0_sel_wr );
    sensitive << ( INPUT_IMAGE_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_IMAGE_V_strb_V_0_sel);
    sensitive << ( INPUT_IMAGE_V_strb_V_0_sel_rd );

    SC_METHOD(thread_INPUT_IMAGE_V_strb_V_0_state_cmp_full);
    sensitive << ( INPUT_IMAGE_V_strb_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_strb_V_0_vld_in);
    sensitive << ( INPUT_IMAGE_TVALID );

    SC_METHOD(thread_INPUT_IMAGE_V_strb_V_0_vld_out);
    sensitive << ( INPUT_IMAGE_V_strb_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_user_V_0_ack_in);
    sensitive << ( INPUT_IMAGE_V_user_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_user_V_0_ack_out);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_INPUT_IMAGE_V_user_V_0_data_out);
    sensitive << ( INPUT_IMAGE_V_user_V_0_payload_A );
    sensitive << ( INPUT_IMAGE_V_user_V_0_payload_B );
    sensitive << ( INPUT_IMAGE_V_user_V_0_sel );

    SC_METHOD(thread_INPUT_IMAGE_V_user_V_0_load_A);
    sensitive << ( INPUT_IMAGE_V_user_V_0_sel_wr );
    sensitive << ( INPUT_IMAGE_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_IMAGE_V_user_V_0_load_B);
    sensitive << ( INPUT_IMAGE_V_user_V_0_sel_wr );
    sensitive << ( INPUT_IMAGE_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_INPUT_IMAGE_V_user_V_0_sel);
    sensitive << ( INPUT_IMAGE_V_user_V_0_sel_rd );

    SC_METHOD(thread_INPUT_IMAGE_V_user_V_0_state_cmp_full);
    sensitive << ( INPUT_IMAGE_V_user_V_0_state );

    SC_METHOD(thread_INPUT_IMAGE_V_user_V_0_vld_in);
    sensitive << ( INPUT_IMAGE_TVALID );

    SC_METHOD(thread_INPUT_IMAGE_V_user_V_0_vld_out);
    sensitive << ( INPUT_IMAGE_V_user_V_0_state );

    SC_METHOD(thread_OUTPUT_IMAGE_TDATA);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_data_out );

    SC_METHOD(thread_OUTPUT_IMAGE_TDATA_blk_n);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( and_ln52_reg_1653 );
    sensitive << ( icmp_ln61_reg_1657 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_OUTPUT_IMAGE_TDEST);
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_data_out );

    SC_METHOD(thread_OUTPUT_IMAGE_TID);
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_data_out );

    SC_METHOD(thread_OUTPUT_IMAGE_TKEEP);
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_data_out );

    SC_METHOD(thread_OUTPUT_IMAGE_TLAST);
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_data_out );

    SC_METHOD(thread_OUTPUT_IMAGE_TSTRB);
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_data_out );

    SC_METHOD(thread_OUTPUT_IMAGE_TUSER);
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_data_out );

    SC_METHOD(thread_OUTPUT_IMAGE_TVALID);
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_data_V_1_ack_in);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_data_V_1_ack_out);
    sensitive << ( OUTPUT_IMAGE_TREADY );

    SC_METHOD(thread_OUTPUT_IMAGE_V_data_V_1_data_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( tmp_data_V_fu_1170_p3 );

    SC_METHOD(thread_OUTPUT_IMAGE_V_data_V_1_data_out);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_payload_A );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_payload_B );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_sel );

    SC_METHOD(thread_OUTPUT_IMAGE_V_data_V_1_load_A);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_data_V_1_load_B);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_data_V_1_sel);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_IMAGE_V_data_V_1_state_cmp_full);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_data_V_1_vld_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( ap_block_state6_io );
    sensitive << ( ap_block_state11_io );

    SC_METHOD(thread_OUTPUT_IMAGE_V_data_V_1_vld_out);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_dest_V_1_ack_in);
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_dest_V_1_ack_out);
    sensitive << ( OUTPUT_IMAGE_TREADY );

    SC_METHOD(thread_OUTPUT_IMAGE_V_dest_V_1_data_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( INPUT_IMAGE_V_dest_V_0_data_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( tmp_dest_V_3_reg_1593 );
    sensitive << ( tmp_dest_V_fu_162 );

    SC_METHOD(thread_OUTPUT_IMAGE_V_dest_V_1_data_out);
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_payload_A );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_payload_B );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_sel );

    SC_METHOD(thread_OUTPUT_IMAGE_V_dest_V_1_load_A);
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_dest_V_1_load_B);
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_dest_V_1_sel);
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_IMAGE_V_dest_V_1_state_cmp_full);
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_dest_V_1_vld_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( ap_block_state6_io );
    sensitive << ( ap_block_state11_io );

    SC_METHOD(thread_OUTPUT_IMAGE_V_dest_V_1_vld_out);
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_id_V_1_ack_in);
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_id_V_1_ack_out);
    sensitive << ( OUTPUT_IMAGE_TREADY );

    SC_METHOD(thread_OUTPUT_IMAGE_V_id_V_1_data_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( INPUT_IMAGE_V_id_V_0_data_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( tmp_id_V_3_reg_1587 );
    sensitive << ( tmp_id_V_fu_178 );

    SC_METHOD(thread_OUTPUT_IMAGE_V_id_V_1_data_out);
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_payload_A );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_payload_B );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_sel );

    SC_METHOD(thread_OUTPUT_IMAGE_V_id_V_1_load_A);
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_id_V_1_load_B);
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_id_V_1_sel);
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_IMAGE_V_id_V_1_state_cmp_full);
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_id_V_1_vld_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( ap_block_state6_io );
    sensitive << ( ap_block_state11_io );

    SC_METHOD(thread_OUTPUT_IMAGE_V_id_V_1_vld_out);
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_keep_V_1_ack_in);
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_keep_V_1_ack_out);
    sensitive << ( OUTPUT_IMAGE_TREADY );

    SC_METHOD(thread_OUTPUT_IMAGE_V_keep_V_1_data_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( INPUT_IMAGE_V_keep_V_0_data_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( tmp_keep_V_3_reg_1569 );
    sensitive << ( tmp_keep_V_fu_166 );

    SC_METHOD(thread_OUTPUT_IMAGE_V_keep_V_1_data_out);
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_payload_A );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_payload_B );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_sel );

    SC_METHOD(thread_OUTPUT_IMAGE_V_keep_V_1_load_A);
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_keep_V_1_load_B);
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_keep_V_1_sel);
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_IMAGE_V_keep_V_1_state_cmp_full);
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_keep_V_1_vld_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( ap_block_state6_io );
    sensitive << ( ap_block_state11_io );

    SC_METHOD(thread_OUTPUT_IMAGE_V_keep_V_1_vld_out);
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_last_V_1_ack_in);
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_last_V_1_ack_out);
    sensitive << ( OUTPUT_IMAGE_TREADY );

    SC_METHOD(thread_OUTPUT_IMAGE_V_last_V_1_data_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( tmp_last_V_fu_1367_p2 );

    SC_METHOD(thread_OUTPUT_IMAGE_V_last_V_1_data_out);
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_payload_A );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_payload_B );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_sel );

    SC_METHOD(thread_OUTPUT_IMAGE_V_last_V_1_load_A);
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_last_V_1_load_B);
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_last_V_1_sel);
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_IMAGE_V_last_V_1_state_cmp_full);
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_last_V_1_vld_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( ap_block_state6_io );
    sensitive << ( ap_block_state11_io );

    SC_METHOD(thread_OUTPUT_IMAGE_V_last_V_1_vld_out);
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_strb_V_1_ack_in);
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_strb_V_1_ack_out);
    sensitive << ( OUTPUT_IMAGE_TREADY );

    SC_METHOD(thread_OUTPUT_IMAGE_V_strb_V_1_data_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( INPUT_IMAGE_V_strb_V_0_data_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( tmp_strb_V_3_reg_1575 );
    sensitive << ( tmp_strb_V_fu_170 );

    SC_METHOD(thread_OUTPUT_IMAGE_V_strb_V_1_data_out);
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_payload_A );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_payload_B );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_sel );

    SC_METHOD(thread_OUTPUT_IMAGE_V_strb_V_1_load_A);
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_strb_V_1_load_B);
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_strb_V_1_sel);
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_IMAGE_V_strb_V_1_state_cmp_full);
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_strb_V_1_vld_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( ap_block_state6_io );
    sensitive << ( ap_block_state11_io );

    SC_METHOD(thread_OUTPUT_IMAGE_V_strb_V_1_vld_out);
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_user_V_1_ack_in);
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_user_V_1_ack_out);
    sensitive << ( OUTPUT_IMAGE_TREADY );

    SC_METHOD(thread_OUTPUT_IMAGE_V_user_V_1_data_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( INPUT_IMAGE_V_user_V_0_data_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( tmp_user_V_3_reg_1581 );
    sensitive << ( tmp_user_V_fu_174 );

    SC_METHOD(thread_OUTPUT_IMAGE_V_user_V_1_data_out);
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_payload_A );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_payload_B );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_sel );

    SC_METHOD(thread_OUTPUT_IMAGE_V_user_V_1_load_A);
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_user_V_1_load_B);
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_sel_wr );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_OUTPUT_IMAGE_V_user_V_1_sel);
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_sel_rd );

    SC_METHOD(thread_OUTPUT_IMAGE_V_user_V_1_state_cmp_full);
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );

    SC_METHOD(thread_OUTPUT_IMAGE_V_user_V_1_vld_in);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( ap_block_state6_io );
    sensitive << ( ap_block_state11_io );

    SC_METHOD(thread_OUTPUT_IMAGE_V_user_V_1_vld_out);
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );

    SC_METHOD(thread_abs200_fu_1100_p3);
    sensitive << ( y_dir_0_reg_413 );
    sensitive << ( abscond199_fu_1094_p2 );
    sensitive << ( neg198_fu_1088_p2 );

    SC_METHOD(thread_abs_fu_1080_p3);
    sensitive << ( x_dir_0_reg_401 );
    sensitive << ( abscond_fu_1074_p2 );
    sensitive << ( neg_fu_1068_p2 );

    SC_METHOD(thread_abscond199_fu_1094_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_block_state6_io );
    sensitive << ( y_dir_0_reg_413 );

    SC_METHOD(thread_abscond_fu_1074_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_block_state6_io );
    sensitive << ( x_dir_0_reg_401 );

    SC_METHOD(thread_add_ln34_1_fu_596_p2);
    sensitive << ( counter_2_reg_379 );

    SC_METHOD(thread_add_ln34_fu_507_p2);
    sensitive << ( counter_1_reg_345 );

    SC_METHOD(thread_add_ln493_fu_1224_p2);
    sensitive << ( trunc_ln68_1_fu_1185_p1 );

    SC_METHOD(thread_add_ln68_2_fu_1058_p2);
    sensitive << ( trunc_ln68_fu_1044_p1 );

    SC_METHOD(thread_add_ln69_fu_1213_p2);
    sensitive << ( zext_ln68_2_reg_1669 );
    sensitive << ( sub_ln69_fu_1207_p2 );

    SC_METHOD(thread_and_ln41_1_fu_564_p2);
    sensitive << ( icmp_ln41_reg_1487 );
    sensitive << ( and_ln41_fu_559_p2 );

    SC_METHOD(thread_and_ln41_fu_559_p2);
    sensitive << ( icmp_ln41_1_reg_1505 );
    sensitive << ( icmp_ln41_2_fu_553_p2 );

    SC_METHOD(thread_and_ln52_fu_1026_p2);
    sensitive << ( icmp_ln52_fu_1014_p2 );
    sensitive << ( icmp_ln52_1_fu_1020_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state11);
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );

    SC_METHOD(thread_ap_block_state11_io);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_ack_in );
    sensitive << ( icmp_ln101_fu_1335_p2 );

    SC_METHOD(thread_ap_block_state5_io);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_ack_in );
    sensitive << ( and_ln52_fu_1026_p2 );

    SC_METHOD(thread_ap_block_state6_io);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_ack_in );
    sensitive << ( icmp_ln66_fu_1038_p2 );

    SC_METHOD(thread_ap_block_state9_io);
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_ack_in );
    sensitive << ( ap_predicate_op236_write_state9 );

    SC_METHOD(thread_ap_done);
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( ap_block_state11_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op236_write_state9);
    sensitive << ( and_ln52_reg_1653 );
    sensitive << ( icmp_ln61_reg_1657 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( ap_block_state11_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_colOffset_fu_1048_p2);
    sensitive << ( colOffset_0_reg_390 );

    SC_METHOD(thread_counter_fu_483_p2);
    sensitive << ( counter_0_reg_333 );

    SC_METHOD(thread_empty_12_fu_1146_p1);
    sensitive << ( result_fu_1108_p2 );

    SC_METHOD(thread_grp_fu_1374_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln69_1_fu_1268_p1 );

    SC_METHOD(thread_grp_fu_1382_p1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( zext_ln69_1_fu_1268_p1 );

    SC_METHOD(thread_i_2_fu_477_p2);
    sensitive << ( i_0_reg_322 );

    SC_METHOD(thread_i_fu_1341_p2);
    sensitive << ( i_1_reg_460 );

    SC_METHOD(thread_icmp_ln101_fu_1335_p2);
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_block_state11_io );
    sensitive << ( i_1_reg_460 );

    SC_METHOD(thread_icmp_ln274_1_fu_728_p2);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( trunc_ln274_1_fu_632_p1 );

    SC_METHOD(thread_icmp_ln274_2_fu_523_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln30_fu_495_p2 );
    sensitive << ( trunc_ln274_fu_519_p1 );

    SC_METHOD(thread_icmp_ln274_3_fu_529_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln30_fu_495_p2 );
    sensitive << ( trunc_ln274_fu_519_p1 );

    SC_METHOD(thread_icmp_ln274_fu_714_p2);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( trunc_ln274_1_fu_632_p1 );

    SC_METHOD(thread_icmp_ln29_fu_471_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_322 );

    SC_METHOD(thread_icmp_ln30_fu_495_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( row_assign_reg_356 );

    SC_METHOD(thread_icmp_ln31_fu_535_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( col_assign_reg_367 );

    SC_METHOD(thread_icmp_ln41_1_fu_513_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln30_fu_495_p2 );
    sensitive << ( row_assign_reg_356 );

    SC_METHOD(thread_icmp_ln41_2_fu_553_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln31_fu_535_p2 );
    sensitive << ( col_assign_reg_367 );

    SC_METHOD(thread_icmp_ln41_fu_489_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln29_fu_471_p2 );
    sensitive << ( i_0_reg_322 );

    SC_METHOD(thread_icmp_ln43_fu_636_p2);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( add_ln34_1_fu_596_p2 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_icmp_ln52_1_fu_1020_p2);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( add_ln34_1_fu_596_p2 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_icmp_ln52_fu_1014_p2);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( add_ln34_1_fu_596_p2 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_icmp_ln61_fu_1032_p2);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( add_ln34_1_fu_596_p2 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_icmp_ln66_fu_1038_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_block_state6_io );
    sensitive << ( colOffset_0_reg_390 );

    SC_METHOD(thread_icmp_ln67_fu_1179_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( rowOffset_0_reg_425 );

    SC_METHOD(thread_icmp_ln80_fu_1124_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_block_state6_io );
    sensitive << ( tmp_2_fu_1114_p4 );

    SC_METHOD(thread_icmp_ln82_fu_1140_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_block_state6_io );
    sensitive << ( tmp_4_fu_1130_p4 );

    SC_METHOD(thread_j_fu_541_p2);
    sensitive << ( col_assign_reg_367 );

    SC_METHOD(thread_k_fu_501_p2);
    sensitive << ( row_assign_reg_356 );

    SC_METHOD(thread_neg198_fu_1088_p2);
    sensitive << ( y_dir_0_reg_413 );

    SC_METHOD(thread_neg_fu_1068_p2);
    sensitive << ( x_dir_0_reg_401 );

    SC_METHOD(thread_or_ln80_fu_1164_p2);
    sensitive << ( icmp_ln80_fu_1124_p2 );
    sensitive << ( icmp_ln82_fu_1140_p2 );

    SC_METHOD(thread_pixelbuffer_val_1_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( pixelbuffer_val_1_a_reg_1541 );
    sensitive << ( zext_ln729_fu_547_p1 );

    SC_METHOD(thread_pixelbuffer_val_1_ce0);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_pixelbuffer_val_1_we0);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_pixelbuffer_val_2_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( pixelbuffer_val_2_a_reg_1546 );
    sensitive << ( zext_ln729_fu_547_p1 );

    SC_METHOD(thread_pixelbuffer_val_2_ce0);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_pixelbuffer_val_2_we0);
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_result_fu_1108_p2);
    sensitive << ( abs_fu_1080_p3 );
    sensitive << ( abs200_fu_1100_p3 );

    SC_METHOD(thread_rowOffset_fu_1189_p2);
    sensitive << ( rowOffset_0_reg_425 );

    SC_METHOD(thread_select_ln41_2_fu_972_p3);
    sensitive << ( and_ln41_1_reg_1551 );
    sensitive << ( window_val_1_1_5_fu_895_p3 );
    sensitive << ( window_val_1_2_1_fu_666_p3 );

    SC_METHOD(thread_select_ln41_3_fu_979_p3);
    sensitive << ( and_ln41_1_reg_1551 );
    sensitive << ( window_val_2_2_46_fu_909_p3 );
    sensitive << ( window_val_1_0_1_fu_674_p3 );

    SC_METHOD(thread_select_ln41_5_fu_993_p3);
    sensitive << ( and_ln41_1_reg_1551 );
    sensitive << ( window_val_0_1_4_fu_930_p3 );
    sensitive << ( window_val_0_2_1_fu_690_p3 );

    SC_METHOD(thread_select_ln41_6_fu_1000_p3);
    sensitive << ( and_ln41_1_reg_1551 );
    sensitive << ( window_val_2_2_49_fu_937_p3 );
    sensitive << ( window_val_0_0_fu_698_p3 );

    SC_METHOD(thread_select_ln41_fu_958_p3);
    sensitive << ( and_ln41_1_reg_1551 );
    sensitive << ( window_val_2_2_42_fu_867_p3 );
    sensitive << ( window_val_2_0_1_fu_650_p3 );

    SC_METHOD(thread_select_ln80_fu_1156_p3);
    sensitive << ( xor_ln80_fu_1150_p2 );

    SC_METHOD(thread_sext_ln69_fu_1218_p1);
    sensitive << ( add_ln69_fu_1213_p2 );

    SC_METHOD(thread_shl_ln_fu_1234_p3);
    sensitive << ( add_ln493_fu_1224_p2 );

    SC_METHOD(thread_sub_ln68_fu_1242_p2);
    sensitive << ( shl_ln_fu_1234_p3 );
    sensitive << ( zext_ln68_fu_1230_p1 );

    SC_METHOD(thread_sub_ln69_fu_1207_p2);
    sensitive << ( tmp_3_fu_1199_p3 );
    sensitive << ( zext_ln69_fu_1195_p1 );

    SC_METHOD(thread_tmp_1_fu_1253_p10);
    sensitive << ( zext_ln68_1_reg_1674 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( sub_ln68_fu_1242_p2 );

    SC_METHOD(thread_tmp_2_fu_1114_p4);
    sensitive << ( col_assign_reg_367 );

    SC_METHOD(thread_tmp_3_fu_1199_p3);
    sensitive << ( rowOffset_fu_1189_p2 );

    SC_METHOD(thread_tmp_4_fu_1130_p4);
    sensitive << ( result_fu_1108_p2 );

    SC_METHOD(thread_tmp_data_V_fu_1170_p3);
    sensitive << ( or_ln80_fu_1164_p2 );
    sensitive << ( select_ln80_fu_1156_p3 );
    sensitive << ( empty_12_fu_1146_p1 );

    SC_METHOD(thread_tmp_last_V_fu_1367_p2);
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( ap_block_state11_io );
    sensitive << ( i_1_reg_460 );

    SC_METHOD(thread_trunc_ln274_1_fu_632_p1);
    sensitive << ( col_assign_reg_367 );

    SC_METHOD(thread_trunc_ln274_fu_519_p1);
    sensitive << ( row_assign_reg_356 );

    SC_METHOD(thread_trunc_ln68_1_fu_1185_p1);
    sensitive << ( rowOffset_0_reg_425 );

    SC_METHOD(thread_trunc_ln68_fu_1044_p1);
    sensitive << ( colOffset_0_reg_390 );

    SC_METHOD(thread_window_val_0_0_fu_698_p3);
    sensitive << ( window_val_2_2_2_fu_186 );
    sensitive << ( window_val_0_1_fu_190 );
    sensitive << ( icmp_ln43_fu_636_p2 );

    SC_METHOD(thread_window_val_0_1_2_fu_766_p3);
    sensitive << ( INPUT_IMAGE_V_data_V_0_data_out );
    sensitive << ( window_val_0_1_fu_190 );
    sensitive << ( icmp_ln274_fu_714_p2 );

    SC_METHOD(thread_window_val_0_1_3_fu_774_p3);
    sensitive << ( window_val_0_1_fu_190 );
    sensitive << ( icmp_ln274_1_fu_728_p2 );
    sensitive << ( window_val_0_1_2_fu_766_p3 );

    SC_METHOD(thread_window_val_0_1_4_fu_930_p3);
    sensitive << ( icmp_ln274_3_reg_1520 );
    sensitive << ( window_val_0_1_fu_190 );
    sensitive << ( window_val_0_1_3_fu_774_p3 );

    SC_METHOD(thread_window_val_0_2_1_fu_690_p3);
    sensitive << ( pixelbuffer_val_1_q0 );
    sensitive << ( window_val_0_1_fu_190 );
    sensitive << ( icmp_ln43_fu_636_p2 );

    SC_METHOD(thread_window_val_1_0_1_fu_674_p3);
    sensitive << ( window_val_1_0_fu_198 );
    sensitive << ( window_val_1_1_fu_202 );
    sensitive << ( icmp_ln43_fu_636_p2 );

    SC_METHOD(thread_window_val_1_1_2_fu_806_p3);
    sensitive << ( INPUT_IMAGE_V_data_V_0_data_out );
    sensitive << ( window_val_1_1_fu_202 );
    sensitive << ( icmp_ln274_fu_714_p2 );

    SC_METHOD(thread_window_val_1_1_3_fu_814_p3);
    sensitive << ( window_val_1_1_fu_202 );
    sensitive << ( icmp_ln274_1_fu_728_p2 );
    sensitive << ( window_val_1_1_2_fu_806_p3 );

    SC_METHOD(thread_window_val_1_1_4_fu_888_p3);
    sensitive << ( icmp_ln274_2_reg_1510 );
    sensitive << ( window_val_1_1_fu_202 );
    sensitive << ( window_val_1_1_3_fu_814_p3 );

    SC_METHOD(thread_window_val_1_1_5_fu_895_p3);
    sensitive << ( icmp_ln274_3_reg_1520 );
    sensitive << ( window_val_1_1_fu_202 );
    sensitive << ( window_val_1_1_4_fu_888_p3 );

    SC_METHOD(thread_window_val_1_2_1_fu_666_p3);
    sensitive << ( pixelbuffer_val_2_q0 );
    sensitive << ( window_val_1_1_fu_202 );
    sensitive << ( icmp_ln43_fu_636_p2 );

    SC_METHOD(thread_window_val_2_0_1_fu_650_p3);
    sensitive << ( window_val_2_0_fu_210 );
    sensitive << ( window_val_2_1_fu_214 );
    sensitive << ( icmp_ln43_fu_636_p2 );

    SC_METHOD(thread_window_val_2_1_1_fu_642_p3);
    sensitive << ( INPUT_IMAGE_V_data_V_0_data_out );
    sensitive << ( window_val_2_1_fu_214 );
    sensitive << ( icmp_ln43_fu_636_p2 );

    SC_METHOD(thread_window_val_2_1_3_fu_720_p3);
    sensitive << ( INPUT_IMAGE_V_data_V_0_data_out );
    sensitive << ( window_val_2_1_fu_214 );
    sensitive << ( icmp_ln274_fu_714_p2 );

    SC_METHOD(thread_window_val_2_1_4_fu_734_p3);
    sensitive << ( window_val_2_1_fu_214 );
    sensitive << ( icmp_ln274_1_fu_728_p2 );
    sensitive << ( window_val_2_1_3_fu_720_p3 );

    SC_METHOD(thread_window_val_2_1_5_fu_846_p3);
    sensitive << ( icmp_ln274_2_reg_1510 );
    sensitive << ( window_val_2_1_fu_214 );
    sensitive << ( window_val_2_1_4_fu_734_p3 );

    SC_METHOD(thread_window_val_2_1_6_fu_853_p3);
    sensitive << ( icmp_ln274_3_reg_1520 );
    sensitive << ( window_val_2_1_fu_214 );
    sensitive << ( window_val_2_1_5_fu_846_p3 );

    SC_METHOD(thread_window_val_2_1_7_fu_951_p3);
    sensitive << ( and_ln41_1_reg_1551 );
    sensitive << ( window_val_2_1_6_fu_853_p3 );
    sensitive << ( window_val_2_1_1_fu_642_p3 );

    SC_METHOD(thread_window_val_2_2_13_fu_658_p3);
    sensitive << ( window_val_2_2_4_fu_206 );
    sensitive << ( window_val_2_0_fu_210 );
    sensitive << ( icmp_ln43_fu_636_p2 );

    SC_METHOD(thread_window_val_2_2_17_fu_682_p3);
    sensitive << ( window_val_2_2_3_fu_194 );
    sensitive << ( window_val_1_0_fu_198 );
    sensitive << ( icmp_ln43_fu_636_p2 );

    SC_METHOD(thread_window_val_2_2_27_fu_706_p3);
    sensitive << ( window_val_2_2_1_fu_182 );
    sensitive << ( window_val_2_2_2_fu_186 );
    sensitive << ( icmp_ln43_fu_636_p2 );

    SC_METHOD(thread_window_val_2_2_33_fu_750_p3);
    sensitive << ( window_val_2_0_fu_210 );
    sensitive << ( icmp_ln274_1_fu_728_p2 );
    sensitive << ( window_val_2_2_fu_742_p3 );

    SC_METHOD(thread_window_val_2_2_34_fu_758_p3);
    sensitive << ( INPUT_IMAGE_V_data_V_0_data_out );
    sensitive << ( window_val_2_2_4_fu_206 );
    sensitive << ( icmp_ln274_1_fu_728_p2 );

    SC_METHOD(thread_window_val_2_2_35_fu_782_p3);
    sensitive << ( INPUT_IMAGE_V_data_V_0_data_out );
    sensitive << ( window_val_2_2_2_fu_186 );
    sensitive << ( icmp_ln274_fu_714_p2 );

    SC_METHOD(thread_window_val_2_2_36_fu_790_p3);
    sensitive << ( window_val_2_2_2_fu_186 );
    sensitive << ( icmp_ln274_1_fu_728_p2 );
    sensitive << ( window_val_2_2_35_fu_782_p3 );

    SC_METHOD(thread_window_val_2_2_37_fu_798_p3);
    sensitive << ( INPUT_IMAGE_V_data_V_0_data_out );
    sensitive << ( window_val_2_2_1_fu_182 );
    sensitive << ( icmp_ln274_1_fu_728_p2 );

    SC_METHOD(thread_window_val_2_2_38_fu_822_p3);
    sensitive << ( INPUT_IMAGE_V_data_V_0_data_out );
    sensitive << ( window_val_1_0_fu_198 );
    sensitive << ( icmp_ln274_fu_714_p2 );

    SC_METHOD(thread_window_val_2_2_39_fu_830_p3);
    sensitive << ( window_val_1_0_fu_198 );
    sensitive << ( icmp_ln274_1_fu_728_p2 );
    sensitive << ( window_val_2_2_38_fu_822_p3 );

    SC_METHOD(thread_window_val_2_2_40_fu_838_p3);
    sensitive << ( INPUT_IMAGE_V_data_V_0_data_out );
    sensitive << ( window_val_2_2_3_fu_194 );
    sensitive << ( icmp_ln274_1_fu_728_p2 );

    SC_METHOD(thread_window_val_2_2_41_fu_860_p3);
    sensitive << ( icmp_ln274_2_reg_1510 );
    sensitive << ( window_val_2_0_fu_210 );
    sensitive << ( window_val_2_2_33_fu_750_p3 );

    SC_METHOD(thread_window_val_2_2_42_fu_867_p3);
    sensitive << ( icmp_ln274_3_reg_1520 );
    sensitive << ( window_val_2_0_fu_210 );
    sensitive << ( window_val_2_2_41_fu_860_p3 );

    SC_METHOD(thread_window_val_2_2_43_fu_874_p3);
    sensitive << ( icmp_ln274_2_reg_1510 );
    sensitive << ( window_val_2_2_4_fu_206 );
    sensitive << ( window_val_2_2_34_fu_758_p3 );

    SC_METHOD(thread_window_val_2_2_44_fu_881_p3);
    sensitive << ( icmp_ln274_3_reg_1520 );
    sensitive << ( window_val_2_2_4_fu_206 );
    sensitive << ( window_val_2_2_43_fu_874_p3 );

    SC_METHOD(thread_window_val_2_2_45_fu_902_p3);
    sensitive << ( icmp_ln274_2_reg_1510 );
    sensitive << ( window_val_1_0_fu_198 );
    sensitive << ( window_val_2_2_39_fu_830_p3 );

    SC_METHOD(thread_window_val_2_2_46_fu_909_p3);
    sensitive << ( icmp_ln274_3_reg_1520 );
    sensitive << ( window_val_1_0_fu_198 );
    sensitive << ( window_val_2_2_45_fu_902_p3 );

    SC_METHOD(thread_window_val_2_2_47_fu_916_p3);
    sensitive << ( icmp_ln274_2_reg_1510 );
    sensitive << ( window_val_2_2_3_fu_194 );
    sensitive << ( window_val_2_2_40_fu_838_p3 );

    SC_METHOD(thread_window_val_2_2_48_fu_923_p3);
    sensitive << ( icmp_ln274_3_reg_1520 );
    sensitive << ( window_val_2_2_3_fu_194 );
    sensitive << ( window_val_2_2_47_fu_916_p3 );

    SC_METHOD(thread_window_val_2_2_49_fu_937_p3);
    sensitive << ( icmp_ln274_3_reg_1520 );
    sensitive << ( window_val_2_2_2_fu_186 );
    sensitive << ( window_val_2_2_36_fu_790_p3 );

    SC_METHOD(thread_window_val_2_2_50_fu_944_p3);
    sensitive << ( icmp_ln274_3_reg_1520 );
    sensitive << ( window_val_2_2_1_fu_182 );
    sensitive << ( window_val_2_2_37_fu_798_p3 );

    SC_METHOD(thread_window_val_2_2_51_fu_965_p3);
    sensitive << ( and_ln41_1_reg_1551 );
    sensitive << ( window_val_2_2_44_fu_881_p3 );
    sensitive << ( window_val_2_2_13_fu_658_p3 );

    SC_METHOD(thread_window_val_2_2_52_fu_986_p3);
    sensitive << ( and_ln41_1_reg_1551 );
    sensitive << ( window_val_2_2_48_fu_923_p3 );
    sensitive << ( window_val_2_2_17_fu_682_p3 );

    SC_METHOD(thread_window_val_2_2_53_fu_1007_p3);
    sensitive << ( and_ln41_1_reg_1551 );
    sensitive << ( window_val_2_2_50_fu_944_p3 );
    sensitive << ( window_val_2_2_27_fu_706_p3 );

    SC_METHOD(thread_window_val_2_2_fu_742_p3);
    sensitive << ( INPUT_IMAGE_V_data_V_0_data_out );
    sensitive << ( window_val_2_0_fu_210 );
    sensitive << ( icmp_ln274_fu_714_p2 );

    SC_METHOD(thread_xor_ln80_fu_1150_p2);
    sensitive << ( icmp_ln80_fu_1124_p2 );

    SC_METHOD(thread_zext_ln68_1_fu_1064_p1);
    sensitive << ( add_ln68_2_fu_1058_p2 );

    SC_METHOD(thread_zext_ln68_2_fu_1054_p1);
    sensitive << ( colOffset_fu_1048_p2 );

    SC_METHOD(thread_zext_ln68_fu_1230_p1);
    sensitive << ( add_ln493_fu_1224_p2 );

    SC_METHOD(thread_zext_ln69_1_fu_1268_p1);
    sensitive << ( tmp_1_reg_1702 );

    SC_METHOD(thread_zext_ln69_fu_1195_p1);
    sensitive << ( rowOffset_fu_1189_p2 );

    SC_METHOD(thread_zext_ln729_fu_547_p1);
    sensitive << ( col_assign_reg_367 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( INPUT_IMAGE_V_data_V_0_vld_out );
    sensitive << ( OUTPUT_IMAGE_TREADY );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_ack_in );
    sensitive << ( OUTPUT_IMAGE_V_data_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_keep_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_strb_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_user_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_last_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_id_V_1_state );
    sensitive << ( OUTPUT_IMAGE_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( and_ln52_fu_1026_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln66_fu_1038_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( icmp_ln101_fu_1335_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln29_fu_471_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln30_fu_495_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln31_fu_535_p2 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( icmp_ln61_fu_1032_p2 );
    sensitive << ( ap_block_state6_io );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( icmp_ln67_fu_1179_p2 );
    sensitive << ( ap_block_state11_io );
    sensitive << ( ap_block_state9_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000001";
    INPUT_IMAGE_V_data_V_0_sel_rd = SC_LOGIC_0;
    INPUT_IMAGE_V_data_V_0_sel_wr = SC_LOGIC_0;
    INPUT_IMAGE_V_data_V_0_state = "00";
    INPUT_IMAGE_V_keep_V_0_sel_rd = SC_LOGIC_0;
    INPUT_IMAGE_V_keep_V_0_sel_wr = SC_LOGIC_0;
    INPUT_IMAGE_V_keep_V_0_state = "00";
    INPUT_IMAGE_V_strb_V_0_sel_rd = SC_LOGIC_0;
    INPUT_IMAGE_V_strb_V_0_sel_wr = SC_LOGIC_0;
    INPUT_IMAGE_V_strb_V_0_state = "00";
    INPUT_IMAGE_V_user_V_0_sel_rd = SC_LOGIC_0;
    INPUT_IMAGE_V_user_V_0_sel_wr = SC_LOGIC_0;
    INPUT_IMAGE_V_user_V_0_state = "00";
    INPUT_IMAGE_V_id_V_0_sel_rd = SC_LOGIC_0;
    INPUT_IMAGE_V_id_V_0_sel_wr = SC_LOGIC_0;
    INPUT_IMAGE_V_id_V_0_state = "00";
    INPUT_IMAGE_V_dest_V_0_sel_rd = SC_LOGIC_0;
    INPUT_IMAGE_V_dest_V_0_sel_wr = SC_LOGIC_0;
    INPUT_IMAGE_V_dest_V_0_state = "00";
    OUTPUT_IMAGE_V_data_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_IMAGE_V_data_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_IMAGE_V_data_V_1_state = "00";
    OUTPUT_IMAGE_V_keep_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_IMAGE_V_keep_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_IMAGE_V_keep_V_1_state = "00";
    OUTPUT_IMAGE_V_strb_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_IMAGE_V_strb_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_IMAGE_V_strb_V_1_state = "00";
    OUTPUT_IMAGE_V_user_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_IMAGE_V_user_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_IMAGE_V_user_V_1_state = "00";
    OUTPUT_IMAGE_V_last_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_IMAGE_V_last_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_IMAGE_V_last_V_1_state = "00";
    OUTPUT_IMAGE_V_id_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_IMAGE_V_id_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_IMAGE_V_id_V_1_state = "00";
    OUTPUT_IMAGE_V_dest_V_1_sel_rd = SC_LOGIC_0;
    OUTPUT_IMAGE_V_dest_V_1_sel_wr = SC_LOGIC_0;
    OUTPUT_IMAGE_V_dest_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sobel_filter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, INPUT_IMAGE_TDATA, "(port)INPUT_IMAGE_TDATA");
    sc_trace(mVcdFile, INPUT_IMAGE_TVALID, "(port)INPUT_IMAGE_TVALID");
    sc_trace(mVcdFile, INPUT_IMAGE_TREADY, "(port)INPUT_IMAGE_TREADY");
    sc_trace(mVcdFile, INPUT_IMAGE_TKEEP, "(port)INPUT_IMAGE_TKEEP");
    sc_trace(mVcdFile, INPUT_IMAGE_TSTRB, "(port)INPUT_IMAGE_TSTRB");
    sc_trace(mVcdFile, INPUT_IMAGE_TUSER, "(port)INPUT_IMAGE_TUSER");
    sc_trace(mVcdFile, INPUT_IMAGE_TLAST, "(port)INPUT_IMAGE_TLAST");
    sc_trace(mVcdFile, INPUT_IMAGE_TID, "(port)INPUT_IMAGE_TID");
    sc_trace(mVcdFile, INPUT_IMAGE_TDEST, "(port)INPUT_IMAGE_TDEST");
    sc_trace(mVcdFile, OUTPUT_IMAGE_TDATA, "(port)OUTPUT_IMAGE_TDATA");
    sc_trace(mVcdFile, OUTPUT_IMAGE_TVALID, "(port)OUTPUT_IMAGE_TVALID");
    sc_trace(mVcdFile, OUTPUT_IMAGE_TREADY, "(port)OUTPUT_IMAGE_TREADY");
    sc_trace(mVcdFile, OUTPUT_IMAGE_TKEEP, "(port)OUTPUT_IMAGE_TKEEP");
    sc_trace(mVcdFile, OUTPUT_IMAGE_TSTRB, "(port)OUTPUT_IMAGE_TSTRB");
    sc_trace(mVcdFile, OUTPUT_IMAGE_TUSER, "(port)OUTPUT_IMAGE_TUSER");
    sc_trace(mVcdFile, OUTPUT_IMAGE_TLAST, "(port)OUTPUT_IMAGE_TLAST");
    sc_trace(mVcdFile, OUTPUT_IMAGE_TID, "(port)OUTPUT_IMAGE_TID");
    sc_trace(mVcdFile, OUTPUT_IMAGE_TDEST, "(port)OUTPUT_IMAGE_TDEST");
    sc_trace(mVcdFile, s_axi_ctrl_bus_AWVALID, "(port)s_axi_ctrl_bus_AWVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_AWREADY, "(port)s_axi_ctrl_bus_AWREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_AWADDR, "(port)s_axi_ctrl_bus_AWADDR");
    sc_trace(mVcdFile, s_axi_ctrl_bus_WVALID, "(port)s_axi_ctrl_bus_WVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_WREADY, "(port)s_axi_ctrl_bus_WREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_WDATA, "(port)s_axi_ctrl_bus_WDATA");
    sc_trace(mVcdFile, s_axi_ctrl_bus_WSTRB, "(port)s_axi_ctrl_bus_WSTRB");
    sc_trace(mVcdFile, s_axi_ctrl_bus_ARVALID, "(port)s_axi_ctrl_bus_ARVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_ARREADY, "(port)s_axi_ctrl_bus_ARREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_ARADDR, "(port)s_axi_ctrl_bus_ARADDR");
    sc_trace(mVcdFile, s_axi_ctrl_bus_RVALID, "(port)s_axi_ctrl_bus_RVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_RREADY, "(port)s_axi_ctrl_bus_RREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_RDATA, "(port)s_axi_ctrl_bus_RDATA");
    sc_trace(mVcdFile, s_axi_ctrl_bus_RRESP, "(port)s_axi_ctrl_bus_RRESP");
    sc_trace(mVcdFile, s_axi_ctrl_bus_BVALID, "(port)s_axi_ctrl_bus_BVALID");
    sc_trace(mVcdFile, s_axi_ctrl_bus_BREADY, "(port)s_axi_ctrl_bus_BREADY");
    sc_trace(mVcdFile, s_axi_ctrl_bus_BRESP, "(port)s_axi_ctrl_bus_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_data_out, "INPUT_IMAGE_V_data_V_0_data_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_vld_in, "INPUT_IMAGE_V_data_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_vld_out, "INPUT_IMAGE_V_data_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_ack_in, "INPUT_IMAGE_V_data_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_ack_out, "INPUT_IMAGE_V_data_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_payload_A, "INPUT_IMAGE_V_data_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_payload_B, "INPUT_IMAGE_V_data_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_sel_rd, "INPUT_IMAGE_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_sel_wr, "INPUT_IMAGE_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_sel, "INPUT_IMAGE_V_data_V_0_sel");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_load_A, "INPUT_IMAGE_V_data_V_0_load_A");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_load_B, "INPUT_IMAGE_V_data_V_0_load_B");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_state, "INPUT_IMAGE_V_data_V_0_state");
    sc_trace(mVcdFile, INPUT_IMAGE_V_data_V_0_state_cmp_full, "INPUT_IMAGE_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_data_out, "INPUT_IMAGE_V_keep_V_0_data_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_vld_in, "INPUT_IMAGE_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_vld_out, "INPUT_IMAGE_V_keep_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_ack_in, "INPUT_IMAGE_V_keep_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_ack_out, "INPUT_IMAGE_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_payload_A, "INPUT_IMAGE_V_keep_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_payload_B, "INPUT_IMAGE_V_keep_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_sel_rd, "INPUT_IMAGE_V_keep_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_sel_wr, "INPUT_IMAGE_V_keep_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_sel, "INPUT_IMAGE_V_keep_V_0_sel");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_load_A, "INPUT_IMAGE_V_keep_V_0_load_A");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_load_B, "INPUT_IMAGE_V_keep_V_0_load_B");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_state, "INPUT_IMAGE_V_keep_V_0_state");
    sc_trace(mVcdFile, INPUT_IMAGE_V_keep_V_0_state_cmp_full, "INPUT_IMAGE_V_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_data_out, "INPUT_IMAGE_V_strb_V_0_data_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_vld_in, "INPUT_IMAGE_V_strb_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_vld_out, "INPUT_IMAGE_V_strb_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_ack_in, "INPUT_IMAGE_V_strb_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_ack_out, "INPUT_IMAGE_V_strb_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_payload_A, "INPUT_IMAGE_V_strb_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_payload_B, "INPUT_IMAGE_V_strb_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_sel_rd, "INPUT_IMAGE_V_strb_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_sel_wr, "INPUT_IMAGE_V_strb_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_sel, "INPUT_IMAGE_V_strb_V_0_sel");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_load_A, "INPUT_IMAGE_V_strb_V_0_load_A");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_load_B, "INPUT_IMAGE_V_strb_V_0_load_B");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_state, "INPUT_IMAGE_V_strb_V_0_state");
    sc_trace(mVcdFile, INPUT_IMAGE_V_strb_V_0_state_cmp_full, "INPUT_IMAGE_V_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_data_out, "INPUT_IMAGE_V_user_V_0_data_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_vld_in, "INPUT_IMAGE_V_user_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_vld_out, "INPUT_IMAGE_V_user_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_ack_in, "INPUT_IMAGE_V_user_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_ack_out, "INPUT_IMAGE_V_user_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_payload_A, "INPUT_IMAGE_V_user_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_payload_B, "INPUT_IMAGE_V_user_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_sel_rd, "INPUT_IMAGE_V_user_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_sel_wr, "INPUT_IMAGE_V_user_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_sel, "INPUT_IMAGE_V_user_V_0_sel");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_load_A, "INPUT_IMAGE_V_user_V_0_load_A");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_load_B, "INPUT_IMAGE_V_user_V_0_load_B");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_state, "INPUT_IMAGE_V_user_V_0_state");
    sc_trace(mVcdFile, INPUT_IMAGE_V_user_V_0_state_cmp_full, "INPUT_IMAGE_V_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_data_out, "INPUT_IMAGE_V_id_V_0_data_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_vld_in, "INPUT_IMAGE_V_id_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_vld_out, "INPUT_IMAGE_V_id_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_ack_in, "INPUT_IMAGE_V_id_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_ack_out, "INPUT_IMAGE_V_id_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_payload_A, "INPUT_IMAGE_V_id_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_payload_B, "INPUT_IMAGE_V_id_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_sel_rd, "INPUT_IMAGE_V_id_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_sel_wr, "INPUT_IMAGE_V_id_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_sel, "INPUT_IMAGE_V_id_V_0_sel");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_load_A, "INPUT_IMAGE_V_id_V_0_load_A");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_load_B, "INPUT_IMAGE_V_id_V_0_load_B");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_state, "INPUT_IMAGE_V_id_V_0_state");
    sc_trace(mVcdFile, INPUT_IMAGE_V_id_V_0_state_cmp_full, "INPUT_IMAGE_V_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_data_out, "INPUT_IMAGE_V_dest_V_0_data_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_vld_in, "INPUT_IMAGE_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_vld_out, "INPUT_IMAGE_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_ack_in, "INPUT_IMAGE_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_ack_out, "INPUT_IMAGE_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_payload_A, "INPUT_IMAGE_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_payload_B, "INPUT_IMAGE_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_sel_rd, "INPUT_IMAGE_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_sel_wr, "INPUT_IMAGE_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_sel, "INPUT_IMAGE_V_dest_V_0_sel");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_load_A, "INPUT_IMAGE_V_dest_V_0_load_A");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_load_B, "INPUT_IMAGE_V_dest_V_0_load_B");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_state, "INPUT_IMAGE_V_dest_V_0_state");
    sc_trace(mVcdFile, INPUT_IMAGE_V_dest_V_0_state_cmp_full, "INPUT_IMAGE_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_data_in, "OUTPUT_IMAGE_V_data_V_1_data_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_data_out, "OUTPUT_IMAGE_V_data_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_vld_in, "OUTPUT_IMAGE_V_data_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_vld_out, "OUTPUT_IMAGE_V_data_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_ack_in, "OUTPUT_IMAGE_V_data_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_ack_out, "OUTPUT_IMAGE_V_data_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_payload_A, "OUTPUT_IMAGE_V_data_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_payload_B, "OUTPUT_IMAGE_V_data_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_sel_rd, "OUTPUT_IMAGE_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_sel_wr, "OUTPUT_IMAGE_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_sel, "OUTPUT_IMAGE_V_data_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_load_A, "OUTPUT_IMAGE_V_data_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_load_B, "OUTPUT_IMAGE_V_data_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_state, "OUTPUT_IMAGE_V_data_V_1_state");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_data_V_1_state_cmp_full, "OUTPUT_IMAGE_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_data_in, "OUTPUT_IMAGE_V_keep_V_1_data_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_data_out, "OUTPUT_IMAGE_V_keep_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_vld_in, "OUTPUT_IMAGE_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_vld_out, "OUTPUT_IMAGE_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_ack_in, "OUTPUT_IMAGE_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_ack_out, "OUTPUT_IMAGE_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_payload_A, "OUTPUT_IMAGE_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_payload_B, "OUTPUT_IMAGE_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_sel_rd, "OUTPUT_IMAGE_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_sel_wr, "OUTPUT_IMAGE_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_sel, "OUTPUT_IMAGE_V_keep_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_load_A, "OUTPUT_IMAGE_V_keep_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_load_B, "OUTPUT_IMAGE_V_keep_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_state, "OUTPUT_IMAGE_V_keep_V_1_state");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_keep_V_1_state_cmp_full, "OUTPUT_IMAGE_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_data_in, "OUTPUT_IMAGE_V_strb_V_1_data_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_data_out, "OUTPUT_IMAGE_V_strb_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_vld_in, "OUTPUT_IMAGE_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_vld_out, "OUTPUT_IMAGE_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_ack_in, "OUTPUT_IMAGE_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_ack_out, "OUTPUT_IMAGE_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_payload_A, "OUTPUT_IMAGE_V_strb_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_payload_B, "OUTPUT_IMAGE_V_strb_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_sel_rd, "OUTPUT_IMAGE_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_sel_wr, "OUTPUT_IMAGE_V_strb_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_sel, "OUTPUT_IMAGE_V_strb_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_load_A, "OUTPUT_IMAGE_V_strb_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_load_B, "OUTPUT_IMAGE_V_strb_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_state, "OUTPUT_IMAGE_V_strb_V_1_state");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_strb_V_1_state_cmp_full, "OUTPUT_IMAGE_V_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_data_in, "OUTPUT_IMAGE_V_user_V_1_data_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_data_out, "OUTPUT_IMAGE_V_user_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_vld_in, "OUTPUT_IMAGE_V_user_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_vld_out, "OUTPUT_IMAGE_V_user_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_ack_in, "OUTPUT_IMAGE_V_user_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_ack_out, "OUTPUT_IMAGE_V_user_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_payload_A, "OUTPUT_IMAGE_V_user_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_payload_B, "OUTPUT_IMAGE_V_user_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_sel_rd, "OUTPUT_IMAGE_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_sel_wr, "OUTPUT_IMAGE_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_sel, "OUTPUT_IMAGE_V_user_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_load_A, "OUTPUT_IMAGE_V_user_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_load_B, "OUTPUT_IMAGE_V_user_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_state, "OUTPUT_IMAGE_V_user_V_1_state");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_user_V_1_state_cmp_full, "OUTPUT_IMAGE_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_data_in, "OUTPUT_IMAGE_V_last_V_1_data_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_data_out, "OUTPUT_IMAGE_V_last_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_vld_in, "OUTPUT_IMAGE_V_last_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_vld_out, "OUTPUT_IMAGE_V_last_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_ack_in, "OUTPUT_IMAGE_V_last_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_ack_out, "OUTPUT_IMAGE_V_last_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_payload_A, "OUTPUT_IMAGE_V_last_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_payload_B, "OUTPUT_IMAGE_V_last_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_sel_rd, "OUTPUT_IMAGE_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_sel_wr, "OUTPUT_IMAGE_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_sel, "OUTPUT_IMAGE_V_last_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_load_A, "OUTPUT_IMAGE_V_last_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_load_B, "OUTPUT_IMAGE_V_last_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_state, "OUTPUT_IMAGE_V_last_V_1_state");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_last_V_1_state_cmp_full, "OUTPUT_IMAGE_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_data_in, "OUTPUT_IMAGE_V_id_V_1_data_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_data_out, "OUTPUT_IMAGE_V_id_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_vld_in, "OUTPUT_IMAGE_V_id_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_vld_out, "OUTPUT_IMAGE_V_id_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_ack_in, "OUTPUT_IMAGE_V_id_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_ack_out, "OUTPUT_IMAGE_V_id_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_payload_A, "OUTPUT_IMAGE_V_id_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_payload_B, "OUTPUT_IMAGE_V_id_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_sel_rd, "OUTPUT_IMAGE_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_sel_wr, "OUTPUT_IMAGE_V_id_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_sel, "OUTPUT_IMAGE_V_id_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_load_A, "OUTPUT_IMAGE_V_id_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_load_B, "OUTPUT_IMAGE_V_id_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_state, "OUTPUT_IMAGE_V_id_V_1_state");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_id_V_1_state_cmp_full, "OUTPUT_IMAGE_V_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_data_in, "OUTPUT_IMAGE_V_dest_V_1_data_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_data_out, "OUTPUT_IMAGE_V_dest_V_1_data_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_vld_in, "OUTPUT_IMAGE_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_vld_out, "OUTPUT_IMAGE_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_ack_in, "OUTPUT_IMAGE_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_ack_out, "OUTPUT_IMAGE_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_payload_A, "OUTPUT_IMAGE_V_dest_V_1_payload_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_payload_B, "OUTPUT_IMAGE_V_dest_V_1_payload_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_sel_rd, "OUTPUT_IMAGE_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_sel_wr, "OUTPUT_IMAGE_V_dest_V_1_sel_wr");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_sel, "OUTPUT_IMAGE_V_dest_V_1_sel");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_load_A, "OUTPUT_IMAGE_V_dest_V_1_load_A");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_load_B, "OUTPUT_IMAGE_V_dest_V_1_load_B");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_state, "OUTPUT_IMAGE_V_dest_V_1_state");
    sc_trace(mVcdFile, OUTPUT_IMAGE_V_dest_V_1_state_cmp_full, "OUTPUT_IMAGE_V_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, Gx_address0, "Gx_address0");
    sc_trace(mVcdFile, Gx_ce0, "Gx_ce0");
    sc_trace(mVcdFile, Gx_q0, "Gx_q0");
    sc_trace(mVcdFile, Gy_address0, "Gy_address0");
    sc_trace(mVcdFile, Gy_ce0, "Gy_ce0");
    sc_trace(mVcdFile, Gy_q0, "Gy_q0");
    sc_trace(mVcdFile, INPUT_IMAGE_TDATA_blk_n, "INPUT_IMAGE_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, OUTPUT_IMAGE_TDATA_blk_n, "OUTPUT_IMAGE_TDATA_blk_n");
    sc_trace(mVcdFile, and_ln52_fu_1026_p2, "and_ln52_fu_1026_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, icmp_ln66_fu_1038_p2, "icmp_ln66_fu_1038_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, and_ln52_reg_1653, "and_ln52_reg_1653");
    sc_trace(mVcdFile, icmp_ln61_reg_1657, "icmp_ln61_reg_1657");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, icmp_ln101_fu_1335_p2, "icmp_ln101_fu_1335_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, i_2_fu_477_p2, "i_2_fu_477_p2");
    sc_trace(mVcdFile, i_2_reg_1477, "i_2_reg_1477");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, counter_fu_483_p2, "counter_fu_483_p2");
    sc_trace(mVcdFile, counter_reg_1482, "counter_reg_1482");
    sc_trace(mVcdFile, icmp_ln29_fu_471_p2, "icmp_ln29_fu_471_p2");
    sc_trace(mVcdFile, icmp_ln41_fu_489_p2, "icmp_ln41_fu_489_p2");
    sc_trace(mVcdFile, icmp_ln41_reg_1487, "icmp_ln41_reg_1487");
    sc_trace(mVcdFile, k_fu_501_p2, "k_fu_501_p2");
    sc_trace(mVcdFile, k_reg_1495, "k_reg_1495");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, add_ln34_fu_507_p2, "add_ln34_fu_507_p2");
    sc_trace(mVcdFile, add_ln34_reg_1500, "add_ln34_reg_1500");
    sc_trace(mVcdFile, icmp_ln30_fu_495_p2, "icmp_ln30_fu_495_p2");
    sc_trace(mVcdFile, icmp_ln41_1_fu_513_p2, "icmp_ln41_1_fu_513_p2");
    sc_trace(mVcdFile, icmp_ln41_1_reg_1505, "icmp_ln41_1_reg_1505");
    sc_trace(mVcdFile, icmp_ln274_2_fu_523_p2, "icmp_ln274_2_fu_523_p2");
    sc_trace(mVcdFile, icmp_ln274_2_reg_1510, "icmp_ln274_2_reg_1510");
    sc_trace(mVcdFile, icmp_ln274_3_fu_529_p2, "icmp_ln274_3_fu_529_p2");
    sc_trace(mVcdFile, icmp_ln274_3_reg_1520, "icmp_ln274_3_reg_1520");
    sc_trace(mVcdFile, j_fu_541_p2, "j_fu_541_p2");
    sc_trace(mVcdFile, j_reg_1536, "j_reg_1536");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, pixelbuffer_val_1_a_reg_1541, "pixelbuffer_val_1_a_reg_1541");
    sc_trace(mVcdFile, icmp_ln31_fu_535_p2, "icmp_ln31_fu_535_p2");
    sc_trace(mVcdFile, pixelbuffer_val_2_a_reg_1546, "pixelbuffer_val_2_a_reg_1546");
    sc_trace(mVcdFile, and_ln41_1_fu_564_p2, "and_ln41_1_fu_564_p2");
    sc_trace(mVcdFile, and_ln41_1_reg_1551, "and_ln41_1_reg_1551");
    sc_trace(mVcdFile, add_ln34_1_fu_596_p2, "add_ln34_1_fu_596_p2");
    sc_trace(mVcdFile, add_ln34_1_reg_1564, "add_ln34_1_reg_1564");
    sc_trace(mVcdFile, ap_block_state5_io, "ap_block_state5_io");
    sc_trace(mVcdFile, tmp_keep_V_3_reg_1569, "tmp_keep_V_3_reg_1569");
    sc_trace(mVcdFile, tmp_strb_V_3_reg_1575, "tmp_strb_V_3_reg_1575");
    sc_trace(mVcdFile, tmp_user_V_3_reg_1581, "tmp_user_V_3_reg_1581");
    sc_trace(mVcdFile, tmp_id_V_3_reg_1587, "tmp_id_V_3_reg_1587");
    sc_trace(mVcdFile, tmp_dest_V_3_reg_1593, "tmp_dest_V_3_reg_1593");
    sc_trace(mVcdFile, window_val_2_1_7_fu_951_p3, "window_val_2_1_7_fu_951_p3");
    sc_trace(mVcdFile, window_val_2_1_7_reg_1599, "window_val_2_1_7_reg_1599");
    sc_trace(mVcdFile, select_ln41_fu_958_p3, "select_ln41_fu_958_p3");
    sc_trace(mVcdFile, select_ln41_reg_1605, "select_ln41_reg_1605");
    sc_trace(mVcdFile, window_val_2_2_51_fu_965_p3, "window_val_2_2_51_fu_965_p3");
    sc_trace(mVcdFile, window_val_2_2_51_reg_1611, "window_val_2_2_51_reg_1611");
    sc_trace(mVcdFile, select_ln41_2_fu_972_p3, "select_ln41_2_fu_972_p3");
    sc_trace(mVcdFile, select_ln41_2_reg_1617, "select_ln41_2_reg_1617");
    sc_trace(mVcdFile, select_ln41_3_fu_979_p3, "select_ln41_3_fu_979_p3");
    sc_trace(mVcdFile, select_ln41_3_reg_1623, "select_ln41_3_reg_1623");
    sc_trace(mVcdFile, window_val_2_2_52_fu_986_p3, "window_val_2_2_52_fu_986_p3");
    sc_trace(mVcdFile, window_val_2_2_52_reg_1629, "window_val_2_2_52_reg_1629");
    sc_trace(mVcdFile, select_ln41_5_fu_993_p3, "select_ln41_5_fu_993_p3");
    sc_trace(mVcdFile, select_ln41_5_reg_1635, "select_ln41_5_reg_1635");
    sc_trace(mVcdFile, select_ln41_6_fu_1000_p3, "select_ln41_6_fu_1000_p3");
    sc_trace(mVcdFile, select_ln41_6_reg_1641, "select_ln41_6_reg_1641");
    sc_trace(mVcdFile, window_val_2_2_53_fu_1007_p3, "window_val_2_2_53_fu_1007_p3");
    sc_trace(mVcdFile, window_val_2_2_53_reg_1647, "window_val_2_2_53_reg_1647");
    sc_trace(mVcdFile, icmp_ln61_fu_1032_p2, "icmp_ln61_fu_1032_p2");
    sc_trace(mVcdFile, colOffset_fu_1048_p2, "colOffset_fu_1048_p2");
    sc_trace(mVcdFile, colOffset_reg_1664, "colOffset_reg_1664");
    sc_trace(mVcdFile, ap_block_state6_io, "ap_block_state6_io");
    sc_trace(mVcdFile, zext_ln68_2_fu_1054_p1, "zext_ln68_2_fu_1054_p1");
    sc_trace(mVcdFile, zext_ln68_2_reg_1669, "zext_ln68_2_reg_1669");
    sc_trace(mVcdFile, zext_ln68_1_fu_1064_p1, "zext_ln68_1_fu_1064_p1");
    sc_trace(mVcdFile, zext_ln68_1_reg_1674, "zext_ln68_1_reg_1674");
    sc_trace(mVcdFile, tmp_data_V_fu_1170_p3, "tmp_data_V_fu_1170_p3");
    sc_trace(mVcdFile, rowOffset_fu_1189_p2, "rowOffset_fu_1189_p2");
    sc_trace(mVcdFile, rowOffset_reg_1687, "rowOffset_reg_1687");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, icmp_ln67_fu_1179_p2, "icmp_ln67_fu_1179_p2");
    sc_trace(mVcdFile, tmp_1_fu_1253_p11, "tmp_1_fu_1253_p11");
    sc_trace(mVcdFile, tmp_1_reg_1702, "tmp_1_reg_1702");
    sc_trace(mVcdFile, grp_fu_1374_p3, "grp_fu_1374_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_1382_p3, "grp_fu_1382_p3");
    sc_trace(mVcdFile, i_fu_1341_p2, "i_fu_1341_p2");
    sc_trace(mVcdFile, i_reg_1720, "i_reg_1720");
    sc_trace(mVcdFile, ap_block_state11, "ap_block_state11");
    sc_trace(mVcdFile, ap_block_state11_io, "ap_block_state11_io");
    sc_trace(mVcdFile, tmp_last_V_fu_1367_p2, "tmp_last_V_fu_1367_p2");
    sc_trace(mVcdFile, pixelbuffer_val_1_address0, "pixelbuffer_val_1_address0");
    sc_trace(mVcdFile, pixelbuffer_val_1_ce0, "pixelbuffer_val_1_ce0");
    sc_trace(mVcdFile, pixelbuffer_val_1_we0, "pixelbuffer_val_1_we0");
    sc_trace(mVcdFile, pixelbuffer_val_1_q0, "pixelbuffer_val_1_q0");
    sc_trace(mVcdFile, pixelbuffer_val_2_address0, "pixelbuffer_val_2_address0");
    sc_trace(mVcdFile, pixelbuffer_val_2_ce0, "pixelbuffer_val_2_ce0");
    sc_trace(mVcdFile, pixelbuffer_val_2_we0, "pixelbuffer_val_2_we0");
    sc_trace(mVcdFile, pixelbuffer_val_2_q0, "pixelbuffer_val_2_q0");
    sc_trace(mVcdFile, i_0_reg_322, "i_0_reg_322");
    sc_trace(mVcdFile, counter_0_reg_333, "counter_0_reg_333");
    sc_trace(mVcdFile, counter_1_reg_345, "counter_1_reg_345");
    sc_trace(mVcdFile, row_assign_reg_356, "row_assign_reg_356");
    sc_trace(mVcdFile, col_assign_reg_367, "col_assign_reg_367");
    sc_trace(mVcdFile, ap_predicate_op236_write_state9, "ap_predicate_op236_write_state9");
    sc_trace(mVcdFile, ap_block_state9_io, "ap_block_state9_io");
    sc_trace(mVcdFile, counter_2_reg_379, "counter_2_reg_379");
    sc_trace(mVcdFile, colOffset_0_reg_390, "colOffset_0_reg_390");
    sc_trace(mVcdFile, x_dir_0_reg_401, "x_dir_0_reg_401");
    sc_trace(mVcdFile, y_dir_0_reg_413, "y_dir_0_reg_413");
    sc_trace(mVcdFile, rowOffset_0_reg_425, "rowOffset_0_reg_425");
    sc_trace(mVcdFile, x_dir_1_reg_436, "x_dir_1_reg_436");
    sc_trace(mVcdFile, y_dir_1_reg_448, "y_dir_1_reg_448");
    sc_trace(mVcdFile, i_1_reg_460, "i_1_reg_460");
    sc_trace(mVcdFile, zext_ln729_fu_547_p1, "zext_ln729_fu_547_p1");
    sc_trace(mVcdFile, sext_ln69_fu_1218_p1, "sext_ln69_fu_1218_p1");
    sc_trace(mVcdFile, tmp_dest_V_fu_162, "tmp_dest_V_fu_162");
    sc_trace(mVcdFile, tmp_keep_V_fu_166, "tmp_keep_V_fu_166");
    sc_trace(mVcdFile, tmp_strb_V_fu_170, "tmp_strb_V_fu_170");
    sc_trace(mVcdFile, tmp_user_V_fu_174, "tmp_user_V_fu_174");
    sc_trace(mVcdFile, tmp_id_V_fu_178, "tmp_id_V_fu_178");
    sc_trace(mVcdFile, window_val_2_2_1_fu_182, "window_val_2_2_1_fu_182");
    sc_trace(mVcdFile, window_val_2_2_2_fu_186, "window_val_2_2_2_fu_186");
    sc_trace(mVcdFile, window_val_0_1_fu_190, "window_val_0_1_fu_190");
    sc_trace(mVcdFile, window_val_2_2_3_fu_194, "window_val_2_2_3_fu_194");
    sc_trace(mVcdFile, window_val_1_0_fu_198, "window_val_1_0_fu_198");
    sc_trace(mVcdFile, window_val_1_1_fu_202, "window_val_1_1_fu_202");
    sc_trace(mVcdFile, window_val_2_2_4_fu_206, "window_val_2_2_4_fu_206");
    sc_trace(mVcdFile, window_val_2_0_fu_210, "window_val_2_0_fu_210");
    sc_trace(mVcdFile, window_val_2_1_fu_214, "window_val_2_1_fu_214");
    sc_trace(mVcdFile, trunc_ln274_fu_519_p1, "trunc_ln274_fu_519_p1");
    sc_trace(mVcdFile, icmp_ln41_2_fu_553_p2, "icmp_ln41_2_fu_553_p2");
    sc_trace(mVcdFile, and_ln41_fu_559_p2, "and_ln41_fu_559_p2");
    sc_trace(mVcdFile, icmp_ln43_fu_636_p2, "icmp_ln43_fu_636_p2");
    sc_trace(mVcdFile, trunc_ln274_1_fu_632_p1, "trunc_ln274_1_fu_632_p1");
    sc_trace(mVcdFile, icmp_ln274_fu_714_p2, "icmp_ln274_fu_714_p2");
    sc_trace(mVcdFile, icmp_ln274_1_fu_728_p2, "icmp_ln274_1_fu_728_p2");
    sc_trace(mVcdFile, window_val_2_1_3_fu_720_p3, "window_val_2_1_3_fu_720_p3");
    sc_trace(mVcdFile, window_val_2_2_fu_742_p3, "window_val_2_2_fu_742_p3");
    sc_trace(mVcdFile, window_val_0_1_2_fu_766_p3, "window_val_0_1_2_fu_766_p3");
    sc_trace(mVcdFile, window_val_2_2_35_fu_782_p3, "window_val_2_2_35_fu_782_p3");
    sc_trace(mVcdFile, window_val_1_1_2_fu_806_p3, "window_val_1_1_2_fu_806_p3");
    sc_trace(mVcdFile, window_val_2_2_38_fu_822_p3, "window_val_2_2_38_fu_822_p3");
    sc_trace(mVcdFile, window_val_2_1_4_fu_734_p3, "window_val_2_1_4_fu_734_p3");
    sc_trace(mVcdFile, window_val_2_1_5_fu_846_p3, "window_val_2_1_5_fu_846_p3");
    sc_trace(mVcdFile, window_val_2_2_33_fu_750_p3, "window_val_2_2_33_fu_750_p3");
    sc_trace(mVcdFile, window_val_2_2_41_fu_860_p3, "window_val_2_2_41_fu_860_p3");
    sc_trace(mVcdFile, window_val_2_2_34_fu_758_p3, "window_val_2_2_34_fu_758_p3");
    sc_trace(mVcdFile, window_val_2_2_43_fu_874_p3, "window_val_2_2_43_fu_874_p3");
    sc_trace(mVcdFile, window_val_1_1_3_fu_814_p3, "window_val_1_1_3_fu_814_p3");
    sc_trace(mVcdFile, window_val_1_1_4_fu_888_p3, "window_val_1_1_4_fu_888_p3");
    sc_trace(mVcdFile, window_val_2_2_39_fu_830_p3, "window_val_2_2_39_fu_830_p3");
    sc_trace(mVcdFile, window_val_2_2_45_fu_902_p3, "window_val_2_2_45_fu_902_p3");
    sc_trace(mVcdFile, window_val_2_2_40_fu_838_p3, "window_val_2_2_40_fu_838_p3");
    sc_trace(mVcdFile, window_val_2_2_47_fu_916_p3, "window_val_2_2_47_fu_916_p3");
    sc_trace(mVcdFile, window_val_0_1_3_fu_774_p3, "window_val_0_1_3_fu_774_p3");
    sc_trace(mVcdFile, window_val_2_2_36_fu_790_p3, "window_val_2_2_36_fu_790_p3");
    sc_trace(mVcdFile, window_val_2_2_37_fu_798_p3, "window_val_2_2_37_fu_798_p3");
    sc_trace(mVcdFile, window_val_2_1_6_fu_853_p3, "window_val_2_1_6_fu_853_p3");
    sc_trace(mVcdFile, window_val_2_1_1_fu_642_p3, "window_val_2_1_1_fu_642_p3");
    sc_trace(mVcdFile, window_val_2_2_42_fu_867_p3, "window_val_2_2_42_fu_867_p3");
    sc_trace(mVcdFile, window_val_2_0_1_fu_650_p3, "window_val_2_0_1_fu_650_p3");
    sc_trace(mVcdFile, window_val_2_2_44_fu_881_p3, "window_val_2_2_44_fu_881_p3");
    sc_trace(mVcdFile, window_val_2_2_13_fu_658_p3, "window_val_2_2_13_fu_658_p3");
    sc_trace(mVcdFile, window_val_1_1_5_fu_895_p3, "window_val_1_1_5_fu_895_p3");
    sc_trace(mVcdFile, window_val_1_2_1_fu_666_p3, "window_val_1_2_1_fu_666_p3");
    sc_trace(mVcdFile, window_val_2_2_46_fu_909_p3, "window_val_2_2_46_fu_909_p3");
    sc_trace(mVcdFile, window_val_1_0_1_fu_674_p3, "window_val_1_0_1_fu_674_p3");
    sc_trace(mVcdFile, window_val_2_2_48_fu_923_p3, "window_val_2_2_48_fu_923_p3");
    sc_trace(mVcdFile, window_val_2_2_17_fu_682_p3, "window_val_2_2_17_fu_682_p3");
    sc_trace(mVcdFile, window_val_0_1_4_fu_930_p3, "window_val_0_1_4_fu_930_p3");
    sc_trace(mVcdFile, window_val_0_2_1_fu_690_p3, "window_val_0_2_1_fu_690_p3");
    sc_trace(mVcdFile, window_val_2_2_49_fu_937_p3, "window_val_2_2_49_fu_937_p3");
    sc_trace(mVcdFile, window_val_0_0_fu_698_p3, "window_val_0_0_fu_698_p3");
    sc_trace(mVcdFile, window_val_2_2_50_fu_944_p3, "window_val_2_2_50_fu_944_p3");
    sc_trace(mVcdFile, window_val_2_2_27_fu_706_p3, "window_val_2_2_27_fu_706_p3");
    sc_trace(mVcdFile, icmp_ln52_fu_1014_p2, "icmp_ln52_fu_1014_p2");
    sc_trace(mVcdFile, icmp_ln52_1_fu_1020_p2, "icmp_ln52_1_fu_1020_p2");
    sc_trace(mVcdFile, trunc_ln68_fu_1044_p1, "trunc_ln68_fu_1044_p1");
    sc_trace(mVcdFile, add_ln68_2_fu_1058_p2, "add_ln68_2_fu_1058_p2");
    sc_trace(mVcdFile, abscond_fu_1074_p2, "abscond_fu_1074_p2");
    sc_trace(mVcdFile, neg_fu_1068_p2, "neg_fu_1068_p2");
    sc_trace(mVcdFile, abscond199_fu_1094_p2, "abscond199_fu_1094_p2");
    sc_trace(mVcdFile, neg198_fu_1088_p2, "neg198_fu_1088_p2");
    sc_trace(mVcdFile, abs_fu_1080_p3, "abs_fu_1080_p3");
    sc_trace(mVcdFile, abs200_fu_1100_p3, "abs200_fu_1100_p3");
    sc_trace(mVcdFile, tmp_2_fu_1114_p4, "tmp_2_fu_1114_p4");
    sc_trace(mVcdFile, result_fu_1108_p2, "result_fu_1108_p2");
    sc_trace(mVcdFile, tmp_4_fu_1130_p4, "tmp_4_fu_1130_p4");
    sc_trace(mVcdFile, icmp_ln80_fu_1124_p2, "icmp_ln80_fu_1124_p2");
    sc_trace(mVcdFile, xor_ln80_fu_1150_p2, "xor_ln80_fu_1150_p2");
    sc_trace(mVcdFile, icmp_ln82_fu_1140_p2, "icmp_ln82_fu_1140_p2");
    sc_trace(mVcdFile, or_ln80_fu_1164_p2, "or_ln80_fu_1164_p2");
    sc_trace(mVcdFile, select_ln80_fu_1156_p3, "select_ln80_fu_1156_p3");
    sc_trace(mVcdFile, empty_12_fu_1146_p1, "empty_12_fu_1146_p1");
    sc_trace(mVcdFile, tmp_3_fu_1199_p3, "tmp_3_fu_1199_p3");
    sc_trace(mVcdFile, zext_ln69_fu_1195_p1, "zext_ln69_fu_1195_p1");
    sc_trace(mVcdFile, sub_ln69_fu_1207_p2, "sub_ln69_fu_1207_p2");
    sc_trace(mVcdFile, add_ln69_fu_1213_p2, "add_ln69_fu_1213_p2");
    sc_trace(mVcdFile, trunc_ln68_1_fu_1185_p1, "trunc_ln68_1_fu_1185_p1");
    sc_trace(mVcdFile, add_ln493_fu_1224_p2, "add_ln493_fu_1224_p2");
    sc_trace(mVcdFile, shl_ln_fu_1234_p3, "shl_ln_fu_1234_p3");
    sc_trace(mVcdFile, zext_ln68_fu_1230_p1, "zext_ln68_fu_1230_p1");
    sc_trace(mVcdFile, sub_ln68_fu_1242_p2, "sub_ln68_fu_1242_p2");
    sc_trace(mVcdFile, tmp_1_fu_1253_p10, "tmp_1_fu_1253_p10");
    sc_trace(mVcdFile, grp_fu_1374_p1, "grp_fu_1374_p1");
    sc_trace(mVcdFile, zext_ln69_1_fu_1268_p1, "zext_ln69_1_fu_1268_p1");
    sc_trace(mVcdFile, grp_fu_1382_p1, "grp_fu_1382_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sobel_filter.hdltvin.dat");
    mHdltvoutHandle.open("sobel_filter.hdltvout.dat");
}

sobel_filter::~sobel_filter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Gx_U;
    delete Gy_U;
    delete sobel_filter_ctrl_bus_s_axi_U;
    delete pixelbuffer_val_1_U;
    delete pixelbuffer_val_2_U;
    delete sobel_filter_mux_dEe_U1;
    delete sobel_filter_mac_eOg_U2;
    delete sobel_filter_mac_eOg_U3;
}

void sobel_filter::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sobel_filter::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_vld_out.read()))) {
            INPUT_IMAGE_V_data_V_0_sel_rd =  (sc_logic) (~INPUT_IMAGE_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_ack_in.read()))) {
            INPUT_IMAGE_V_data_V_0_sel_wr =  (sc_logic) (~INPUT_IMAGE_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(INPUT_IMAGE_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(INPUT_IMAGE_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            INPUT_IMAGE_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_IMAGE_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_IMAGE_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            INPUT_IMAGE_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(INPUT_IMAGE_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(INPUT_IMAGE_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(INPUT_IMAGE_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_ack_out.read()))))) {
            INPUT_IMAGE_V_data_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_IMAGE_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_vld_out.read()))) {
            INPUT_IMAGE_V_dest_V_0_sel_rd =  (sc_logic) (~INPUT_IMAGE_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_ack_in.read()))) {
            INPUT_IMAGE_V_dest_V_0_sel_wr =  (sc_logic) (~INPUT_IMAGE_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_IMAGE_V_dest_V_0_state.read())))) {
            INPUT_IMAGE_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_IMAGE_V_dest_V_0_state.read())))) {
            INPUT_IMAGE_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_IMAGE_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_IMAGE_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_ack_out.read()))))) {
            INPUT_IMAGE_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_IMAGE_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_vld_out.read()))) {
            INPUT_IMAGE_V_id_V_0_sel_rd =  (sc_logic) (~INPUT_IMAGE_V_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_ack_in.read()))) {
            INPUT_IMAGE_V_id_V_0_sel_wr =  (sc_logic) (~INPUT_IMAGE_V_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_IMAGE_V_id_V_0_state.read())))) {
            INPUT_IMAGE_V_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_IMAGE_V_id_V_0_state.read())))) {
            INPUT_IMAGE_V_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_IMAGE_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_IMAGE_V_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_ack_out.read()))))) {
            INPUT_IMAGE_V_id_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_IMAGE_V_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_vld_out.read()))) {
            INPUT_IMAGE_V_keep_V_0_sel_rd =  (sc_logic) (~INPUT_IMAGE_V_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_ack_in.read()))) {
            INPUT_IMAGE_V_keep_V_0_sel_wr =  (sc_logic) (~INPUT_IMAGE_V_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_IMAGE_V_keep_V_0_state.read())))) {
            INPUT_IMAGE_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_IMAGE_V_keep_V_0_state.read())))) {
            INPUT_IMAGE_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_IMAGE_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_IMAGE_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_ack_out.read()))))) {
            INPUT_IMAGE_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_IMAGE_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_vld_out.read()))) {
            INPUT_IMAGE_V_strb_V_0_sel_rd =  (sc_logic) (~INPUT_IMAGE_V_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_ack_in.read()))) {
            INPUT_IMAGE_V_strb_V_0_sel_wr =  (sc_logic) (~INPUT_IMAGE_V_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_IMAGE_V_strb_V_0_state.read())))) {
            INPUT_IMAGE_V_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_IMAGE_V_strb_V_0_state.read())))) {
            INPUT_IMAGE_V_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_IMAGE_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_IMAGE_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_ack_out.read()))))) {
            INPUT_IMAGE_V_strb_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_IMAGE_V_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_vld_out.read()))) {
            INPUT_IMAGE_V_user_V_0_sel_rd =  (sc_logic) (~INPUT_IMAGE_V_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_ack_in.read()))) {
            INPUT_IMAGE_V_user_V_0_sel_wr =  (sc_logic) (~INPUT_IMAGE_V_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        INPUT_IMAGE_V_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_IMAGE_V_user_V_0_state.read())))) {
            INPUT_IMAGE_V_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_IMAGE_V_user_V_0_state.read())))) {
            INPUT_IMAGE_V_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, INPUT_IMAGE_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, INPUT_IMAGE_V_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, INPUT_IMAGE_V_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_ack_out.read()))))) {
            INPUT_IMAGE_V_user_V_0_state = ap_const_lv2_3;
        } else {
            INPUT_IMAGE_V_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_vld_out.read()))) {
            OUTPUT_IMAGE_V_data_V_1_sel_rd =  (sc_logic) (~OUTPUT_IMAGE_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_ack_in.read()))) {
            OUTPUT_IMAGE_V_data_V_1_sel_wr =  (sc_logic) (~OUTPUT_IMAGE_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_data_V_1_state.read())))) {
            OUTPUT_IMAGE_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read())))) {
            OUTPUT_IMAGE_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_ack_out.read()))))) {
            OUTPUT_IMAGE_V_data_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_IMAGE_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_vld_out.read()))) {
            OUTPUT_IMAGE_V_dest_V_1_sel_rd =  (sc_logic) (~OUTPUT_IMAGE_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_ack_in.read()))) {
            OUTPUT_IMAGE_V_dest_V_1_sel_wr =  (sc_logic) (~OUTPUT_IMAGE_V_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_dest_V_1_state.read())))) {
            OUTPUT_IMAGE_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read())))) {
            OUTPUT_IMAGE_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_ack_out.read()))))) {
            OUTPUT_IMAGE_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_IMAGE_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_vld_out.read()))) {
            OUTPUT_IMAGE_V_id_V_1_sel_rd =  (sc_logic) (~OUTPUT_IMAGE_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_ack_in.read()))) {
            OUTPUT_IMAGE_V_id_V_1_sel_wr =  (sc_logic) (~OUTPUT_IMAGE_V_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_id_V_1_state.read())))) {
            OUTPUT_IMAGE_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read())))) {
            OUTPUT_IMAGE_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_ack_out.read()))))) {
            OUTPUT_IMAGE_V_id_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_IMAGE_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_vld_out.read()))) {
            OUTPUT_IMAGE_V_keep_V_1_sel_rd =  (sc_logic) (~OUTPUT_IMAGE_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_ack_in.read()))) {
            OUTPUT_IMAGE_V_keep_V_1_sel_wr =  (sc_logic) (~OUTPUT_IMAGE_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_keep_V_1_state.read())))) {
            OUTPUT_IMAGE_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read())))) {
            OUTPUT_IMAGE_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_ack_out.read()))))) {
            OUTPUT_IMAGE_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_IMAGE_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_vld_out.read()))) {
            OUTPUT_IMAGE_V_last_V_1_sel_rd =  (sc_logic) (~OUTPUT_IMAGE_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_ack_in.read()))) {
            OUTPUT_IMAGE_V_last_V_1_sel_wr =  (sc_logic) (~OUTPUT_IMAGE_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_last_V_1_state.read())))) {
            OUTPUT_IMAGE_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read())))) {
            OUTPUT_IMAGE_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_ack_out.read()))))) {
            OUTPUT_IMAGE_V_last_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_IMAGE_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_vld_out.read()))) {
            OUTPUT_IMAGE_V_strb_V_1_sel_rd =  (sc_logic) (~OUTPUT_IMAGE_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_ack_in.read()))) {
            OUTPUT_IMAGE_V_strb_V_1_sel_wr =  (sc_logic) (~OUTPUT_IMAGE_V_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_strb_V_1_state.read())))) {
            OUTPUT_IMAGE_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read())))) {
            OUTPUT_IMAGE_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_ack_out.read()))))) {
            OUTPUT_IMAGE_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_IMAGE_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_vld_out.read()))) {
            OUTPUT_IMAGE_V_user_V_1_sel_rd =  (sc_logic) (~OUTPUT_IMAGE_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_ack_in.read()))) {
            OUTPUT_IMAGE_V_user_V_1_sel_wr =  (sc_logic) (~OUTPUT_IMAGE_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        OUTPUT_IMAGE_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_user_V_1_state.read())))) {
            OUTPUT_IMAGE_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read())))) {
            OUTPUT_IMAGE_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, OUTPUT_IMAGE_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_ack_out.read()))))) {
            OUTPUT_IMAGE_V_user_V_1_state = ap_const_lv2_3;
        } else {
            OUTPUT_IMAGE_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln52_fu_1026_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln61_fu_1032_p2.read()))) {
        colOffset_0_reg_390 = ap_const_lv3_7;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln67_fu_1179_p2.read()))) {
        colOffset_0_reg_390 = colOffset_reg_1664.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_block_state9_io.read(), ap_const_boolean_0))) {
        col_assign_reg_367 = j_reg_1536.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_495_p2.read()))) {
        col_assign_reg_367 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln30_fu_495_p2.read()))) {
        counter_0_reg_333 = counter_reg_1482.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        counter_0_reg_333 = ap_const_lv21_1FFFFF;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln31_fu_535_p2.read()))) {
        counter_1_reg_345 = add_ln34_reg_1500.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln29_fu_471_p2.read()))) {
        counter_1_reg_345 = counter_0_reg_333.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_block_state9_io.read(), ap_const_boolean_0))) {
        counter_2_reg_379 = add_ln34_1_reg_1564.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_495_p2.read()))) {
        counter_2_reg_379 = counter_1_reg_345.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln30_fu_495_p2.read()))) {
        i_0_reg_322 = i_2_reg_1477.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_322 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln29_fu_471_p2.read()))) {
        i_1_reg_460 = ap_const_lv11_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
                esl_seteq<1,1,1>(OUTPUT_IMAGE_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        i_1_reg_460 = i_reg_1720.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln66_fu_1038_p2.read()))) {
        rowOffset_0_reg_425 = ap_const_lv3_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        rowOffset_0_reg_425 = rowOffset_reg_1687.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln31_fu_535_p2.read()))) {
        row_assign_reg_356 = k_reg_1495.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln29_fu_471_p2.read()))) {
        row_assign_reg_356 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln52_fu_1026_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln61_fu_1032_p2.read()))) {
        x_dir_0_reg_401 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln67_fu_1179_p2.read()))) {
        x_dir_0_reg_401 = x_dir_1_reg_436.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln66_fu_1038_p2.read()))) {
        x_dir_1_reg_436 = x_dir_0_reg_401.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        x_dir_1_reg_436 = grp_fu_1374_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln52_fu_1026_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln61_fu_1032_p2.read()))) {
        y_dir_0_reg_413 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln67_fu_1179_p2.read()))) {
        y_dir_0_reg_413 = y_dir_1_reg_448.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln66_fu_1038_p2.read()))) {
        y_dir_1_reg_448 = y_dir_0_reg_413.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        y_dir_1_reg_448 = grp_fu_1382_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_load_A.read())) {
        INPUT_IMAGE_V_data_V_0_payload_A = INPUT_IMAGE_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_load_B.read())) {
        INPUT_IMAGE_V_data_V_0_payload_B = INPUT_IMAGE_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_load_A.read())) {
        INPUT_IMAGE_V_dest_V_0_payload_A = INPUT_IMAGE_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_load_B.read())) {
        INPUT_IMAGE_V_dest_V_0_payload_B = INPUT_IMAGE_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_load_A.read())) {
        INPUT_IMAGE_V_id_V_0_payload_A = INPUT_IMAGE_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_load_B.read())) {
        INPUT_IMAGE_V_id_V_0_payload_B = INPUT_IMAGE_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_load_A.read())) {
        INPUT_IMAGE_V_keep_V_0_payload_A = INPUT_IMAGE_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_load_B.read())) {
        INPUT_IMAGE_V_keep_V_0_payload_B = INPUT_IMAGE_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_load_A.read())) {
        INPUT_IMAGE_V_strb_V_0_payload_A = INPUT_IMAGE_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_load_B.read())) {
        INPUT_IMAGE_V_strb_V_0_payload_B = INPUT_IMAGE_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_load_A.read())) {
        INPUT_IMAGE_V_user_V_0_payload_A = INPUT_IMAGE_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_load_B.read())) {
        INPUT_IMAGE_V_user_V_0_payload_B = INPUT_IMAGE_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_load_A.read())) {
        OUTPUT_IMAGE_V_data_V_1_payload_A = OUTPUT_IMAGE_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_load_B.read())) {
        OUTPUT_IMAGE_V_data_V_1_payload_B = OUTPUT_IMAGE_V_data_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_load_A.read())) {
        OUTPUT_IMAGE_V_dest_V_1_payload_A = OUTPUT_IMAGE_V_dest_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_load_B.read())) {
        OUTPUT_IMAGE_V_dest_V_1_payload_B = OUTPUT_IMAGE_V_dest_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_load_A.read())) {
        OUTPUT_IMAGE_V_id_V_1_payload_A = OUTPUT_IMAGE_V_id_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_load_B.read())) {
        OUTPUT_IMAGE_V_id_V_1_payload_B = OUTPUT_IMAGE_V_id_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_load_A.read())) {
        OUTPUT_IMAGE_V_keep_V_1_payload_A = OUTPUT_IMAGE_V_keep_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_load_B.read())) {
        OUTPUT_IMAGE_V_keep_V_1_payload_B = OUTPUT_IMAGE_V_keep_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_load_A.read())) {
        OUTPUT_IMAGE_V_last_V_1_payload_A = OUTPUT_IMAGE_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_load_B.read())) {
        OUTPUT_IMAGE_V_last_V_1_payload_B = OUTPUT_IMAGE_V_last_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_load_A.read())) {
        OUTPUT_IMAGE_V_strb_V_1_payload_A = OUTPUT_IMAGE_V_strb_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_load_B.read())) {
        OUTPUT_IMAGE_V_strb_V_1_payload_B = OUTPUT_IMAGE_V_strb_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_load_A.read())) {
        OUTPUT_IMAGE_V_user_V_1_payload_A = OUTPUT_IMAGE_V_user_V_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_load_B.read())) {
        OUTPUT_IMAGE_V_user_V_1_payload_B = OUTPUT_IMAGE_V_user_V_1_data_in.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())))) {
        add_ln34_1_reg_1564 = add_ln34_1_fu_596_p2.read();
        and_ln52_reg_1653 = and_ln52_fu_1026_p2.read();
        select_ln41_2_reg_1617 = select_ln41_2_fu_972_p3.read();
        select_ln41_3_reg_1623 = select_ln41_3_fu_979_p3.read();
        select_ln41_5_reg_1635 = select_ln41_5_fu_993_p3.read();
        select_ln41_6_reg_1641 = select_ln41_6_fu_1000_p3.read();
        select_ln41_reg_1605 = select_ln41_fu_958_p3.read();
        tmp_dest_V_3_reg_1593 = INPUT_IMAGE_V_dest_V_0_data_out.read();
        tmp_id_V_3_reg_1587 = INPUT_IMAGE_V_id_V_0_data_out.read();
        tmp_keep_V_3_reg_1569 = INPUT_IMAGE_V_keep_V_0_data_out.read();
        tmp_strb_V_3_reg_1575 = INPUT_IMAGE_V_strb_V_0_data_out.read();
        tmp_user_V_3_reg_1581 = INPUT_IMAGE_V_user_V_0_data_out.read();
        window_val_2_1_7_reg_1599 = window_val_2_1_7_fu_951_p3.read();
        window_val_2_2_51_reg_1611 = window_val_2_2_51_fu_965_p3.read();
        window_val_2_2_52_reg_1629 = window_val_2_2_52_fu_986_p3.read();
        window_val_2_2_53_reg_1647 = window_val_2_2_53_fu_1007_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln30_fu_495_p2.read()))) {
        add_ln34_reg_1500 = add_ln34_fu_507_p2.read();
        icmp_ln274_2_reg_1510 = icmp_ln274_2_fu_523_p2.read();
        icmp_ln274_3_reg_1520 = icmp_ln274_3_fu_529_p2.read();
        icmp_ln41_1_reg_1505 = icmp_ln41_1_fu_513_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln31_fu_535_p2.read()))) {
        and_ln41_1_reg_1551 = and_ln41_1_fu_564_p2.read();
        pixelbuffer_val_1_a_reg_1541 =  (sc_lv<10>) (zext_ln729_fu_547_p1.read());
        pixelbuffer_val_2_a_reg_1546 =  (sc_lv<10>) (zext_ln729_fu_547_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln66_fu_1038_p2.read()))) {
        colOffset_reg_1664 = colOffset_fu_1048_p2.read();
        zext_ln68_1_reg_1674 = zext_ln68_1_fu_1064_p1.read();
        zext_ln68_2_reg_1669 = zext_ln68_2_fu_1054_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln29_fu_471_p2.read()))) {
        counter_reg_1482 = counter_fu_483_p2.read();
        icmp_ln41_reg_1487 = icmp_ln41_fu_489_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_2_reg_1477 = i_2_fu_477_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read())))) {
        i_reg_1720 = i_fu_1341_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln52_fu_1026_p2.read()))) {
        icmp_ln61_reg_1657 = icmp_ln61_fu_1032_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_reg_1536 = j_fu_541_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_reg_1495 = k_fu_501_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln67_fu_1179_p2.read()))) {
        rowOffset_reg_1687 = rowOffset_fu_1189_p2.read();
        tmp_1_reg_1702 = tmp_1_fu_1253_p11.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_block_state9_io.read(), ap_const_boolean_0))) {
        tmp_dest_V_fu_162 = tmp_dest_V_3_reg_1593.read();
        tmp_id_V_fu_178 = tmp_id_V_3_reg_1587.read();
        tmp_keep_V_fu_166 = tmp_keep_V_3_reg_1569.read();
        tmp_strb_V_fu_170 = tmp_strb_V_3_reg_1575.read();
        tmp_user_V_fu_174 = tmp_user_V_3_reg_1581.read();
        window_val_0_1_fu_190 = select_ln41_5_reg_1635.read();
        window_val_1_0_fu_198 = select_ln41_3_reg_1623.read();
        window_val_1_1_fu_202 = select_ln41_2_reg_1617.read();
        window_val_2_0_fu_210 = select_ln41_reg_1605.read();
        window_val_2_1_fu_214 = window_val_2_1_7_reg_1599.read();
        window_val_2_2_1_fu_182 = window_val_2_2_53_reg_1647.read();
        window_val_2_2_2_fu_186 = select_ln41_6_reg_1641.read();
        window_val_2_2_3_fu_194 = window_val_2_2_52_reg_1629.read();
        window_val_2_2_4_fu_206 = window_val_2_2_51_reg_1611.read();
    }
}

void sobel_filter::thread_Gx_address0() {
    Gx_address0 =  (sc_lv<4>) (sext_ln69_fu_1218_p1.read());
}

void sobel_filter::thread_Gx_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        Gx_ce0 = ap_const_logic_1;
    } else {
        Gx_ce0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_Gy_address0() {
    Gy_address0 =  (sc_lv<4>) (sext_ln69_fu_1218_p1.read());
}

void sobel_filter::thread_Gy_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        Gy_ce0 = ap_const_logic_1;
    } else {
        Gy_ce0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_INPUT_IMAGE_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        INPUT_IMAGE_TDATA_blk_n = INPUT_IMAGE_V_data_V_0_state.read()[0];
    } else {
        INPUT_IMAGE_TDATA_blk_n = ap_const_logic_1;
    }
}

void sobel_filter::thread_INPUT_IMAGE_TREADY() {
    INPUT_IMAGE_TREADY = INPUT_IMAGE_V_dest_V_0_state.read()[1];
}

void sobel_filter::thread_INPUT_IMAGE_V_data_V_0_ack_in() {
    INPUT_IMAGE_V_data_V_0_ack_in = INPUT_IMAGE_V_data_V_0_state.read()[1];
}

void sobel_filter::thread_INPUT_IMAGE_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())))) {
        INPUT_IMAGE_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_IMAGE_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void sobel_filter::thread_INPUT_IMAGE_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_data_V_0_sel.read())) {
        INPUT_IMAGE_V_data_V_0_data_out = INPUT_IMAGE_V_data_V_0_payload_B.read();
    } else {
        INPUT_IMAGE_V_data_V_0_data_out = INPUT_IMAGE_V_data_V_0_payload_A.read();
    }
}

void sobel_filter::thread_INPUT_IMAGE_V_data_V_0_load_A() {
    INPUT_IMAGE_V_data_V_0_load_A = (INPUT_IMAGE_V_data_V_0_state_cmp_full.read() & ~INPUT_IMAGE_V_data_V_0_sel_wr.read());
}

void sobel_filter::thread_INPUT_IMAGE_V_data_V_0_load_B() {
    INPUT_IMAGE_V_data_V_0_load_B = (INPUT_IMAGE_V_data_V_0_sel_wr.read() & INPUT_IMAGE_V_data_V_0_state_cmp_full.read());
}

void sobel_filter::thread_INPUT_IMAGE_V_data_V_0_sel() {
    INPUT_IMAGE_V_data_V_0_sel = INPUT_IMAGE_V_data_V_0_sel_rd.read();
}

void sobel_filter::thread_INPUT_IMAGE_V_data_V_0_state_cmp_full() {
    INPUT_IMAGE_V_data_V_0_state_cmp_full =  (sc_logic) ((!INPUT_IMAGE_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_IMAGE_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_INPUT_IMAGE_V_data_V_0_vld_in() {
    INPUT_IMAGE_V_data_V_0_vld_in = INPUT_IMAGE_TVALID.read();
}

void sobel_filter::thread_INPUT_IMAGE_V_data_V_0_vld_out() {
    INPUT_IMAGE_V_data_V_0_vld_out = INPUT_IMAGE_V_data_V_0_state.read()[0];
}

void sobel_filter::thread_INPUT_IMAGE_V_dest_V_0_ack_in() {
    INPUT_IMAGE_V_dest_V_0_ack_in = INPUT_IMAGE_V_dest_V_0_state.read()[1];
}

void sobel_filter::thread_INPUT_IMAGE_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())))) {
        INPUT_IMAGE_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_IMAGE_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void sobel_filter::thread_INPUT_IMAGE_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_dest_V_0_sel.read())) {
        INPUT_IMAGE_V_dest_V_0_data_out = INPUT_IMAGE_V_dest_V_0_payload_B.read();
    } else {
        INPUT_IMAGE_V_dest_V_0_data_out = INPUT_IMAGE_V_dest_V_0_payload_A.read();
    }
}

void sobel_filter::thread_INPUT_IMAGE_V_dest_V_0_load_A() {
    INPUT_IMAGE_V_dest_V_0_load_A = (INPUT_IMAGE_V_dest_V_0_state_cmp_full.read() & ~INPUT_IMAGE_V_dest_V_0_sel_wr.read());
}

void sobel_filter::thread_INPUT_IMAGE_V_dest_V_0_load_B() {
    INPUT_IMAGE_V_dest_V_0_load_B = (INPUT_IMAGE_V_dest_V_0_sel_wr.read() & INPUT_IMAGE_V_dest_V_0_state_cmp_full.read());
}

void sobel_filter::thread_INPUT_IMAGE_V_dest_V_0_sel() {
    INPUT_IMAGE_V_dest_V_0_sel = INPUT_IMAGE_V_dest_V_0_sel_rd.read();
}

void sobel_filter::thread_INPUT_IMAGE_V_dest_V_0_state_cmp_full() {
    INPUT_IMAGE_V_dest_V_0_state_cmp_full =  (sc_logic) ((!INPUT_IMAGE_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_IMAGE_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_INPUT_IMAGE_V_dest_V_0_vld_in() {
    INPUT_IMAGE_V_dest_V_0_vld_in = INPUT_IMAGE_TVALID.read();
}

void sobel_filter::thread_INPUT_IMAGE_V_dest_V_0_vld_out() {
    INPUT_IMAGE_V_dest_V_0_vld_out = INPUT_IMAGE_V_dest_V_0_state.read()[0];
}

void sobel_filter::thread_INPUT_IMAGE_V_id_V_0_ack_in() {
    INPUT_IMAGE_V_id_V_0_ack_in = INPUT_IMAGE_V_id_V_0_state.read()[1];
}

void sobel_filter::thread_INPUT_IMAGE_V_id_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())))) {
        INPUT_IMAGE_V_id_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_IMAGE_V_id_V_0_ack_out = ap_const_logic_0;
    }
}

void sobel_filter::thread_INPUT_IMAGE_V_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_id_V_0_sel.read())) {
        INPUT_IMAGE_V_id_V_0_data_out = INPUT_IMAGE_V_id_V_0_payload_B.read();
    } else {
        INPUT_IMAGE_V_id_V_0_data_out = INPUT_IMAGE_V_id_V_0_payload_A.read();
    }
}

void sobel_filter::thread_INPUT_IMAGE_V_id_V_0_load_A() {
    INPUT_IMAGE_V_id_V_0_load_A = (INPUT_IMAGE_V_id_V_0_state_cmp_full.read() & ~INPUT_IMAGE_V_id_V_0_sel_wr.read());
}

void sobel_filter::thread_INPUT_IMAGE_V_id_V_0_load_B() {
    INPUT_IMAGE_V_id_V_0_load_B = (INPUT_IMAGE_V_id_V_0_sel_wr.read() & INPUT_IMAGE_V_id_V_0_state_cmp_full.read());
}

void sobel_filter::thread_INPUT_IMAGE_V_id_V_0_sel() {
    INPUT_IMAGE_V_id_V_0_sel = INPUT_IMAGE_V_id_V_0_sel_rd.read();
}

void sobel_filter::thread_INPUT_IMAGE_V_id_V_0_state_cmp_full() {
    INPUT_IMAGE_V_id_V_0_state_cmp_full =  (sc_logic) ((!INPUT_IMAGE_V_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_IMAGE_V_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_INPUT_IMAGE_V_id_V_0_vld_in() {
    INPUT_IMAGE_V_id_V_0_vld_in = INPUT_IMAGE_TVALID.read();
}

void sobel_filter::thread_INPUT_IMAGE_V_id_V_0_vld_out() {
    INPUT_IMAGE_V_id_V_0_vld_out = INPUT_IMAGE_V_id_V_0_state.read()[0];
}

void sobel_filter::thread_INPUT_IMAGE_V_keep_V_0_ack_in() {
    INPUT_IMAGE_V_keep_V_0_ack_in = INPUT_IMAGE_V_keep_V_0_state.read()[1];
}

void sobel_filter::thread_INPUT_IMAGE_V_keep_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())))) {
        INPUT_IMAGE_V_keep_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_IMAGE_V_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void sobel_filter::thread_INPUT_IMAGE_V_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_keep_V_0_sel.read())) {
        INPUT_IMAGE_V_keep_V_0_data_out = INPUT_IMAGE_V_keep_V_0_payload_B.read();
    } else {
        INPUT_IMAGE_V_keep_V_0_data_out = INPUT_IMAGE_V_keep_V_0_payload_A.read();
    }
}

void sobel_filter::thread_INPUT_IMAGE_V_keep_V_0_load_A() {
    INPUT_IMAGE_V_keep_V_0_load_A = (INPUT_IMAGE_V_keep_V_0_state_cmp_full.read() & ~INPUT_IMAGE_V_keep_V_0_sel_wr.read());
}

void sobel_filter::thread_INPUT_IMAGE_V_keep_V_0_load_B() {
    INPUT_IMAGE_V_keep_V_0_load_B = (INPUT_IMAGE_V_keep_V_0_sel_wr.read() & INPUT_IMAGE_V_keep_V_0_state_cmp_full.read());
}

void sobel_filter::thread_INPUT_IMAGE_V_keep_V_0_sel() {
    INPUT_IMAGE_V_keep_V_0_sel = INPUT_IMAGE_V_keep_V_0_sel_rd.read();
}

void sobel_filter::thread_INPUT_IMAGE_V_keep_V_0_state_cmp_full() {
    INPUT_IMAGE_V_keep_V_0_state_cmp_full =  (sc_logic) ((!INPUT_IMAGE_V_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_IMAGE_V_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_INPUT_IMAGE_V_keep_V_0_vld_in() {
    INPUT_IMAGE_V_keep_V_0_vld_in = INPUT_IMAGE_TVALID.read();
}

void sobel_filter::thread_INPUT_IMAGE_V_keep_V_0_vld_out() {
    INPUT_IMAGE_V_keep_V_0_vld_out = INPUT_IMAGE_V_keep_V_0_state.read()[0];
}

void sobel_filter::thread_INPUT_IMAGE_V_strb_V_0_ack_in() {
    INPUT_IMAGE_V_strb_V_0_ack_in = INPUT_IMAGE_V_strb_V_0_state.read()[1];
}

void sobel_filter::thread_INPUT_IMAGE_V_strb_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())))) {
        INPUT_IMAGE_V_strb_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_IMAGE_V_strb_V_0_ack_out = ap_const_logic_0;
    }
}

void sobel_filter::thread_INPUT_IMAGE_V_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_strb_V_0_sel.read())) {
        INPUT_IMAGE_V_strb_V_0_data_out = INPUT_IMAGE_V_strb_V_0_payload_B.read();
    } else {
        INPUT_IMAGE_V_strb_V_0_data_out = INPUT_IMAGE_V_strb_V_0_payload_A.read();
    }
}

void sobel_filter::thread_INPUT_IMAGE_V_strb_V_0_load_A() {
    INPUT_IMAGE_V_strb_V_0_load_A = (INPUT_IMAGE_V_strb_V_0_state_cmp_full.read() & ~INPUT_IMAGE_V_strb_V_0_sel_wr.read());
}

void sobel_filter::thread_INPUT_IMAGE_V_strb_V_0_load_B() {
    INPUT_IMAGE_V_strb_V_0_load_B = (INPUT_IMAGE_V_strb_V_0_sel_wr.read() & INPUT_IMAGE_V_strb_V_0_state_cmp_full.read());
}

void sobel_filter::thread_INPUT_IMAGE_V_strb_V_0_sel() {
    INPUT_IMAGE_V_strb_V_0_sel = INPUT_IMAGE_V_strb_V_0_sel_rd.read();
}

void sobel_filter::thread_INPUT_IMAGE_V_strb_V_0_state_cmp_full() {
    INPUT_IMAGE_V_strb_V_0_state_cmp_full =  (sc_logic) ((!INPUT_IMAGE_V_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_IMAGE_V_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_INPUT_IMAGE_V_strb_V_0_vld_in() {
    INPUT_IMAGE_V_strb_V_0_vld_in = INPUT_IMAGE_TVALID.read();
}

void sobel_filter::thread_INPUT_IMAGE_V_strb_V_0_vld_out() {
    INPUT_IMAGE_V_strb_V_0_vld_out = INPUT_IMAGE_V_strb_V_0_state.read()[0];
}

void sobel_filter::thread_INPUT_IMAGE_V_user_V_0_ack_in() {
    INPUT_IMAGE_V_user_V_0_ack_in = INPUT_IMAGE_V_user_V_0_state.read()[1];
}

void sobel_filter::thread_INPUT_IMAGE_V_user_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())))) {
        INPUT_IMAGE_V_user_V_0_ack_out = ap_const_logic_1;
    } else {
        INPUT_IMAGE_V_user_V_0_ack_out = ap_const_logic_0;
    }
}

void sobel_filter::thread_INPUT_IMAGE_V_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, INPUT_IMAGE_V_user_V_0_sel.read())) {
        INPUT_IMAGE_V_user_V_0_data_out = INPUT_IMAGE_V_user_V_0_payload_B.read();
    } else {
        INPUT_IMAGE_V_user_V_0_data_out = INPUT_IMAGE_V_user_V_0_payload_A.read();
    }
}

void sobel_filter::thread_INPUT_IMAGE_V_user_V_0_load_A() {
    INPUT_IMAGE_V_user_V_0_load_A = (INPUT_IMAGE_V_user_V_0_state_cmp_full.read() & ~INPUT_IMAGE_V_user_V_0_sel_wr.read());
}

void sobel_filter::thread_INPUT_IMAGE_V_user_V_0_load_B() {
    INPUT_IMAGE_V_user_V_0_load_B = (INPUT_IMAGE_V_user_V_0_sel_wr.read() & INPUT_IMAGE_V_user_V_0_state_cmp_full.read());
}

void sobel_filter::thread_INPUT_IMAGE_V_user_V_0_sel() {
    INPUT_IMAGE_V_user_V_0_sel = INPUT_IMAGE_V_user_V_0_sel_rd.read();
}

void sobel_filter::thread_INPUT_IMAGE_V_user_V_0_state_cmp_full() {
    INPUT_IMAGE_V_user_V_0_state_cmp_full =  (sc_logic) ((!INPUT_IMAGE_V_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(INPUT_IMAGE_V_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_INPUT_IMAGE_V_user_V_0_vld_in() {
    INPUT_IMAGE_V_user_V_0_vld_in = INPUT_IMAGE_TVALID.read();
}

void sobel_filter::thread_INPUT_IMAGE_V_user_V_0_vld_out() {
    INPUT_IMAGE_V_user_V_0_vld_out = INPUT_IMAGE_V_user_V_0_state.read()[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_TDATA() {
    OUTPUT_IMAGE_TDATA = OUTPUT_IMAGE_V_data_V_1_data_out.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, and_ln52_reg_1653.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln61_reg_1657.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        OUTPUT_IMAGE_TDATA_blk_n = OUTPUT_IMAGE_V_data_V_1_state.read()[1];
    } else {
        OUTPUT_IMAGE_TDATA_blk_n = ap_const_logic_1;
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_TDEST() {
    OUTPUT_IMAGE_TDEST = OUTPUT_IMAGE_V_dest_V_1_data_out.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_TID() {
    OUTPUT_IMAGE_TID = OUTPUT_IMAGE_V_id_V_1_data_out.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_TKEEP() {
    OUTPUT_IMAGE_TKEEP = OUTPUT_IMAGE_V_keep_V_1_data_out.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_TLAST() {
    OUTPUT_IMAGE_TLAST = OUTPUT_IMAGE_V_last_V_1_data_out.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_TSTRB() {
    OUTPUT_IMAGE_TSTRB = OUTPUT_IMAGE_V_strb_V_1_data_out.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_TUSER() {
    OUTPUT_IMAGE_TUSER = OUTPUT_IMAGE_V_user_V_1_data_out.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_TVALID() {
    OUTPUT_IMAGE_TVALID = OUTPUT_IMAGE_V_dest_V_1_state.read()[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_data_V_1_ack_in() {
    OUTPUT_IMAGE_V_data_V_1_ack_in = OUTPUT_IMAGE_V_data_V_1_state.read()[1];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_data_V_1_ack_out() {
    OUTPUT_IMAGE_V_data_V_1_ack_out = OUTPUT_IMAGE_TREADY.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_data_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()))) {
        OUTPUT_IMAGE_V_data_V_1_data_in = tmp_data_V_fu_1170_p3.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
                 esl_seteq<1,1,1>(INPUT_IMAGE_V_data_V_0_vld_out.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
                 !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())))))) {
        OUTPUT_IMAGE_V_data_V_1_data_in = ap_const_lv8_0;
    } else {
        OUTPUT_IMAGE_V_data_V_1_data_in = "XXXXXXXX";
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_data_V_1_sel.read())) {
        OUTPUT_IMAGE_V_data_V_1_data_out = OUTPUT_IMAGE_V_data_V_1_payload_B.read();
    } else {
        OUTPUT_IMAGE_V_data_V_1_data_out = OUTPUT_IMAGE_V_data_V_1_payload_A.read();
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_data_V_1_load_A() {
    OUTPUT_IMAGE_V_data_V_1_load_A = (OUTPUT_IMAGE_V_data_V_1_state_cmp_full.read() & ~OUTPUT_IMAGE_V_data_V_1_sel_wr.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_data_V_1_load_B() {
    OUTPUT_IMAGE_V_data_V_1_load_B = (OUTPUT_IMAGE_V_data_V_1_sel_wr.read() & OUTPUT_IMAGE_V_data_V_1_state_cmp_full.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_data_V_1_sel() {
    OUTPUT_IMAGE_V_data_V_1_sel = OUTPUT_IMAGE_V_data_V_1_sel_rd.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_data_V_1_state_cmp_full() {
    OUTPUT_IMAGE_V_data_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_IMAGE_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_IMAGE_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_data_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read()))))) {
        OUTPUT_IMAGE_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_IMAGE_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_data_V_1_vld_out() {
    OUTPUT_IMAGE_V_data_V_1_vld_out = OUTPUT_IMAGE_V_data_V_1_state.read()[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_dest_V_1_ack_in() {
    OUTPUT_IMAGE_V_dest_V_1_ack_in = OUTPUT_IMAGE_V_dest_V_1_state.read()[1];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_dest_V_1_ack_out() {
    OUTPUT_IMAGE_V_dest_V_1_ack_out = OUTPUT_IMAGE_TREADY.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_dest_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read()))))) {
        OUTPUT_IMAGE_V_dest_V_1_data_in = tmp_dest_V_fu_162.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()))) {
        OUTPUT_IMAGE_V_dest_V_1_data_in = tmp_dest_V_3_reg_1593.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
                esl_seteq<1,1,1>(INPUT_IMAGE_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
        OUTPUT_IMAGE_V_dest_V_1_data_in = INPUT_IMAGE_V_dest_V_0_data_out.read();
    } else {
        OUTPUT_IMAGE_V_dest_V_1_data_in =  (sc_lv<6>) ("XXXXXX");
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_dest_V_1_sel.read())) {
        OUTPUT_IMAGE_V_dest_V_1_data_out = OUTPUT_IMAGE_V_dest_V_1_payload_B.read();
    } else {
        OUTPUT_IMAGE_V_dest_V_1_data_out = OUTPUT_IMAGE_V_dest_V_1_payload_A.read();
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_dest_V_1_load_A() {
    OUTPUT_IMAGE_V_dest_V_1_load_A = (OUTPUT_IMAGE_V_dest_V_1_state_cmp_full.read() & ~OUTPUT_IMAGE_V_dest_V_1_sel_wr.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_dest_V_1_load_B() {
    OUTPUT_IMAGE_V_dest_V_1_load_B = (OUTPUT_IMAGE_V_dest_V_1_sel_wr.read() & OUTPUT_IMAGE_V_dest_V_1_state_cmp_full.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_dest_V_1_sel() {
    OUTPUT_IMAGE_V_dest_V_1_sel = OUTPUT_IMAGE_V_dest_V_1_sel_rd.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_dest_V_1_state_cmp_full() {
    OUTPUT_IMAGE_V_dest_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_IMAGE_V_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_IMAGE_V_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_dest_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read()))))) {
        OUTPUT_IMAGE_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_IMAGE_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_dest_V_1_vld_out() {
    OUTPUT_IMAGE_V_dest_V_1_vld_out = OUTPUT_IMAGE_V_dest_V_1_state.read()[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_id_V_1_ack_in() {
    OUTPUT_IMAGE_V_id_V_1_ack_in = OUTPUT_IMAGE_V_id_V_1_state.read()[1];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_id_V_1_ack_out() {
    OUTPUT_IMAGE_V_id_V_1_ack_out = OUTPUT_IMAGE_TREADY.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_id_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read()))))) {
        OUTPUT_IMAGE_V_id_V_1_data_in = tmp_id_V_fu_178.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()))) {
        OUTPUT_IMAGE_V_id_V_1_data_in = tmp_id_V_3_reg_1587.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
                esl_seteq<1,1,1>(INPUT_IMAGE_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
        OUTPUT_IMAGE_V_id_V_1_data_in = INPUT_IMAGE_V_id_V_0_data_out.read();
    } else {
        OUTPUT_IMAGE_V_id_V_1_data_in =  (sc_lv<5>) ("XXXXX");
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_id_V_1_sel.read())) {
        OUTPUT_IMAGE_V_id_V_1_data_out = OUTPUT_IMAGE_V_id_V_1_payload_B.read();
    } else {
        OUTPUT_IMAGE_V_id_V_1_data_out = OUTPUT_IMAGE_V_id_V_1_payload_A.read();
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_id_V_1_load_A() {
    OUTPUT_IMAGE_V_id_V_1_load_A = (OUTPUT_IMAGE_V_id_V_1_state_cmp_full.read() & ~OUTPUT_IMAGE_V_id_V_1_sel_wr.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_id_V_1_load_B() {
    OUTPUT_IMAGE_V_id_V_1_load_B = (OUTPUT_IMAGE_V_id_V_1_sel_wr.read() & OUTPUT_IMAGE_V_id_V_1_state_cmp_full.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_id_V_1_sel() {
    OUTPUT_IMAGE_V_id_V_1_sel = OUTPUT_IMAGE_V_id_V_1_sel_rd.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_id_V_1_state_cmp_full() {
    OUTPUT_IMAGE_V_id_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_IMAGE_V_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_IMAGE_V_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_id_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read()))))) {
        OUTPUT_IMAGE_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_IMAGE_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_id_V_1_vld_out() {
    OUTPUT_IMAGE_V_id_V_1_vld_out = OUTPUT_IMAGE_V_id_V_1_state.read()[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_keep_V_1_ack_in() {
    OUTPUT_IMAGE_V_keep_V_1_ack_in = OUTPUT_IMAGE_V_keep_V_1_state.read()[1];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_keep_V_1_ack_out() {
    OUTPUT_IMAGE_V_keep_V_1_ack_out = OUTPUT_IMAGE_TREADY.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_keep_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read()))))) {
        OUTPUT_IMAGE_V_keep_V_1_data_in = tmp_keep_V_fu_166.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()))) {
        OUTPUT_IMAGE_V_keep_V_1_data_in = tmp_keep_V_3_reg_1569.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
                esl_seteq<1,1,1>(INPUT_IMAGE_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
        OUTPUT_IMAGE_V_keep_V_1_data_in = INPUT_IMAGE_V_keep_V_0_data_out.read();
    } else {
        OUTPUT_IMAGE_V_keep_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_keep_V_1_sel.read())) {
        OUTPUT_IMAGE_V_keep_V_1_data_out = OUTPUT_IMAGE_V_keep_V_1_payload_B.read();
    } else {
        OUTPUT_IMAGE_V_keep_V_1_data_out = OUTPUT_IMAGE_V_keep_V_1_payload_A.read();
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_keep_V_1_load_A() {
    OUTPUT_IMAGE_V_keep_V_1_load_A = (OUTPUT_IMAGE_V_keep_V_1_state_cmp_full.read() & ~OUTPUT_IMAGE_V_keep_V_1_sel_wr.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_keep_V_1_load_B() {
    OUTPUT_IMAGE_V_keep_V_1_load_B = (OUTPUT_IMAGE_V_keep_V_1_sel_wr.read() & OUTPUT_IMAGE_V_keep_V_1_state_cmp_full.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_keep_V_1_sel() {
    OUTPUT_IMAGE_V_keep_V_1_sel = OUTPUT_IMAGE_V_keep_V_1_sel_rd.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_keep_V_1_state_cmp_full() {
    OUTPUT_IMAGE_V_keep_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_IMAGE_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_IMAGE_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_keep_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read()))))) {
        OUTPUT_IMAGE_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_IMAGE_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_keep_V_1_vld_out() {
    OUTPUT_IMAGE_V_keep_V_1_vld_out = OUTPUT_IMAGE_V_keep_V_1_state.read()[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_last_V_1_ack_in() {
    OUTPUT_IMAGE_V_last_V_1_ack_in = OUTPUT_IMAGE_V_last_V_1_state.read()[1];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_last_V_1_ack_out() {
    OUTPUT_IMAGE_V_last_V_1_ack_out = OUTPUT_IMAGE_TREADY.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_last_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read()))))) {
        OUTPUT_IMAGE_V_last_V_1_data_in = tmp_last_V_fu_1367_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
                 esl_seteq<1,1,1>(INPUT_IMAGE_V_data_V_0_vld_out.read(), ap_const_logic_1)))) {
        OUTPUT_IMAGE_V_last_V_1_data_in = ap_const_lv1_0;
    } else {
        OUTPUT_IMAGE_V_last_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_last_V_1_sel.read())) {
        OUTPUT_IMAGE_V_last_V_1_data_out = OUTPUT_IMAGE_V_last_V_1_payload_B.read();
    } else {
        OUTPUT_IMAGE_V_last_V_1_data_out = OUTPUT_IMAGE_V_last_V_1_payload_A.read();
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_last_V_1_load_A() {
    OUTPUT_IMAGE_V_last_V_1_load_A = (OUTPUT_IMAGE_V_last_V_1_state_cmp_full.read() & ~OUTPUT_IMAGE_V_last_V_1_sel_wr.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_last_V_1_load_B() {
    OUTPUT_IMAGE_V_last_V_1_load_B = (OUTPUT_IMAGE_V_last_V_1_sel_wr.read() & OUTPUT_IMAGE_V_last_V_1_state_cmp_full.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_last_V_1_sel() {
    OUTPUT_IMAGE_V_last_V_1_sel = OUTPUT_IMAGE_V_last_V_1_sel_rd.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_last_V_1_state_cmp_full() {
    OUTPUT_IMAGE_V_last_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_IMAGE_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_IMAGE_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_last_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read()))))) {
        OUTPUT_IMAGE_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_IMAGE_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_last_V_1_vld_out() {
    OUTPUT_IMAGE_V_last_V_1_vld_out = OUTPUT_IMAGE_V_last_V_1_state.read()[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_strb_V_1_ack_in() {
    OUTPUT_IMAGE_V_strb_V_1_ack_in = OUTPUT_IMAGE_V_strb_V_1_state.read()[1];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_strb_V_1_ack_out() {
    OUTPUT_IMAGE_V_strb_V_1_ack_out = OUTPUT_IMAGE_TREADY.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_strb_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read()))))) {
        OUTPUT_IMAGE_V_strb_V_1_data_in = tmp_strb_V_fu_170.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()))) {
        OUTPUT_IMAGE_V_strb_V_1_data_in = tmp_strb_V_3_reg_1575.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
                esl_seteq<1,1,1>(INPUT_IMAGE_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
        OUTPUT_IMAGE_V_strb_V_1_data_in = INPUT_IMAGE_V_strb_V_0_data_out.read();
    } else {
        OUTPUT_IMAGE_V_strb_V_1_data_in =  (sc_lv<1>) ("X");
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_strb_V_1_sel.read())) {
        OUTPUT_IMAGE_V_strb_V_1_data_out = OUTPUT_IMAGE_V_strb_V_1_payload_B.read();
    } else {
        OUTPUT_IMAGE_V_strb_V_1_data_out = OUTPUT_IMAGE_V_strb_V_1_payload_A.read();
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_strb_V_1_load_A() {
    OUTPUT_IMAGE_V_strb_V_1_load_A = (OUTPUT_IMAGE_V_strb_V_1_state_cmp_full.read() & ~OUTPUT_IMAGE_V_strb_V_1_sel_wr.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_strb_V_1_load_B() {
    OUTPUT_IMAGE_V_strb_V_1_load_B = (OUTPUT_IMAGE_V_strb_V_1_sel_wr.read() & OUTPUT_IMAGE_V_strb_V_1_state_cmp_full.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_strb_V_1_sel() {
    OUTPUT_IMAGE_V_strb_V_1_sel = OUTPUT_IMAGE_V_strb_V_1_sel_rd.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_strb_V_1_state_cmp_full() {
    OUTPUT_IMAGE_V_strb_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_IMAGE_V_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_IMAGE_V_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_strb_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read()))))) {
        OUTPUT_IMAGE_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_IMAGE_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_strb_V_1_vld_out() {
    OUTPUT_IMAGE_V_strb_V_1_vld_out = OUTPUT_IMAGE_V_strb_V_1_state.read()[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_user_V_1_ack_in() {
    OUTPUT_IMAGE_V_user_V_1_ack_in = OUTPUT_IMAGE_V_user_V_1_state.read()[1];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_user_V_1_ack_out() {
    OUTPUT_IMAGE_V_user_V_1_ack_out = OUTPUT_IMAGE_TREADY.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_user_V_1_data_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read()))))) {
        OUTPUT_IMAGE_V_user_V_1_data_in = tmp_user_V_fu_174.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()))) {
        OUTPUT_IMAGE_V_user_V_1_data_in = tmp_user_V_3_reg_1581.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
                esl_seteq<1,1,1>(INPUT_IMAGE_V_data_V_0_vld_out.read(), ap_const_logic_1))) {
        OUTPUT_IMAGE_V_user_V_1_data_in = INPUT_IMAGE_V_user_V_0_data_out.read();
    } else {
        OUTPUT_IMAGE_V_user_V_1_data_in =  (sc_lv<2>) ("XX");
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, OUTPUT_IMAGE_V_user_V_1_sel.read())) {
        OUTPUT_IMAGE_V_user_V_1_data_out = OUTPUT_IMAGE_V_user_V_1_payload_B.read();
    } else {
        OUTPUT_IMAGE_V_user_V_1_data_out = OUTPUT_IMAGE_V_user_V_1_payload_A.read();
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_user_V_1_load_A() {
    OUTPUT_IMAGE_V_user_V_1_load_A = (OUTPUT_IMAGE_V_user_V_1_state_cmp_full.read() & ~OUTPUT_IMAGE_V_user_V_1_sel_wr.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_user_V_1_load_B() {
    OUTPUT_IMAGE_V_user_V_1_load_B = (OUTPUT_IMAGE_V_user_V_1_sel_wr.read() & OUTPUT_IMAGE_V_user_V_1_state_cmp_full.read());
}

void sobel_filter::thread_OUTPUT_IMAGE_V_user_V_1_sel() {
    OUTPUT_IMAGE_V_user_V_1_sel = OUTPUT_IMAGE_V_user_V_1_sel_rd.read();
}

void sobel_filter::thread_OUTPUT_IMAGE_V_user_V_1_state_cmp_full() {
    OUTPUT_IMAGE_V_user_V_1_state_cmp_full =  (sc_logic) ((!OUTPUT_IMAGE_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(OUTPUT_IMAGE_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void sobel_filter::thread_OUTPUT_IMAGE_V_user_V_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read()))))) {
        OUTPUT_IMAGE_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        OUTPUT_IMAGE_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void sobel_filter::thread_OUTPUT_IMAGE_V_user_V_1_vld_out() {
    OUTPUT_IMAGE_V_user_V_1_vld_out = OUTPUT_IMAGE_V_user_V_1_state.read()[0];
}

void sobel_filter::thread_abs200_fu_1100_p3() {
    abs200_fu_1100_p3 = (!abscond199_fu_1094_p2.read()[0].is_01())? sc_lv<32>(): ((abscond199_fu_1094_p2.read()[0].to_bool())? y_dir_0_reg_413.read(): neg198_fu_1088_p2.read());
}

void sobel_filter::thread_abs_fu_1080_p3() {
    abs_fu_1080_p3 = (!abscond_fu_1074_p2.read()[0].is_01())? sc_lv<32>(): ((abscond_fu_1074_p2.read()[0].to_bool())? x_dir_0_reg_401.read(): neg_fu_1068_p2.read());
}

void sobel_filter::thread_abscond199_fu_1094_p2() {
    abscond199_fu_1094_p2 = (!y_dir_0_reg_413.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): (sc_bigint<32>(y_dir_0_reg_413.read()) > sc_bigint<32>(ap_const_lv32_0));
}

void sobel_filter::thread_abscond_fu_1074_p2() {
    abscond_fu_1074_p2 = (!x_dir_0_reg_401.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): (sc_bigint<32>(x_dir_0_reg_401.read()) > sc_bigint<32>(ap_const_lv32_0));
}

void sobel_filter::thread_add_ln34_1_fu_596_p2() {
    add_ln34_1_fu_596_p2 = (!ap_const_lv21_1.is_01() || !counter_2_reg_379.read().is_01())? sc_lv<21>(): (sc_biguint<21>(ap_const_lv21_1) + sc_biguint<21>(counter_2_reg_379.read()));
}

void sobel_filter::thread_add_ln34_fu_507_p2() {
    add_ln34_fu_507_p2 = (!ap_const_lv21_400.is_01() || !counter_1_reg_345.read().is_01())? sc_lv<21>(): (sc_biguint<21>(ap_const_lv21_400) + sc_biguint<21>(counter_1_reg_345.read()));
}

void sobel_filter::thread_add_ln493_fu_1224_p2() {
    add_ln493_fu_1224_p2 = (!ap_const_lv2_1.is_01() || !trunc_ln68_1_fu_1185_p1.read().is_01())? sc_lv<2>(): (sc_biguint<2>(ap_const_lv2_1) + sc_biguint<2>(trunc_ln68_1_fu_1185_p1.read()));
}

void sobel_filter::thread_add_ln68_2_fu_1058_p2() {
    add_ln68_2_fu_1058_p2 = (!ap_const_lv2_1.is_01() || !trunc_ln68_fu_1044_p1.read().is_01())? sc_lv<2>(): (sc_biguint<2>(ap_const_lv2_1) + sc_biguint<2>(trunc_ln68_fu_1044_p1.read()));
}

void sobel_filter::thread_add_ln69_fu_1213_p2() {
    add_ln69_fu_1213_p2 = (!zext_ln68_2_reg_1669.read().is_01() || !sub_ln69_fu_1207_p2.read().is_01())? sc_lv<5>(): (sc_biguint<5>(zext_ln68_2_reg_1669.read()) + sc_biguint<5>(sub_ln69_fu_1207_p2.read()));
}

void sobel_filter::thread_and_ln41_1_fu_564_p2() {
    and_ln41_1_fu_564_p2 = (and_ln41_fu_559_p2.read() & icmp_ln41_reg_1487.read());
}

void sobel_filter::thread_and_ln41_fu_559_p2() {
    and_ln41_fu_559_p2 = (icmp_ln41_1_reg_1505.read() & icmp_ln41_2_fu_553_p2.read());
}

void sobel_filter::thread_and_ln52_fu_1026_p2() {
    and_ln52_fu_1026_p2 = (icmp_ln52_fu_1014_p2.read() & icmp_ln52_1_fu_1020_p2.read());
}

void sobel_filter::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sobel_filter::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void sobel_filter::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void sobel_filter::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void sobel_filter::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sobel_filter::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sobel_filter::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sobel_filter::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sobel_filter::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sobel_filter::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sobel_filter::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sobel_filter::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void sobel_filter::thread_ap_block_state11() {
    ap_block_state11 = (esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())));
}

void sobel_filter::thread_ap_block_state11_io() {
    ap_block_state11_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_data_V_1_ack_in.read()));
}

void sobel_filter::thread_ap_block_state5_io() {
    ap_block_state5_io = (esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_data_V_1_ack_in.read()));
}

void sobel_filter::thread_ap_block_state6_io() {
    ap_block_state6_io = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_data_V_1_ack_in.read()));
}

void sobel_filter::thread_ap_block_state9_io() {
    ap_block_state9_io = (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_V_data_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op236_write_state9.read()));
}

void sobel_filter::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln101_fu_1335_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_predicate_op236_write_state9() {
    ap_predicate_op236_write_state9 = (esl_seteq<1,1,1>(ap_const_lv1_0, and_ln52_reg_1653.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln61_reg_1657.read()));
}

void sobel_filter::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln101_fu_1335_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sobel_filter::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sobel_filter::thread_colOffset_fu_1048_p2() {
    colOffset_fu_1048_p2 = (!ap_const_lv3_1.is_01() || !colOffset_0_reg_390.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ap_const_lv3_1) + sc_biguint<3>(colOffset_0_reg_390.read()));
}

void sobel_filter::thread_counter_fu_483_p2() {
    counter_fu_483_p2 = (!counter_0_reg_333.read().is_01() || !ap_const_lv21_20000.is_01())? sc_lv<21>(): (sc_biguint<21>(counter_0_reg_333.read()) + sc_biguint<21>(ap_const_lv21_20000));
}

void sobel_filter::thread_empty_12_fu_1146_p1() {
    empty_12_fu_1146_p1 = result_fu_1108_p2.read().range(8-1, 0);
}

void sobel_filter::thread_grp_fu_1374_p1() {
    grp_fu_1374_p1 =  (sc_lv<8>) (zext_ln69_1_fu_1268_p1.read());
}

void sobel_filter::thread_grp_fu_1382_p1() {
    grp_fu_1382_p1 =  (sc_lv<8>) (zext_ln69_1_fu_1268_p1.read());
}

void sobel_filter::thread_i_2_fu_477_p2() {
    i_2_fu_477_p2 = (!i_0_reg_322.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_322.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void sobel_filter::thread_i_fu_1341_p2() {
    i_fu_1341_p2 = (!i_1_reg_460.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_1_reg_460.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void sobel_filter::thread_icmp_ln101_fu_1335_p2() {
    icmp_ln101_fu_1335_p2 = (!i_1_reg_460.read().is_01() || !ap_const_lv11_401.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_460.read() == ap_const_lv11_401);
}

void sobel_filter::thread_icmp_ln274_1_fu_728_p2() {
    icmp_ln274_1_fu_728_p2 = (!trunc_ln274_1_fu_632_p1.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln274_1_fu_632_p1.read() == ap_const_lv2_0);
}

void sobel_filter::thread_icmp_ln274_2_fu_523_p2() {
    icmp_ln274_2_fu_523_p2 = (!trunc_ln274_fu_519_p1.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln274_fu_519_p1.read() == ap_const_lv2_1);
}

void sobel_filter::thread_icmp_ln274_3_fu_529_p2() {
    icmp_ln274_3_fu_529_p2 = (!trunc_ln274_fu_519_p1.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln274_fu_519_p1.read() == ap_const_lv2_0);
}

void sobel_filter::thread_icmp_ln274_fu_714_p2() {
    icmp_ln274_fu_714_p2 = (!trunc_ln274_1_fu_632_p1.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln274_1_fu_632_p1.read() == ap_const_lv2_1);
}

void sobel_filter::thread_icmp_ln29_fu_471_p2() {
    icmp_ln29_fu_471_p2 = (!i_0_reg_322.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_322.read() == ap_const_lv4_8);
}

void sobel_filter::thread_icmp_ln30_fu_495_p2() {
    icmp_ln30_fu_495_p2 = (!row_assign_reg_356.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(row_assign_reg_356.read() == ap_const_lv8_80);
}

void sobel_filter::thread_icmp_ln31_fu_535_p2() {
    icmp_ln31_fu_535_p2 = (!col_assign_reg_367.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(col_assign_reg_367.read() == ap_const_lv11_400);
}

void sobel_filter::thread_icmp_ln41_1_fu_513_p2() {
    icmp_ln41_1_fu_513_p2 = (!row_assign_reg_356.read().is_01() || !ap_const_lv8_3.is_01())? sc_lv<1>(): (sc_biguint<8>(row_assign_reg_356.read()) < sc_biguint<8>(ap_const_lv8_3));
}

void sobel_filter::thread_icmp_ln41_2_fu_553_p2() {
    icmp_ln41_2_fu_553_p2 = (!col_assign_reg_367.read().is_01() || !ap_const_lv11_3.is_01())? sc_lv<1>(): (sc_biguint<11>(col_assign_reg_367.read()) < sc_biguint<11>(ap_const_lv11_3));
}

void sobel_filter::thread_icmp_ln41_fu_489_p2() {
    icmp_ln41_fu_489_p2 = (!i_0_reg_322.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_322.read() == ap_const_lv4_0);
}

void sobel_filter::thread_icmp_ln43_fu_636_p2() {
    icmp_ln43_fu_636_p2 = (!add_ln34_1_fu_596_p2.read().is_01() || !ap_const_lv21_800.is_01())? sc_lv<1>(): (sc_bigint<21>(add_ln34_1_fu_596_p2.read()) > sc_bigint<21>(ap_const_lv21_800));
}

void sobel_filter::thread_icmp_ln52_1_fu_1020_p2() {
    icmp_ln52_1_fu_1020_p2 = (!add_ln34_1_fu_596_p2.read().is_01() || !ap_const_lv21_802.is_01())? sc_lv<1>(): (sc_bigint<21>(add_ln34_1_fu_596_p2.read()) < sc_bigint<21>(ap_const_lv21_802));
}

void sobel_filter::thread_icmp_ln52_fu_1014_p2() {
    icmp_ln52_fu_1014_p2 = (!add_ln34_1_fu_596_p2.read().is_01() || !ap_const_lv21_400.is_01())? sc_lv<1>(): (sc_bigint<21>(add_ln34_1_fu_596_p2.read()) > sc_bigint<21>(ap_const_lv21_400));
}

void sobel_filter::thread_icmp_ln61_fu_1032_p2() {
    icmp_ln61_fu_1032_p2 = (!add_ln34_1_fu_596_p2.read().is_01() || !ap_const_lv21_801.is_01())? sc_lv<1>(): (sc_bigint<21>(add_ln34_1_fu_596_p2.read()) > sc_bigint<21>(ap_const_lv21_801));
}

void sobel_filter::thread_icmp_ln66_fu_1038_p2() {
    icmp_ln66_fu_1038_p2 = (!colOffset_0_reg_390.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<1>(): sc_lv<1>(colOffset_0_reg_390.read() == ap_const_lv3_2);
}

void sobel_filter::thread_icmp_ln67_fu_1179_p2() {
    icmp_ln67_fu_1179_p2 = (!rowOffset_0_reg_425.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<1>(): sc_lv<1>(rowOffset_0_reg_425.read() == ap_const_lv3_2);
}

void sobel_filter::thread_icmp_ln80_fu_1124_p2() {
    icmp_ln80_fu_1124_p2 = (!tmp_2_fu_1114_p4.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_fu_1114_p4.read() == ap_const_lv10_0);
}

void sobel_filter::thread_icmp_ln82_fu_1140_p2() {
    icmp_ln82_fu_1140_p2 = (!tmp_4_fu_1130_p4.read().is_01() || !ap_const_lv24_0.is_01())? sc_lv<1>(): (sc_bigint<24>(tmp_4_fu_1130_p4.read()) > sc_bigint<24>(ap_const_lv24_0));
}

void sobel_filter::thread_j_fu_541_p2() {
    j_fu_541_p2 = (!col_assign_reg_367.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(col_assign_reg_367.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void sobel_filter::thread_k_fu_501_p2() {
    k_fu_501_p2 = (!row_assign_reg_356.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(row_assign_reg_356.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void sobel_filter::thread_neg198_fu_1088_p2() {
    neg198_fu_1088_p2 = (!ap_const_lv32_0.is_01() || !y_dir_0_reg_413.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(y_dir_0_reg_413.read()));
}

void sobel_filter::thread_neg_fu_1068_p2() {
    neg_fu_1068_p2 = (!ap_const_lv32_0.is_01() || !x_dir_0_reg_401.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(x_dir_0_reg_401.read()));
}

void sobel_filter::thread_or_ln80_fu_1164_p2() {
    or_ln80_fu_1164_p2 = (icmp_ln80_fu_1124_p2.read() | icmp_ln82_fu_1140_p2.read());
}

void sobel_filter::thread_pixelbuffer_val_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        pixelbuffer_val_1_address0 = pixelbuffer_val_1_a_reg_1541.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pixelbuffer_val_1_address0 =  (sc_lv<10>) (zext_ln729_fu_547_p1.read());
    } else {
        pixelbuffer_val_1_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void sobel_filter::thread_pixelbuffer_val_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read()))))) {
        pixelbuffer_val_1_ce0 = ap_const_logic_1;
    } else {
        pixelbuffer_val_1_ce0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_pixelbuffer_val_1_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())))) {
        pixelbuffer_val_1_we0 = ap_const_logic_1;
    } else {
        pixelbuffer_val_1_we0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_pixelbuffer_val_2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        pixelbuffer_val_2_address0 = pixelbuffer_val_2_a_reg_1546.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        pixelbuffer_val_2_address0 =  (sc_lv<10>) (zext_ln729_fu_547_p1.read());
    } else {
        pixelbuffer_val_2_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void sobel_filter::thread_pixelbuffer_val_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read()))))) {
        pixelbuffer_val_2_ce0 = ap_const_logic_1;
    } else {
        pixelbuffer_val_2_ce0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_pixelbuffer_val_2_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())))) {
        pixelbuffer_val_2_we0 = ap_const_logic_1;
    } else {
        pixelbuffer_val_2_we0 = ap_const_logic_0;
    }
}

void sobel_filter::thread_result_fu_1108_p2() {
    result_fu_1108_p2 = (!abs_fu_1080_p3.read().is_01() || !abs200_fu_1100_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(abs_fu_1080_p3.read()) - sc_biguint<32>(abs200_fu_1100_p3.read()));
}

void sobel_filter::thread_rowOffset_fu_1189_p2() {
    rowOffset_fu_1189_p2 = (!ap_const_lv3_1.is_01() || !rowOffset_0_reg_425.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ap_const_lv3_1) + sc_biguint<3>(rowOffset_0_reg_425.read()));
}

void sobel_filter::thread_select_ln41_2_fu_972_p3() {
    select_ln41_2_fu_972_p3 = (!and_ln41_1_reg_1551.read()[0].is_01())? sc_lv<8>(): ((and_ln41_1_reg_1551.read()[0].to_bool())? window_val_1_1_5_fu_895_p3.read(): window_val_1_2_1_fu_666_p3.read());
}

void sobel_filter::thread_select_ln41_3_fu_979_p3() {
    select_ln41_3_fu_979_p3 = (!and_ln41_1_reg_1551.read()[0].is_01())? sc_lv<8>(): ((and_ln41_1_reg_1551.read()[0].to_bool())? window_val_2_2_46_fu_909_p3.read(): window_val_1_0_1_fu_674_p3.read());
}

void sobel_filter::thread_select_ln41_5_fu_993_p3() {
    select_ln41_5_fu_993_p3 = (!and_ln41_1_reg_1551.read()[0].is_01())? sc_lv<8>(): ((and_ln41_1_reg_1551.read()[0].to_bool())? window_val_0_1_4_fu_930_p3.read(): window_val_0_2_1_fu_690_p3.read());
}

void sobel_filter::thread_select_ln41_6_fu_1000_p3() {
    select_ln41_6_fu_1000_p3 = (!and_ln41_1_reg_1551.read()[0].is_01())? sc_lv<8>(): ((and_ln41_1_reg_1551.read()[0].to_bool())? window_val_2_2_49_fu_937_p3.read(): window_val_0_0_fu_698_p3.read());
}

void sobel_filter::thread_select_ln41_fu_958_p3() {
    select_ln41_fu_958_p3 = (!and_ln41_1_reg_1551.read()[0].is_01())? sc_lv<8>(): ((and_ln41_1_reg_1551.read()[0].to_bool())? window_val_2_2_42_fu_867_p3.read(): window_val_2_0_1_fu_650_p3.read());
}

void sobel_filter::thread_select_ln80_fu_1156_p3() {
    select_ln80_fu_1156_p3 = (!xor_ln80_fu_1150_p2.read()[0].is_01())? sc_lv<8>(): ((xor_ln80_fu_1150_p2.read()[0].to_bool())? ap_const_lv8_FF: ap_const_lv8_0);
}

void sobel_filter::thread_sext_ln69_fu_1218_p1() {
    sext_ln69_fu_1218_p1 = esl_sext<64,5>(add_ln69_fu_1213_p2.read());
}

void sobel_filter::thread_shl_ln_fu_1234_p3() {
    shl_ln_fu_1234_p3 = esl_concat<2,2>(add_ln493_fu_1224_p2.read(), ap_const_lv2_0);
}

void sobel_filter::thread_sub_ln68_fu_1242_p2() {
    sub_ln68_fu_1242_p2 = (!shl_ln_fu_1234_p3.read().is_01() || !zext_ln68_fu_1230_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(shl_ln_fu_1234_p3.read()) - sc_biguint<4>(zext_ln68_fu_1230_p1.read()));
}

void sobel_filter::thread_sub_ln69_fu_1207_p2() {
    sub_ln69_fu_1207_p2 = (!tmp_3_fu_1199_p3.read().is_01() || !zext_ln69_fu_1195_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_3_fu_1199_p3.read()) - sc_biguint<5>(zext_ln69_fu_1195_p1.read()));
}

void sobel_filter::thread_tmp_1_fu_1253_p10() {
    tmp_1_fu_1253_p10 = (!sub_ln68_fu_1242_p2.read().is_01() || !zext_ln68_1_reg_1674.read().is_01())? sc_lv<4>(): (sc_biguint<4>(sub_ln68_fu_1242_p2.read()) + sc_biguint<4>(zext_ln68_1_reg_1674.read()));
}

void sobel_filter::thread_tmp_2_fu_1114_p4() {
    tmp_2_fu_1114_p4 = col_assign_reg_367.read().range(10, 1);
}

void sobel_filter::thread_tmp_3_fu_1199_p3() {
    tmp_3_fu_1199_p3 = esl_concat<3,2>(rowOffset_fu_1189_p2.read(), ap_const_lv2_0);
}

void sobel_filter::thread_tmp_4_fu_1130_p4() {
    tmp_4_fu_1130_p4 = result_fu_1108_p2.read().range(31, 8);
}

void sobel_filter::thread_tmp_data_V_fu_1170_p3() {
    tmp_data_V_fu_1170_p3 = (!or_ln80_fu_1164_p2.read()[0].is_01())? sc_lv<8>(): ((or_ln80_fu_1164_p2.read()[0].to_bool())? select_ln80_fu_1156_p3.read(): empty_12_fu_1146_p1.read());
}

void sobel_filter::thread_tmp_last_V_fu_1367_p2() {
    tmp_last_V_fu_1367_p2 = (!i_1_reg_460.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_460.read() == ap_const_lv11_400);
}

void sobel_filter::thread_trunc_ln274_1_fu_632_p1() {
    trunc_ln274_1_fu_632_p1 = col_assign_reg_367.read().range(2-1, 0);
}

void sobel_filter::thread_trunc_ln274_fu_519_p1() {
    trunc_ln274_fu_519_p1 = row_assign_reg_356.read().range(2-1, 0);
}

void sobel_filter::thread_trunc_ln68_1_fu_1185_p1() {
    trunc_ln68_1_fu_1185_p1 = rowOffset_0_reg_425.read().range(2-1, 0);
}

void sobel_filter::thread_trunc_ln68_fu_1044_p1() {
    trunc_ln68_fu_1044_p1 = colOffset_0_reg_390.read().range(2-1, 0);
}

void sobel_filter::thread_window_val_0_0_fu_698_p3() {
    window_val_0_0_fu_698_p3 = (!icmp_ln43_fu_636_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln43_fu_636_p2.read()[0].to_bool())? window_val_0_1_fu_190.read(): window_val_2_2_2_fu_186.read());
}

void sobel_filter::thread_window_val_0_1_2_fu_766_p3() {
    window_val_0_1_2_fu_766_p3 = (!icmp_ln274_fu_714_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_fu_714_p2.read()[0].to_bool())? window_val_0_1_fu_190.read(): INPUT_IMAGE_V_data_V_0_data_out.read());
}

void sobel_filter::thread_window_val_0_1_3_fu_774_p3() {
    window_val_0_1_3_fu_774_p3 = (!icmp_ln274_1_fu_728_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_1_fu_728_p2.read()[0].to_bool())? window_val_0_1_fu_190.read(): window_val_0_1_2_fu_766_p3.read());
}

void sobel_filter::thread_window_val_0_1_4_fu_930_p3() {
    window_val_0_1_4_fu_930_p3 = (!icmp_ln274_3_reg_1520.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_3_reg_1520.read()[0].to_bool())? window_val_0_1_3_fu_774_p3.read(): window_val_0_1_fu_190.read());
}

void sobel_filter::thread_window_val_0_2_1_fu_690_p3() {
    window_val_0_2_1_fu_690_p3 = (!icmp_ln43_fu_636_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln43_fu_636_p2.read()[0].to_bool())? pixelbuffer_val_1_q0.read(): window_val_0_1_fu_190.read());
}

void sobel_filter::thread_window_val_1_0_1_fu_674_p3() {
    window_val_1_0_1_fu_674_p3 = (!icmp_ln43_fu_636_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln43_fu_636_p2.read()[0].to_bool())? window_val_1_1_fu_202.read(): window_val_1_0_fu_198.read());
}

void sobel_filter::thread_window_val_1_1_2_fu_806_p3() {
    window_val_1_1_2_fu_806_p3 = (!icmp_ln274_fu_714_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_fu_714_p2.read()[0].to_bool())? window_val_1_1_fu_202.read(): INPUT_IMAGE_V_data_V_0_data_out.read());
}

void sobel_filter::thread_window_val_1_1_3_fu_814_p3() {
    window_val_1_1_3_fu_814_p3 = (!icmp_ln274_1_fu_728_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_1_fu_728_p2.read()[0].to_bool())? window_val_1_1_fu_202.read(): window_val_1_1_2_fu_806_p3.read());
}

void sobel_filter::thread_window_val_1_1_4_fu_888_p3() {
    window_val_1_1_4_fu_888_p3 = (!icmp_ln274_2_reg_1510.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_2_reg_1510.read()[0].to_bool())? window_val_1_1_3_fu_814_p3.read(): window_val_1_1_fu_202.read());
}

void sobel_filter::thread_window_val_1_1_5_fu_895_p3() {
    window_val_1_1_5_fu_895_p3 = (!icmp_ln274_3_reg_1520.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_3_reg_1520.read()[0].to_bool())? window_val_1_1_fu_202.read(): window_val_1_1_4_fu_888_p3.read());
}

void sobel_filter::thread_window_val_1_2_1_fu_666_p3() {
    window_val_1_2_1_fu_666_p3 = (!icmp_ln43_fu_636_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln43_fu_636_p2.read()[0].to_bool())? pixelbuffer_val_2_q0.read(): window_val_1_1_fu_202.read());
}

void sobel_filter::thread_window_val_2_0_1_fu_650_p3() {
    window_val_2_0_1_fu_650_p3 = (!icmp_ln43_fu_636_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln43_fu_636_p2.read()[0].to_bool())? window_val_2_1_fu_214.read(): window_val_2_0_fu_210.read());
}

void sobel_filter::thread_window_val_2_1_1_fu_642_p3() {
    window_val_2_1_1_fu_642_p3 = (!icmp_ln43_fu_636_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln43_fu_636_p2.read()[0].to_bool())? INPUT_IMAGE_V_data_V_0_data_out.read(): window_val_2_1_fu_214.read());
}

void sobel_filter::thread_window_val_2_1_3_fu_720_p3() {
    window_val_2_1_3_fu_720_p3 = (!icmp_ln274_fu_714_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_fu_714_p2.read()[0].to_bool())? window_val_2_1_fu_214.read(): INPUT_IMAGE_V_data_V_0_data_out.read());
}

void sobel_filter::thread_window_val_2_1_4_fu_734_p3() {
    window_val_2_1_4_fu_734_p3 = (!icmp_ln274_1_fu_728_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_1_fu_728_p2.read()[0].to_bool())? window_val_2_1_fu_214.read(): window_val_2_1_3_fu_720_p3.read());
}

void sobel_filter::thread_window_val_2_1_5_fu_846_p3() {
    window_val_2_1_5_fu_846_p3 = (!icmp_ln274_2_reg_1510.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_2_reg_1510.read()[0].to_bool())? window_val_2_1_fu_214.read(): window_val_2_1_4_fu_734_p3.read());
}

void sobel_filter::thread_window_val_2_1_6_fu_853_p3() {
    window_val_2_1_6_fu_853_p3 = (!icmp_ln274_3_reg_1520.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_3_reg_1520.read()[0].to_bool())? window_val_2_1_fu_214.read(): window_val_2_1_5_fu_846_p3.read());
}

void sobel_filter::thread_window_val_2_1_7_fu_951_p3() {
    window_val_2_1_7_fu_951_p3 = (!and_ln41_1_reg_1551.read()[0].is_01())? sc_lv<8>(): ((and_ln41_1_reg_1551.read()[0].to_bool())? window_val_2_1_6_fu_853_p3.read(): window_val_2_1_1_fu_642_p3.read());
}

void sobel_filter::thread_window_val_2_2_13_fu_658_p3() {
    window_val_2_2_13_fu_658_p3 = (!icmp_ln43_fu_636_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln43_fu_636_p2.read()[0].to_bool())? window_val_2_0_fu_210.read(): window_val_2_2_4_fu_206.read());
}

void sobel_filter::thread_window_val_2_2_17_fu_682_p3() {
    window_val_2_2_17_fu_682_p3 = (!icmp_ln43_fu_636_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln43_fu_636_p2.read()[0].to_bool())? window_val_1_0_fu_198.read(): window_val_2_2_3_fu_194.read());
}

void sobel_filter::thread_window_val_2_2_27_fu_706_p3() {
    window_val_2_2_27_fu_706_p3 = (!icmp_ln43_fu_636_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln43_fu_636_p2.read()[0].to_bool())? window_val_2_2_2_fu_186.read(): window_val_2_2_1_fu_182.read());
}

void sobel_filter::thread_window_val_2_2_33_fu_750_p3() {
    window_val_2_2_33_fu_750_p3 = (!icmp_ln274_1_fu_728_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_1_fu_728_p2.read()[0].to_bool())? window_val_2_0_fu_210.read(): window_val_2_2_fu_742_p3.read());
}

void sobel_filter::thread_window_val_2_2_34_fu_758_p3() {
    window_val_2_2_34_fu_758_p3 = (!icmp_ln274_1_fu_728_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_1_fu_728_p2.read()[0].to_bool())? INPUT_IMAGE_V_data_V_0_data_out.read(): window_val_2_2_4_fu_206.read());
}

void sobel_filter::thread_window_val_2_2_35_fu_782_p3() {
    window_val_2_2_35_fu_782_p3 = (!icmp_ln274_fu_714_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_fu_714_p2.read()[0].to_bool())? INPUT_IMAGE_V_data_V_0_data_out.read(): window_val_2_2_2_fu_186.read());
}

void sobel_filter::thread_window_val_2_2_36_fu_790_p3() {
    window_val_2_2_36_fu_790_p3 = (!icmp_ln274_1_fu_728_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_1_fu_728_p2.read()[0].to_bool())? window_val_2_2_2_fu_186.read(): window_val_2_2_35_fu_782_p3.read());
}

void sobel_filter::thread_window_val_2_2_37_fu_798_p3() {
    window_val_2_2_37_fu_798_p3 = (!icmp_ln274_1_fu_728_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_1_fu_728_p2.read()[0].to_bool())? INPUT_IMAGE_V_data_V_0_data_out.read(): window_val_2_2_1_fu_182.read());
}

void sobel_filter::thread_window_val_2_2_38_fu_822_p3() {
    window_val_2_2_38_fu_822_p3 = (!icmp_ln274_fu_714_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_fu_714_p2.read()[0].to_bool())? INPUT_IMAGE_V_data_V_0_data_out.read(): window_val_1_0_fu_198.read());
}

void sobel_filter::thread_window_val_2_2_39_fu_830_p3() {
    window_val_2_2_39_fu_830_p3 = (!icmp_ln274_1_fu_728_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_1_fu_728_p2.read()[0].to_bool())? window_val_1_0_fu_198.read(): window_val_2_2_38_fu_822_p3.read());
}

void sobel_filter::thread_window_val_2_2_40_fu_838_p3() {
    window_val_2_2_40_fu_838_p3 = (!icmp_ln274_1_fu_728_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_1_fu_728_p2.read()[0].to_bool())? INPUT_IMAGE_V_data_V_0_data_out.read(): window_val_2_2_3_fu_194.read());
}

void sobel_filter::thread_window_val_2_2_41_fu_860_p3() {
    window_val_2_2_41_fu_860_p3 = (!icmp_ln274_2_reg_1510.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_2_reg_1510.read()[0].to_bool())? window_val_2_0_fu_210.read(): window_val_2_2_33_fu_750_p3.read());
}

void sobel_filter::thread_window_val_2_2_42_fu_867_p3() {
    window_val_2_2_42_fu_867_p3 = (!icmp_ln274_3_reg_1520.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_3_reg_1520.read()[0].to_bool())? window_val_2_0_fu_210.read(): window_val_2_2_41_fu_860_p3.read());
}

void sobel_filter::thread_window_val_2_2_43_fu_874_p3() {
    window_val_2_2_43_fu_874_p3 = (!icmp_ln274_2_reg_1510.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_2_reg_1510.read()[0].to_bool())? window_val_2_2_4_fu_206.read(): window_val_2_2_34_fu_758_p3.read());
}

void sobel_filter::thread_window_val_2_2_44_fu_881_p3() {
    window_val_2_2_44_fu_881_p3 = (!icmp_ln274_3_reg_1520.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_3_reg_1520.read()[0].to_bool())? window_val_2_2_4_fu_206.read(): window_val_2_2_43_fu_874_p3.read());
}

void sobel_filter::thread_window_val_2_2_45_fu_902_p3() {
    window_val_2_2_45_fu_902_p3 = (!icmp_ln274_2_reg_1510.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_2_reg_1510.read()[0].to_bool())? window_val_2_2_39_fu_830_p3.read(): window_val_1_0_fu_198.read());
}

void sobel_filter::thread_window_val_2_2_46_fu_909_p3() {
    window_val_2_2_46_fu_909_p3 = (!icmp_ln274_3_reg_1520.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_3_reg_1520.read()[0].to_bool())? window_val_1_0_fu_198.read(): window_val_2_2_45_fu_902_p3.read());
}

void sobel_filter::thread_window_val_2_2_47_fu_916_p3() {
    window_val_2_2_47_fu_916_p3 = (!icmp_ln274_2_reg_1510.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_2_reg_1510.read()[0].to_bool())? window_val_2_2_40_fu_838_p3.read(): window_val_2_2_3_fu_194.read());
}

void sobel_filter::thread_window_val_2_2_48_fu_923_p3() {
    window_val_2_2_48_fu_923_p3 = (!icmp_ln274_3_reg_1520.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_3_reg_1520.read()[0].to_bool())? window_val_2_2_3_fu_194.read(): window_val_2_2_47_fu_916_p3.read());
}

void sobel_filter::thread_window_val_2_2_49_fu_937_p3() {
    window_val_2_2_49_fu_937_p3 = (!icmp_ln274_3_reg_1520.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_3_reg_1520.read()[0].to_bool())? window_val_2_2_36_fu_790_p3.read(): window_val_2_2_2_fu_186.read());
}

void sobel_filter::thread_window_val_2_2_50_fu_944_p3() {
    window_val_2_2_50_fu_944_p3 = (!icmp_ln274_3_reg_1520.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_3_reg_1520.read()[0].to_bool())? window_val_2_2_37_fu_798_p3.read(): window_val_2_2_1_fu_182.read());
}

void sobel_filter::thread_window_val_2_2_51_fu_965_p3() {
    window_val_2_2_51_fu_965_p3 = (!and_ln41_1_reg_1551.read()[0].is_01())? sc_lv<8>(): ((and_ln41_1_reg_1551.read()[0].to_bool())? window_val_2_2_44_fu_881_p3.read(): window_val_2_2_13_fu_658_p3.read());
}

void sobel_filter::thread_window_val_2_2_52_fu_986_p3() {
    window_val_2_2_52_fu_986_p3 = (!and_ln41_1_reg_1551.read()[0].is_01())? sc_lv<8>(): ((and_ln41_1_reg_1551.read()[0].to_bool())? window_val_2_2_48_fu_923_p3.read(): window_val_2_2_17_fu_682_p3.read());
}

void sobel_filter::thread_window_val_2_2_53_fu_1007_p3() {
    window_val_2_2_53_fu_1007_p3 = (!and_ln41_1_reg_1551.read()[0].is_01())? sc_lv<8>(): ((and_ln41_1_reg_1551.read()[0].to_bool())? window_val_2_2_50_fu_944_p3.read(): window_val_2_2_27_fu_706_p3.read());
}

void sobel_filter::thread_window_val_2_2_fu_742_p3() {
    window_val_2_2_fu_742_p3 = (!icmp_ln274_fu_714_p2.read()[0].is_01())? sc_lv<8>(): ((icmp_ln274_fu_714_p2.read()[0].to_bool())? INPUT_IMAGE_V_data_V_0_data_out.read(): window_val_2_0_fu_210.read());
}

void sobel_filter::thread_xor_ln80_fu_1150_p2() {
    xor_ln80_fu_1150_p2 = (icmp_ln80_fu_1124_p2.read() ^ ap_const_lv1_1);
}

void sobel_filter::thread_zext_ln68_1_fu_1064_p1() {
    zext_ln68_1_fu_1064_p1 = esl_zext<4,2>(add_ln68_2_fu_1058_p2.read());
}

void sobel_filter::thread_zext_ln68_2_fu_1054_p1() {
    zext_ln68_2_fu_1054_p1 = esl_zext<5,3>(colOffset_fu_1048_p2.read());
}

void sobel_filter::thread_zext_ln68_fu_1230_p1() {
    zext_ln68_fu_1230_p1 = esl_zext<4,2>(add_ln493_fu_1224_p2.read());
}

void sobel_filter::thread_zext_ln69_1_fu_1268_p1() {
    zext_ln69_1_fu_1268_p1 = esl_zext<12,8>(tmp_1_reg_1702.read());
}

void sobel_filter::thread_zext_ln69_fu_1195_p1() {
    zext_ln69_fu_1195_p1 = esl_zext<5,3>(rowOffset_fu_1189_p2.read());
}

void sobel_filter::thread_zext_ln729_fu_547_p1() {
    zext_ln729_fu_547_p1 = esl_zext<64,11>(col_assign_reg_367.read());
}

void sobel_filter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln29_fu_471_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln30_fu_495_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln31_fu_535_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln52_fu_1026_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln61_fu_1032_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln52_fu_1026_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln61_fu_1032_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, and_ln52_fu_1026_p2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, INPUT_IMAGE_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln66_fu_1038_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_1038_p2.read()) && esl_seteq<1,1,1>(ap_block_state6_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln67_fu_1179_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_block_state9_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(OUTPUT_IMAGE_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln101_fu_1335_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln101_fu_1335_p2.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, OUTPUT_IMAGE_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, OUTPUT_IMAGE_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, OUTPUT_IMAGE_V_dest_V_1_state.read())) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state11_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(OUTPUT_IMAGE_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<12>) ("XXXXXXXXXXXX");
            break;
    }
}

void sobel_filter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_IMAGE_TDATA\" :  \"" << INPUT_IMAGE_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_IMAGE_TVALID\" :  \"" << INPUT_IMAGE_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"INPUT_IMAGE_TREADY\" :  \"" << INPUT_IMAGE_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_IMAGE_TKEEP\" :  \"" << INPUT_IMAGE_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_IMAGE_TSTRB\" :  \"" << INPUT_IMAGE_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_IMAGE_TUSER\" :  \"" << INPUT_IMAGE_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_IMAGE_TLAST\" :  \"" << INPUT_IMAGE_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_IMAGE_TID\" :  \"" << INPUT_IMAGE_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"INPUT_IMAGE_TDEST\" :  \"" << INPUT_IMAGE_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_IMAGE_TDATA\" :  \"" << OUTPUT_IMAGE_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_IMAGE_TVALID\" :  \"" << OUTPUT_IMAGE_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"OUTPUT_IMAGE_TREADY\" :  \"" << OUTPUT_IMAGE_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_IMAGE_TKEEP\" :  \"" << OUTPUT_IMAGE_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_IMAGE_TSTRB\" :  \"" << OUTPUT_IMAGE_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_IMAGE_TUSER\" :  \"" << OUTPUT_IMAGE_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_IMAGE_TLAST\" :  \"" << OUTPUT_IMAGE_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_IMAGE_TID\" :  \"" << OUTPUT_IMAGE_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"OUTPUT_IMAGE_TDEST\" :  \"" << OUTPUT_IMAGE_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_AWVALID\" :  \"" << s_axi_ctrl_bus_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_AWREADY\" :  \"" << s_axi_ctrl_bus_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_AWADDR\" :  \"" << s_axi_ctrl_bus_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_WVALID\" :  \"" << s_axi_ctrl_bus_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_WREADY\" :  \"" << s_axi_ctrl_bus_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_WDATA\" :  \"" << s_axi_ctrl_bus_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_WSTRB\" :  \"" << s_axi_ctrl_bus_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_ARVALID\" :  \"" << s_axi_ctrl_bus_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_ARREADY\" :  \"" << s_axi_ctrl_bus_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_ARADDR\" :  \"" << s_axi_ctrl_bus_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_RVALID\" :  \"" << s_axi_ctrl_bus_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_RREADY\" :  \"" << s_axi_ctrl_bus_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_RDATA\" :  \"" << s_axi_ctrl_bus_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_RRESP\" :  \"" << s_axi_ctrl_bus_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_BVALID\" :  \"" << s_axi_ctrl_bus_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_ctrl_bus_BREADY\" :  \"" << s_axi_ctrl_bus_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_ctrl_bus_BRESP\" :  \"" << s_axi_ctrl_bus_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


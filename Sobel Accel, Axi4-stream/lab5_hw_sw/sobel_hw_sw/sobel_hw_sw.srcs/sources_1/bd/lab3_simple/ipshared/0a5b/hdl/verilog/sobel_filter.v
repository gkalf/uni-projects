// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel_filter,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=12587028,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=2,HLS_SYN_FF=748,HLS_SYN_LUT=2008,HLS_VERSION=2019_1}" *)

module sobel_filter (
        ap_clk,
        ap_rst_n,
        INPUT_IMAGE_TDATA,
        INPUT_IMAGE_TVALID,
        INPUT_IMAGE_TREADY,
        INPUT_IMAGE_TKEEP,
        INPUT_IMAGE_TSTRB,
        INPUT_IMAGE_TUSER,
        INPUT_IMAGE_TLAST,
        INPUT_IMAGE_TID,
        INPUT_IMAGE_TDEST,
        OUTPUT_IMAGE_TDATA,
        OUTPUT_IMAGE_TVALID,
        OUTPUT_IMAGE_TREADY,
        OUTPUT_IMAGE_TKEEP,
        OUTPUT_IMAGE_TSTRB,
        OUTPUT_IMAGE_TUSER,
        OUTPUT_IMAGE_TLAST,
        OUTPUT_IMAGE_TID,
        OUTPUT_IMAGE_TDEST,
        s_axi_ctrl_bus_AWVALID,
        s_axi_ctrl_bus_AWREADY,
        s_axi_ctrl_bus_AWADDR,
        s_axi_ctrl_bus_WVALID,
        s_axi_ctrl_bus_WREADY,
        s_axi_ctrl_bus_WDATA,
        s_axi_ctrl_bus_WSTRB,
        s_axi_ctrl_bus_ARVALID,
        s_axi_ctrl_bus_ARREADY,
        s_axi_ctrl_bus_ARADDR,
        s_axi_ctrl_bus_RVALID,
        s_axi_ctrl_bus_RREADY,
        s_axi_ctrl_bus_RDATA,
        s_axi_ctrl_bus_RRESP,
        s_axi_ctrl_bus_BVALID,
        s_axi_ctrl_bus_BREADY,
        s_axi_ctrl_bus_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] INPUT_IMAGE_TDATA;
input   INPUT_IMAGE_TVALID;
output   INPUT_IMAGE_TREADY;
input  [0:0] INPUT_IMAGE_TKEEP;
input  [0:0] INPUT_IMAGE_TSTRB;
input  [1:0] INPUT_IMAGE_TUSER;
input  [0:0] INPUT_IMAGE_TLAST;
input  [4:0] INPUT_IMAGE_TID;
input  [5:0] INPUT_IMAGE_TDEST;
output  [7:0] OUTPUT_IMAGE_TDATA;
output   OUTPUT_IMAGE_TVALID;
input   OUTPUT_IMAGE_TREADY;
output  [0:0] OUTPUT_IMAGE_TKEEP;
output  [0:0] OUTPUT_IMAGE_TSTRB;
output  [1:0] OUTPUT_IMAGE_TUSER;
output  [0:0] OUTPUT_IMAGE_TLAST;
output  [4:0] OUTPUT_IMAGE_TID;
output  [5:0] OUTPUT_IMAGE_TDEST;
input   s_axi_ctrl_bus_AWVALID;
output   s_axi_ctrl_bus_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_ctrl_bus_AWADDR;
input   s_axi_ctrl_bus_WVALID;
output   s_axi_ctrl_bus_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_ctrl_bus_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_ctrl_bus_WSTRB;
input   s_axi_ctrl_bus_ARVALID;
output   s_axi_ctrl_bus_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_ctrl_bus_ARADDR;
output   s_axi_ctrl_bus_RVALID;
input   s_axi_ctrl_bus_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_ctrl_bus_RDATA;
output  [1:0] s_axi_ctrl_bus_RRESP;
output   s_axi_ctrl_bus_BVALID;
input   s_axi_ctrl_bus_BREADY;
output  [1:0] s_axi_ctrl_bus_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] INPUT_IMAGE_V_data_V_0_data_out;
wire    INPUT_IMAGE_V_data_V_0_vld_in;
wire    INPUT_IMAGE_V_data_V_0_vld_out;
wire    INPUT_IMAGE_V_data_V_0_ack_in;
reg    INPUT_IMAGE_V_data_V_0_ack_out;
reg   [7:0] INPUT_IMAGE_V_data_V_0_payload_A;
reg   [7:0] INPUT_IMAGE_V_data_V_0_payload_B;
reg    INPUT_IMAGE_V_data_V_0_sel_rd;
reg    INPUT_IMAGE_V_data_V_0_sel_wr;
wire    INPUT_IMAGE_V_data_V_0_sel;
wire    INPUT_IMAGE_V_data_V_0_load_A;
wire    INPUT_IMAGE_V_data_V_0_load_B;
reg   [1:0] INPUT_IMAGE_V_data_V_0_state;
wire    INPUT_IMAGE_V_data_V_0_state_cmp_full;
reg   [0:0] INPUT_IMAGE_V_keep_V_0_data_out;
wire    INPUT_IMAGE_V_keep_V_0_vld_in;
wire    INPUT_IMAGE_V_keep_V_0_vld_out;
wire    INPUT_IMAGE_V_keep_V_0_ack_in;
reg    INPUT_IMAGE_V_keep_V_0_ack_out;
reg   [0:0] INPUT_IMAGE_V_keep_V_0_payload_A;
reg   [0:0] INPUT_IMAGE_V_keep_V_0_payload_B;
reg    INPUT_IMAGE_V_keep_V_0_sel_rd;
reg    INPUT_IMAGE_V_keep_V_0_sel_wr;
wire    INPUT_IMAGE_V_keep_V_0_sel;
wire    INPUT_IMAGE_V_keep_V_0_load_A;
wire    INPUT_IMAGE_V_keep_V_0_load_B;
reg   [1:0] INPUT_IMAGE_V_keep_V_0_state;
wire    INPUT_IMAGE_V_keep_V_0_state_cmp_full;
reg   [0:0] INPUT_IMAGE_V_strb_V_0_data_out;
wire    INPUT_IMAGE_V_strb_V_0_vld_in;
wire    INPUT_IMAGE_V_strb_V_0_vld_out;
wire    INPUT_IMAGE_V_strb_V_0_ack_in;
reg    INPUT_IMAGE_V_strb_V_0_ack_out;
reg   [0:0] INPUT_IMAGE_V_strb_V_0_payload_A;
reg   [0:0] INPUT_IMAGE_V_strb_V_0_payload_B;
reg    INPUT_IMAGE_V_strb_V_0_sel_rd;
reg    INPUT_IMAGE_V_strb_V_0_sel_wr;
wire    INPUT_IMAGE_V_strb_V_0_sel;
wire    INPUT_IMAGE_V_strb_V_0_load_A;
wire    INPUT_IMAGE_V_strb_V_0_load_B;
reg   [1:0] INPUT_IMAGE_V_strb_V_0_state;
wire    INPUT_IMAGE_V_strb_V_0_state_cmp_full;
reg   [1:0] INPUT_IMAGE_V_user_V_0_data_out;
wire    INPUT_IMAGE_V_user_V_0_vld_in;
wire    INPUT_IMAGE_V_user_V_0_vld_out;
wire    INPUT_IMAGE_V_user_V_0_ack_in;
reg    INPUT_IMAGE_V_user_V_0_ack_out;
reg   [1:0] INPUT_IMAGE_V_user_V_0_payload_A;
reg   [1:0] INPUT_IMAGE_V_user_V_0_payload_B;
reg    INPUT_IMAGE_V_user_V_0_sel_rd;
reg    INPUT_IMAGE_V_user_V_0_sel_wr;
wire    INPUT_IMAGE_V_user_V_0_sel;
wire    INPUT_IMAGE_V_user_V_0_load_A;
wire    INPUT_IMAGE_V_user_V_0_load_B;
reg   [1:0] INPUT_IMAGE_V_user_V_0_state;
wire    INPUT_IMAGE_V_user_V_0_state_cmp_full;
reg   [4:0] INPUT_IMAGE_V_id_V_0_data_out;
wire    INPUT_IMAGE_V_id_V_0_vld_in;
wire    INPUT_IMAGE_V_id_V_0_vld_out;
wire    INPUT_IMAGE_V_id_V_0_ack_in;
reg    INPUT_IMAGE_V_id_V_0_ack_out;
reg   [4:0] INPUT_IMAGE_V_id_V_0_payload_A;
reg   [4:0] INPUT_IMAGE_V_id_V_0_payload_B;
reg    INPUT_IMAGE_V_id_V_0_sel_rd;
reg    INPUT_IMAGE_V_id_V_0_sel_wr;
wire    INPUT_IMAGE_V_id_V_0_sel;
wire    INPUT_IMAGE_V_id_V_0_load_A;
wire    INPUT_IMAGE_V_id_V_0_load_B;
reg   [1:0] INPUT_IMAGE_V_id_V_0_state;
wire    INPUT_IMAGE_V_id_V_0_state_cmp_full;
reg   [5:0] INPUT_IMAGE_V_dest_V_0_data_out;
wire    INPUT_IMAGE_V_dest_V_0_vld_in;
wire    INPUT_IMAGE_V_dest_V_0_vld_out;
wire    INPUT_IMAGE_V_dest_V_0_ack_in;
reg    INPUT_IMAGE_V_dest_V_0_ack_out;
reg   [5:0] INPUT_IMAGE_V_dest_V_0_payload_A;
reg   [5:0] INPUT_IMAGE_V_dest_V_0_payload_B;
reg    INPUT_IMAGE_V_dest_V_0_sel_rd;
reg    INPUT_IMAGE_V_dest_V_0_sel_wr;
wire    INPUT_IMAGE_V_dest_V_0_sel;
wire    INPUT_IMAGE_V_dest_V_0_load_A;
wire    INPUT_IMAGE_V_dest_V_0_load_B;
reg   [1:0] INPUT_IMAGE_V_dest_V_0_state;
wire    INPUT_IMAGE_V_dest_V_0_state_cmp_full;
reg   [7:0] OUTPUT_IMAGE_V_data_V_1_data_in;
reg   [7:0] OUTPUT_IMAGE_V_data_V_1_data_out;
reg    OUTPUT_IMAGE_V_data_V_1_vld_in;
wire    OUTPUT_IMAGE_V_data_V_1_vld_out;
wire    OUTPUT_IMAGE_V_data_V_1_ack_in;
wire    OUTPUT_IMAGE_V_data_V_1_ack_out;
reg   [7:0] OUTPUT_IMAGE_V_data_V_1_payload_A;
reg   [7:0] OUTPUT_IMAGE_V_data_V_1_payload_B;
reg    OUTPUT_IMAGE_V_data_V_1_sel_rd;
reg    OUTPUT_IMAGE_V_data_V_1_sel_wr;
wire    OUTPUT_IMAGE_V_data_V_1_sel;
wire    OUTPUT_IMAGE_V_data_V_1_load_A;
wire    OUTPUT_IMAGE_V_data_V_1_load_B;
reg   [1:0] OUTPUT_IMAGE_V_data_V_1_state;
wire    OUTPUT_IMAGE_V_data_V_1_state_cmp_full;
reg   [0:0] OUTPUT_IMAGE_V_keep_V_1_data_in;
reg   [0:0] OUTPUT_IMAGE_V_keep_V_1_data_out;
reg    OUTPUT_IMAGE_V_keep_V_1_vld_in;
wire    OUTPUT_IMAGE_V_keep_V_1_vld_out;
wire    OUTPUT_IMAGE_V_keep_V_1_ack_in;
wire    OUTPUT_IMAGE_V_keep_V_1_ack_out;
reg   [0:0] OUTPUT_IMAGE_V_keep_V_1_payload_A;
reg   [0:0] OUTPUT_IMAGE_V_keep_V_1_payload_B;
reg    OUTPUT_IMAGE_V_keep_V_1_sel_rd;
reg    OUTPUT_IMAGE_V_keep_V_1_sel_wr;
wire    OUTPUT_IMAGE_V_keep_V_1_sel;
wire    OUTPUT_IMAGE_V_keep_V_1_load_A;
wire    OUTPUT_IMAGE_V_keep_V_1_load_B;
reg   [1:0] OUTPUT_IMAGE_V_keep_V_1_state;
wire    OUTPUT_IMAGE_V_keep_V_1_state_cmp_full;
reg   [0:0] OUTPUT_IMAGE_V_strb_V_1_data_in;
reg   [0:0] OUTPUT_IMAGE_V_strb_V_1_data_out;
reg    OUTPUT_IMAGE_V_strb_V_1_vld_in;
wire    OUTPUT_IMAGE_V_strb_V_1_vld_out;
wire    OUTPUT_IMAGE_V_strb_V_1_ack_in;
wire    OUTPUT_IMAGE_V_strb_V_1_ack_out;
reg   [0:0] OUTPUT_IMAGE_V_strb_V_1_payload_A;
reg   [0:0] OUTPUT_IMAGE_V_strb_V_1_payload_B;
reg    OUTPUT_IMAGE_V_strb_V_1_sel_rd;
reg    OUTPUT_IMAGE_V_strb_V_1_sel_wr;
wire    OUTPUT_IMAGE_V_strb_V_1_sel;
wire    OUTPUT_IMAGE_V_strb_V_1_load_A;
wire    OUTPUT_IMAGE_V_strb_V_1_load_B;
reg   [1:0] OUTPUT_IMAGE_V_strb_V_1_state;
wire    OUTPUT_IMAGE_V_strb_V_1_state_cmp_full;
reg   [1:0] OUTPUT_IMAGE_V_user_V_1_data_in;
reg   [1:0] OUTPUT_IMAGE_V_user_V_1_data_out;
reg    OUTPUT_IMAGE_V_user_V_1_vld_in;
wire    OUTPUT_IMAGE_V_user_V_1_vld_out;
wire    OUTPUT_IMAGE_V_user_V_1_ack_in;
wire    OUTPUT_IMAGE_V_user_V_1_ack_out;
reg   [1:0] OUTPUT_IMAGE_V_user_V_1_payload_A;
reg   [1:0] OUTPUT_IMAGE_V_user_V_1_payload_B;
reg    OUTPUT_IMAGE_V_user_V_1_sel_rd;
reg    OUTPUT_IMAGE_V_user_V_1_sel_wr;
wire    OUTPUT_IMAGE_V_user_V_1_sel;
wire    OUTPUT_IMAGE_V_user_V_1_load_A;
wire    OUTPUT_IMAGE_V_user_V_1_load_B;
reg   [1:0] OUTPUT_IMAGE_V_user_V_1_state;
wire    OUTPUT_IMAGE_V_user_V_1_state_cmp_full;
reg   [0:0] OUTPUT_IMAGE_V_last_V_1_data_in;
reg   [0:0] OUTPUT_IMAGE_V_last_V_1_data_out;
reg    OUTPUT_IMAGE_V_last_V_1_vld_in;
wire    OUTPUT_IMAGE_V_last_V_1_vld_out;
wire    OUTPUT_IMAGE_V_last_V_1_ack_in;
wire    OUTPUT_IMAGE_V_last_V_1_ack_out;
reg   [0:0] OUTPUT_IMAGE_V_last_V_1_payload_A;
reg   [0:0] OUTPUT_IMAGE_V_last_V_1_payload_B;
reg    OUTPUT_IMAGE_V_last_V_1_sel_rd;
reg    OUTPUT_IMAGE_V_last_V_1_sel_wr;
wire    OUTPUT_IMAGE_V_last_V_1_sel;
wire    OUTPUT_IMAGE_V_last_V_1_load_A;
wire    OUTPUT_IMAGE_V_last_V_1_load_B;
reg   [1:0] OUTPUT_IMAGE_V_last_V_1_state;
wire    OUTPUT_IMAGE_V_last_V_1_state_cmp_full;
reg   [4:0] OUTPUT_IMAGE_V_id_V_1_data_in;
reg   [4:0] OUTPUT_IMAGE_V_id_V_1_data_out;
reg    OUTPUT_IMAGE_V_id_V_1_vld_in;
wire    OUTPUT_IMAGE_V_id_V_1_vld_out;
wire    OUTPUT_IMAGE_V_id_V_1_ack_in;
wire    OUTPUT_IMAGE_V_id_V_1_ack_out;
reg   [4:0] OUTPUT_IMAGE_V_id_V_1_payload_A;
reg   [4:0] OUTPUT_IMAGE_V_id_V_1_payload_B;
reg    OUTPUT_IMAGE_V_id_V_1_sel_rd;
reg    OUTPUT_IMAGE_V_id_V_1_sel_wr;
wire    OUTPUT_IMAGE_V_id_V_1_sel;
wire    OUTPUT_IMAGE_V_id_V_1_load_A;
wire    OUTPUT_IMAGE_V_id_V_1_load_B;
reg   [1:0] OUTPUT_IMAGE_V_id_V_1_state;
wire    OUTPUT_IMAGE_V_id_V_1_state_cmp_full;
reg   [5:0] OUTPUT_IMAGE_V_dest_V_1_data_in;
reg   [5:0] OUTPUT_IMAGE_V_dest_V_1_data_out;
reg    OUTPUT_IMAGE_V_dest_V_1_vld_in;
wire    OUTPUT_IMAGE_V_dest_V_1_vld_out;
wire    OUTPUT_IMAGE_V_dest_V_1_ack_in;
wire    OUTPUT_IMAGE_V_dest_V_1_ack_out;
reg   [5:0] OUTPUT_IMAGE_V_dest_V_1_payload_A;
reg   [5:0] OUTPUT_IMAGE_V_dest_V_1_payload_B;
reg    OUTPUT_IMAGE_V_dest_V_1_sel_rd;
reg    OUTPUT_IMAGE_V_dest_V_1_sel_wr;
wire    OUTPUT_IMAGE_V_dest_V_1_sel;
wire    OUTPUT_IMAGE_V_dest_V_1_load_A;
wire    OUTPUT_IMAGE_V_dest_V_1_load_B;
reg   [1:0] OUTPUT_IMAGE_V_dest_V_1_state;
wire    OUTPUT_IMAGE_V_dest_V_1_state_cmp_full;
wire   [3:0] Gx_address0;
reg    Gx_ce0;
wire  signed [2:0] Gx_q0;
wire   [3:0] Gy_address0;
reg    Gy_ce0;
wire  signed [2:0] Gy_q0;
reg    INPUT_IMAGE_TDATA_blk_n;
wire    ap_CS_fsm_state5;
reg    OUTPUT_IMAGE_TDATA_blk_n;
wire   [0:0] and_ln52_fu_1026_p2;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln66_fu_1038_p2;
wire    ap_CS_fsm_state9;
reg   [0:0] and_ln52_reg_1653;
reg   [0:0] icmp_ln61_reg_1657;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln101_fu_1335_p2;
wire    ap_CS_fsm_state12;
wire   [3:0] i_2_fu_477_p2;
reg   [3:0] i_2_reg_1477;
wire    ap_CS_fsm_state2;
wire   [20:0] counter_fu_483_p2;
reg   [20:0] counter_reg_1482;
wire   [0:0] icmp_ln29_fu_471_p2;
wire   [0:0] icmp_ln41_fu_489_p2;
reg   [0:0] icmp_ln41_reg_1487;
wire   [7:0] k_fu_501_p2;
reg   [7:0] k_reg_1495;
wire    ap_CS_fsm_state3;
wire   [20:0] add_ln34_fu_507_p2;
reg   [20:0] add_ln34_reg_1500;
wire   [0:0] icmp_ln30_fu_495_p2;
wire   [0:0] icmp_ln41_1_fu_513_p2;
reg   [0:0] icmp_ln41_1_reg_1505;
wire   [0:0] icmp_ln274_2_fu_523_p2;
reg   [0:0] icmp_ln274_2_reg_1510;
wire   [0:0] icmp_ln274_3_fu_529_p2;
reg   [0:0] icmp_ln274_3_reg_1520;
wire   [10:0] j_fu_541_p2;
reg   [10:0] j_reg_1536;
wire    ap_CS_fsm_state4;
reg   [9:0] pixelbuffer_val_1_a_reg_1541;
wire   [0:0] icmp_ln31_fu_535_p2;
reg   [9:0] pixelbuffer_val_2_a_reg_1546;
wire   [0:0] and_ln41_1_fu_564_p2;
reg   [0:0] and_ln41_1_reg_1551;
wire   [20:0] add_ln34_1_fu_596_p2;
reg   [20:0] add_ln34_1_reg_1564;
reg    ap_block_state5_io;
reg   [0:0] tmp_keep_V_3_reg_1569;
reg   [0:0] tmp_strb_V_3_reg_1575;
reg   [1:0] tmp_user_V_3_reg_1581;
reg   [4:0] tmp_id_V_3_reg_1587;
reg   [5:0] tmp_dest_V_3_reg_1593;
wire   [7:0] window_val_2_1_7_fu_951_p3;
reg   [7:0] window_val_2_1_7_reg_1599;
wire   [7:0] select_ln41_fu_958_p3;
reg   [7:0] select_ln41_reg_1605;
wire   [7:0] window_val_2_2_51_fu_965_p3;
reg   [7:0] window_val_2_2_51_reg_1611;
wire   [7:0] select_ln41_2_fu_972_p3;
reg   [7:0] select_ln41_2_reg_1617;
wire   [7:0] select_ln41_3_fu_979_p3;
reg   [7:0] select_ln41_3_reg_1623;
wire   [7:0] window_val_2_2_52_fu_986_p3;
reg   [7:0] window_val_2_2_52_reg_1629;
wire   [7:0] select_ln41_5_fu_993_p3;
reg   [7:0] select_ln41_5_reg_1635;
wire   [7:0] select_ln41_6_fu_1000_p3;
reg   [7:0] select_ln41_6_reg_1641;
wire   [7:0] window_val_2_2_53_fu_1007_p3;
reg   [7:0] window_val_2_2_53_reg_1647;
wire   [0:0] icmp_ln61_fu_1032_p2;
wire   [2:0] colOffset_fu_1048_p2;
reg   [2:0] colOffset_reg_1664;
reg    ap_block_state6_io;
wire   [4:0] zext_ln68_2_fu_1054_p1;
reg   [4:0] zext_ln68_2_reg_1669;
wire   [3:0] zext_ln68_1_fu_1064_p1;
reg   [3:0] zext_ln68_1_reg_1674;
wire   [7:0] tmp_data_V_fu_1170_p3;
wire   [2:0] rowOffset_fu_1189_p2;
reg   [2:0] rowOffset_reg_1687;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln67_fu_1179_p2;
wire   [7:0] tmp_1_fu_1253_p11;
reg   [7:0] tmp_1_reg_1702;
wire  signed [31:0] grp_fu_1374_p3;
wire    ap_CS_fsm_state8;
wire  signed [31:0] grp_fu_1382_p3;
wire   [10:0] i_fu_1341_p2;
reg   [10:0] i_reg_1720;
reg    ap_block_state11;
reg    ap_block_state11_io;
wire   [0:0] tmp_last_V_fu_1367_p2;
reg   [9:0] pixelbuffer_val_1_address0;
reg    pixelbuffer_val_1_ce0;
reg    pixelbuffer_val_1_we0;
wire   [7:0] pixelbuffer_val_1_q0;
reg   [9:0] pixelbuffer_val_2_address0;
reg    pixelbuffer_val_2_ce0;
reg    pixelbuffer_val_2_we0;
wire   [7:0] pixelbuffer_val_2_q0;
reg   [3:0] i_0_reg_322;
reg   [20:0] counter_0_reg_333;
reg   [20:0] counter_1_reg_345;
reg   [7:0] row_assign_reg_356;
reg   [10:0] col_assign_reg_367;
reg    ap_predicate_op236_write_state9;
reg    ap_block_state9_io;
reg   [20:0] counter_2_reg_379;
reg   [2:0] colOffset_0_reg_390;
reg   [31:0] x_dir_0_reg_401;
reg   [31:0] y_dir_0_reg_413;
reg   [2:0] rowOffset_0_reg_425;
reg   [31:0] x_dir_1_reg_436;
reg   [31:0] y_dir_1_reg_448;
reg   [10:0] i_1_reg_460;
wire   [63:0] zext_ln729_fu_547_p1;
wire  signed [63:0] sext_ln69_fu_1218_p1;
reg   [5:0] tmp_dest_V_fu_162;
reg   [0:0] tmp_keep_V_fu_166;
reg   [0:0] tmp_strb_V_fu_170;
reg   [1:0] tmp_user_V_fu_174;
reg   [4:0] tmp_id_V_fu_178;
reg   [7:0] window_val_2_2_1_fu_182;
reg   [7:0] window_val_2_2_2_fu_186;
reg   [7:0] window_val_0_1_fu_190;
reg   [7:0] window_val_2_2_3_fu_194;
reg   [7:0] window_val_1_0_fu_198;
reg   [7:0] window_val_1_1_fu_202;
reg   [7:0] window_val_2_2_4_fu_206;
reg   [7:0] window_val_2_0_fu_210;
reg   [7:0] window_val_2_1_fu_214;
wire   [1:0] trunc_ln274_fu_519_p1;
wire   [0:0] icmp_ln41_2_fu_553_p2;
wire   [0:0] and_ln41_fu_559_p2;
wire   [0:0] icmp_ln43_fu_636_p2;
wire   [1:0] trunc_ln274_1_fu_632_p1;
wire   [0:0] icmp_ln274_fu_714_p2;
wire   [0:0] icmp_ln274_1_fu_728_p2;
wire   [7:0] window_val_2_1_3_fu_720_p3;
wire   [7:0] window_val_2_2_fu_742_p3;
wire   [7:0] window_val_0_1_2_fu_766_p3;
wire   [7:0] window_val_2_2_35_fu_782_p3;
wire   [7:0] window_val_1_1_2_fu_806_p3;
wire   [7:0] window_val_2_2_38_fu_822_p3;
wire   [7:0] window_val_2_1_4_fu_734_p3;
wire   [7:0] window_val_2_1_5_fu_846_p3;
wire   [7:0] window_val_2_2_33_fu_750_p3;
wire   [7:0] window_val_2_2_41_fu_860_p3;
wire   [7:0] window_val_2_2_34_fu_758_p3;
wire   [7:0] window_val_2_2_43_fu_874_p3;
wire   [7:0] window_val_1_1_3_fu_814_p3;
wire   [7:0] window_val_1_1_4_fu_888_p3;
wire   [7:0] window_val_2_2_39_fu_830_p3;
wire   [7:0] window_val_2_2_45_fu_902_p3;
wire   [7:0] window_val_2_2_40_fu_838_p3;
wire   [7:0] window_val_2_2_47_fu_916_p3;
wire   [7:0] window_val_0_1_3_fu_774_p3;
wire   [7:0] window_val_2_2_36_fu_790_p3;
wire   [7:0] window_val_2_2_37_fu_798_p3;
wire   [7:0] window_val_2_1_6_fu_853_p3;
wire   [7:0] window_val_2_1_1_fu_642_p3;
wire   [7:0] window_val_2_2_42_fu_867_p3;
wire   [7:0] window_val_2_0_1_fu_650_p3;
wire   [7:0] window_val_2_2_44_fu_881_p3;
wire   [7:0] window_val_2_2_13_fu_658_p3;
wire   [7:0] window_val_1_1_5_fu_895_p3;
wire   [7:0] window_val_1_2_1_fu_666_p3;
wire   [7:0] window_val_2_2_46_fu_909_p3;
wire   [7:0] window_val_1_0_1_fu_674_p3;
wire   [7:0] window_val_2_2_48_fu_923_p3;
wire   [7:0] window_val_2_2_17_fu_682_p3;
wire   [7:0] window_val_0_1_4_fu_930_p3;
wire   [7:0] window_val_0_2_1_fu_690_p3;
wire   [7:0] window_val_2_2_49_fu_937_p3;
wire   [7:0] window_val_0_0_fu_698_p3;
wire   [7:0] window_val_2_2_50_fu_944_p3;
wire   [7:0] window_val_2_2_27_fu_706_p3;
wire   [0:0] icmp_ln52_fu_1014_p2;
wire   [0:0] icmp_ln52_1_fu_1020_p2;
wire   [1:0] trunc_ln68_fu_1044_p1;
wire   [1:0] add_ln68_2_fu_1058_p2;
wire   [0:0] abscond_fu_1074_p2;
wire   [31:0] neg_fu_1068_p2;
wire   [0:0] abscond199_fu_1094_p2;
wire   [31:0] neg198_fu_1088_p2;
wire   [31:0] abs_fu_1080_p3;
wire   [31:0] abs200_fu_1100_p3;
wire   [9:0] tmp_2_fu_1114_p4;
wire   [31:0] result_fu_1108_p2;
wire   [23:0] tmp_4_fu_1130_p4;
wire   [0:0] icmp_ln80_fu_1124_p2;
wire   [0:0] xor_ln80_fu_1150_p2;
wire   [0:0] icmp_ln82_fu_1140_p2;
wire   [0:0] or_ln80_fu_1164_p2;
wire   [7:0] select_ln80_fu_1156_p3;
wire   [7:0] empty_12_fu_1146_p1;
wire   [4:0] tmp_3_fu_1199_p3;
wire   [4:0] zext_ln69_fu_1195_p1;
wire   [4:0] sub_ln69_fu_1207_p2;
wire   [4:0] add_ln69_fu_1213_p2;
wire   [1:0] trunc_ln68_1_fu_1185_p1;
wire   [1:0] add_ln493_fu_1224_p2;
wire   [3:0] shl_ln_fu_1234_p3;
wire   [3:0] zext_ln68_fu_1230_p1;
wire   [3:0] sub_ln68_fu_1242_p2;
wire   [3:0] tmp_1_fu_1253_p10;
wire   [7:0] grp_fu_1374_p1;
wire   [11:0] zext_ln69_1_fu_1268_p1;
wire   [7:0] grp_fu_1382_p1;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 INPUT_IMAGE_V_data_V_0_sel_rd = 1'b0;
#0 INPUT_IMAGE_V_data_V_0_sel_wr = 1'b0;
#0 INPUT_IMAGE_V_data_V_0_state = 2'd0;
#0 INPUT_IMAGE_V_keep_V_0_sel_rd = 1'b0;
#0 INPUT_IMAGE_V_keep_V_0_sel_wr = 1'b0;
#0 INPUT_IMAGE_V_keep_V_0_state = 2'd0;
#0 INPUT_IMAGE_V_strb_V_0_sel_rd = 1'b0;
#0 INPUT_IMAGE_V_strb_V_0_sel_wr = 1'b0;
#0 INPUT_IMAGE_V_strb_V_0_state = 2'd0;
#0 INPUT_IMAGE_V_user_V_0_sel_rd = 1'b0;
#0 INPUT_IMAGE_V_user_V_0_sel_wr = 1'b0;
#0 INPUT_IMAGE_V_user_V_0_state = 2'd0;
#0 INPUT_IMAGE_V_id_V_0_sel_rd = 1'b0;
#0 INPUT_IMAGE_V_id_V_0_sel_wr = 1'b0;
#0 INPUT_IMAGE_V_id_V_0_state = 2'd0;
#0 INPUT_IMAGE_V_dest_V_0_sel_rd = 1'b0;
#0 INPUT_IMAGE_V_dest_V_0_sel_wr = 1'b0;
#0 INPUT_IMAGE_V_dest_V_0_state = 2'd0;
#0 OUTPUT_IMAGE_V_data_V_1_sel_rd = 1'b0;
#0 OUTPUT_IMAGE_V_data_V_1_sel_wr = 1'b0;
#0 OUTPUT_IMAGE_V_data_V_1_state = 2'd0;
#0 OUTPUT_IMAGE_V_keep_V_1_sel_rd = 1'b0;
#0 OUTPUT_IMAGE_V_keep_V_1_sel_wr = 1'b0;
#0 OUTPUT_IMAGE_V_keep_V_1_state = 2'd0;
#0 OUTPUT_IMAGE_V_strb_V_1_sel_rd = 1'b0;
#0 OUTPUT_IMAGE_V_strb_V_1_sel_wr = 1'b0;
#0 OUTPUT_IMAGE_V_strb_V_1_state = 2'd0;
#0 OUTPUT_IMAGE_V_user_V_1_sel_rd = 1'b0;
#0 OUTPUT_IMAGE_V_user_V_1_sel_wr = 1'b0;
#0 OUTPUT_IMAGE_V_user_V_1_state = 2'd0;
#0 OUTPUT_IMAGE_V_last_V_1_sel_rd = 1'b0;
#0 OUTPUT_IMAGE_V_last_V_1_sel_wr = 1'b0;
#0 OUTPUT_IMAGE_V_last_V_1_state = 2'd0;
#0 OUTPUT_IMAGE_V_id_V_1_sel_rd = 1'b0;
#0 OUTPUT_IMAGE_V_id_V_1_sel_wr = 1'b0;
#0 OUTPUT_IMAGE_V_id_V_1_state = 2'd0;
#0 OUTPUT_IMAGE_V_dest_V_1_sel_rd = 1'b0;
#0 OUTPUT_IMAGE_V_dest_V_1_sel_wr = 1'b0;
#0 OUTPUT_IMAGE_V_dest_V_1_state = 2'd0;
end

sobel_filter_Gx #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
Gx_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Gx_address0),
    .ce0(Gx_ce0),
    .q0(Gx_q0)
);

sobel_filter_Gy #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
Gy_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Gy_address0),
    .ce0(Gy_ce0),
    .q0(Gy_q0)
);

sobel_filter_ctrl_bus_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
sobel_filter_ctrl_bus_s_axi_U(
    .AWVALID(s_axi_ctrl_bus_AWVALID),
    .AWREADY(s_axi_ctrl_bus_AWREADY),
    .AWADDR(s_axi_ctrl_bus_AWADDR),
    .WVALID(s_axi_ctrl_bus_WVALID),
    .WREADY(s_axi_ctrl_bus_WREADY),
    .WDATA(s_axi_ctrl_bus_WDATA),
    .WSTRB(s_axi_ctrl_bus_WSTRB),
    .ARVALID(s_axi_ctrl_bus_ARVALID),
    .ARREADY(s_axi_ctrl_bus_ARREADY),
    .ARADDR(s_axi_ctrl_bus_ARADDR),
    .RVALID(s_axi_ctrl_bus_RVALID),
    .RREADY(s_axi_ctrl_bus_RREADY),
    .RDATA(s_axi_ctrl_bus_RDATA),
    .RRESP(s_axi_ctrl_bus_RRESP),
    .BVALID(s_axi_ctrl_bus_BVALID),
    .BREADY(s_axi_ctrl_bus_BREADY),
    .BRESP(s_axi_ctrl_bus_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

sobel_filter_pixebkb #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
pixelbuffer_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(pixelbuffer_val_1_address0),
    .ce0(pixelbuffer_val_1_ce0),
    .we0(pixelbuffer_val_1_we0),
    .d0(pixelbuffer_val_2_q0),
    .q0(pixelbuffer_val_1_q0)
);

sobel_filter_pixebkb #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
pixelbuffer_val_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(pixelbuffer_val_2_address0),
    .ce0(pixelbuffer_val_2_ce0),
    .we0(pixelbuffer_val_2_we0),
    .d0(INPUT_IMAGE_V_data_V_0_data_out),
    .q0(pixelbuffer_val_2_q0)
);

sobel_filter_mux_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
sobel_filter_mux_dEe_U1(
    .din0(window_val_2_2_53_reg_1647),
    .din1(select_ln41_6_reg_1641),
    .din2(select_ln41_5_reg_1635),
    .din3(window_val_2_2_52_reg_1629),
    .din4(select_ln41_3_reg_1623),
    .din5(select_ln41_2_reg_1617),
    .din6(window_val_2_2_51_reg_1611),
    .din7(select_ln41_reg_1605),
    .din8(window_val_2_1_7_reg_1599),
    .din9(tmp_1_fu_1253_p10),
    .dout(tmp_1_fu_1253_p11)
);

sobel_filter_mac_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sobel_filter_mac_eOg_U2(
    .din0(Gx_q0),
    .din1(grp_fu_1374_p1),
    .din2(x_dir_1_reg_436),
    .dout(grp_fu_1374_p3)
);

sobel_filter_mac_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sobel_filter_mac_eOg_U3(
    .din0(Gy_q0),
    .din1(grp_fu_1382_p1),
    .din2(y_dir_1_reg_448),
    .dout(grp_fu_1382_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_IMAGE_V_data_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_data_V_0_vld_out))) begin
            INPUT_IMAGE_V_data_V_0_sel_rd <= ~INPUT_IMAGE_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_IMAGE_V_data_V_0_ack_in) & (1'b1 == INPUT_IMAGE_V_data_V_0_vld_in))) begin
            INPUT_IMAGE_V_data_V_0_sel_wr <= ~INPUT_IMAGE_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_IMAGE_V_data_V_0_state) & (1'b0 == INPUT_IMAGE_V_data_V_0_vld_in)) | ((2'd3 == INPUT_IMAGE_V_data_V_0_state) & (1'b0 == INPUT_IMAGE_V_data_V_0_vld_in) & (1'b1 == INPUT_IMAGE_V_data_V_0_ack_out)))) begin
            INPUT_IMAGE_V_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_IMAGE_V_data_V_0_state) & (1'b0 == INPUT_IMAGE_V_data_V_0_ack_out)) | ((2'd3 == INPUT_IMAGE_V_data_V_0_state) & (1'b0 == INPUT_IMAGE_V_data_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_data_V_0_vld_in)))) begin
            INPUT_IMAGE_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_in) & (1'b1 == INPUT_IMAGE_V_data_V_0_ack_out)) & ~((1'b0 == INPUT_IMAGE_V_data_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_data_V_0_vld_in)) & (2'd3 == INPUT_IMAGE_V_data_V_0_state)) | ((2'd1 == INPUT_IMAGE_V_data_V_0_state) & (1'b1 == INPUT_IMAGE_V_data_V_0_ack_out)) | ((2'd2 == INPUT_IMAGE_V_data_V_0_state) & (1'b1 == INPUT_IMAGE_V_data_V_0_vld_in)))) begin
            INPUT_IMAGE_V_data_V_0_state <= 2'd3;
        end else begin
            INPUT_IMAGE_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_IMAGE_V_dest_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_dest_V_0_vld_out))) begin
            INPUT_IMAGE_V_dest_V_0_sel_rd <= ~INPUT_IMAGE_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_IMAGE_V_dest_V_0_ack_in) & (1'b1 == INPUT_IMAGE_V_dest_V_0_vld_in))) begin
            INPUT_IMAGE_V_dest_V_0_sel_wr <= ~INPUT_IMAGE_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_IMAGE_V_dest_V_0_state) & (1'b0 == INPUT_IMAGE_V_dest_V_0_vld_in)) | ((2'd3 == INPUT_IMAGE_V_dest_V_0_state) & (1'b0 == INPUT_IMAGE_V_dest_V_0_vld_in) & (1'b1 == INPUT_IMAGE_V_dest_V_0_ack_out)))) begin
            INPUT_IMAGE_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_IMAGE_V_dest_V_0_state) & (1'b0 == INPUT_IMAGE_V_dest_V_0_ack_out)) | ((2'd3 == INPUT_IMAGE_V_dest_V_0_state) & (1'b0 == INPUT_IMAGE_V_dest_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_dest_V_0_vld_in)))) begin
            INPUT_IMAGE_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_IMAGE_V_dest_V_0_vld_in) & (1'b1 == INPUT_IMAGE_V_dest_V_0_ack_out)) & ~((1'b0 == INPUT_IMAGE_V_dest_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_dest_V_0_vld_in)) & (2'd3 == INPUT_IMAGE_V_dest_V_0_state)) | ((2'd1 == INPUT_IMAGE_V_dest_V_0_state) & (1'b1 == INPUT_IMAGE_V_dest_V_0_ack_out)) | ((2'd2 == INPUT_IMAGE_V_dest_V_0_state) & (1'b1 == INPUT_IMAGE_V_dest_V_0_vld_in)))) begin
            INPUT_IMAGE_V_dest_V_0_state <= 2'd3;
        end else begin
            INPUT_IMAGE_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_IMAGE_V_id_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_id_V_0_vld_out))) begin
            INPUT_IMAGE_V_id_V_0_sel_rd <= ~INPUT_IMAGE_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_IMAGE_V_id_V_0_ack_in) & (1'b1 == INPUT_IMAGE_V_id_V_0_vld_in))) begin
            INPUT_IMAGE_V_id_V_0_sel_wr <= ~INPUT_IMAGE_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_IMAGE_V_id_V_0_state) & (1'b0 == INPUT_IMAGE_V_id_V_0_vld_in)) | ((2'd3 == INPUT_IMAGE_V_id_V_0_state) & (1'b0 == INPUT_IMAGE_V_id_V_0_vld_in) & (1'b1 == INPUT_IMAGE_V_id_V_0_ack_out)))) begin
            INPUT_IMAGE_V_id_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_IMAGE_V_id_V_0_state) & (1'b0 == INPUT_IMAGE_V_id_V_0_ack_out)) | ((2'd3 == INPUT_IMAGE_V_id_V_0_state) & (1'b0 == INPUT_IMAGE_V_id_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_id_V_0_vld_in)))) begin
            INPUT_IMAGE_V_id_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_IMAGE_V_id_V_0_vld_in) & (1'b1 == INPUT_IMAGE_V_id_V_0_ack_out)) & ~((1'b0 == INPUT_IMAGE_V_id_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_id_V_0_vld_in)) & (2'd3 == INPUT_IMAGE_V_id_V_0_state)) | ((2'd1 == INPUT_IMAGE_V_id_V_0_state) & (1'b1 == INPUT_IMAGE_V_id_V_0_ack_out)) | ((2'd2 == INPUT_IMAGE_V_id_V_0_state) & (1'b1 == INPUT_IMAGE_V_id_V_0_vld_in)))) begin
            INPUT_IMAGE_V_id_V_0_state <= 2'd3;
        end else begin
            INPUT_IMAGE_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_IMAGE_V_keep_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_keep_V_0_vld_out))) begin
            INPUT_IMAGE_V_keep_V_0_sel_rd <= ~INPUT_IMAGE_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_IMAGE_V_keep_V_0_ack_in) & (1'b1 == INPUT_IMAGE_V_keep_V_0_vld_in))) begin
            INPUT_IMAGE_V_keep_V_0_sel_wr <= ~INPUT_IMAGE_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_IMAGE_V_keep_V_0_state) & (1'b0 == INPUT_IMAGE_V_keep_V_0_vld_in)) | ((2'd3 == INPUT_IMAGE_V_keep_V_0_state) & (1'b0 == INPUT_IMAGE_V_keep_V_0_vld_in) & (1'b1 == INPUT_IMAGE_V_keep_V_0_ack_out)))) begin
            INPUT_IMAGE_V_keep_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_IMAGE_V_keep_V_0_state) & (1'b0 == INPUT_IMAGE_V_keep_V_0_ack_out)) | ((2'd3 == INPUT_IMAGE_V_keep_V_0_state) & (1'b0 == INPUT_IMAGE_V_keep_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_keep_V_0_vld_in)))) begin
            INPUT_IMAGE_V_keep_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_IMAGE_V_keep_V_0_vld_in) & (1'b1 == INPUT_IMAGE_V_keep_V_0_ack_out)) & ~((1'b0 == INPUT_IMAGE_V_keep_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_keep_V_0_vld_in)) & (2'd3 == INPUT_IMAGE_V_keep_V_0_state)) | ((2'd1 == INPUT_IMAGE_V_keep_V_0_state) & (1'b1 == INPUT_IMAGE_V_keep_V_0_ack_out)) | ((2'd2 == INPUT_IMAGE_V_keep_V_0_state) & (1'b1 == INPUT_IMAGE_V_keep_V_0_vld_in)))) begin
            INPUT_IMAGE_V_keep_V_0_state <= 2'd3;
        end else begin
            INPUT_IMAGE_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_IMAGE_V_strb_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_strb_V_0_vld_out))) begin
            INPUT_IMAGE_V_strb_V_0_sel_rd <= ~INPUT_IMAGE_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_IMAGE_V_strb_V_0_ack_in) & (1'b1 == INPUT_IMAGE_V_strb_V_0_vld_in))) begin
            INPUT_IMAGE_V_strb_V_0_sel_wr <= ~INPUT_IMAGE_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_IMAGE_V_strb_V_0_state) & (1'b0 == INPUT_IMAGE_V_strb_V_0_vld_in)) | ((2'd3 == INPUT_IMAGE_V_strb_V_0_state) & (1'b0 == INPUT_IMAGE_V_strb_V_0_vld_in) & (1'b1 == INPUT_IMAGE_V_strb_V_0_ack_out)))) begin
            INPUT_IMAGE_V_strb_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_IMAGE_V_strb_V_0_state) & (1'b0 == INPUT_IMAGE_V_strb_V_0_ack_out)) | ((2'd3 == INPUT_IMAGE_V_strb_V_0_state) & (1'b0 == INPUT_IMAGE_V_strb_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_strb_V_0_vld_in)))) begin
            INPUT_IMAGE_V_strb_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_IMAGE_V_strb_V_0_vld_in) & (1'b1 == INPUT_IMAGE_V_strb_V_0_ack_out)) & ~((1'b0 == INPUT_IMAGE_V_strb_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_strb_V_0_vld_in)) & (2'd3 == INPUT_IMAGE_V_strb_V_0_state)) | ((2'd1 == INPUT_IMAGE_V_strb_V_0_state) & (1'b1 == INPUT_IMAGE_V_strb_V_0_ack_out)) | ((2'd2 == INPUT_IMAGE_V_strb_V_0_state) & (1'b1 == INPUT_IMAGE_V_strb_V_0_vld_in)))) begin
            INPUT_IMAGE_V_strb_V_0_state <= 2'd3;
        end else begin
            INPUT_IMAGE_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_IMAGE_V_user_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_user_V_0_vld_out))) begin
            INPUT_IMAGE_V_user_V_0_sel_rd <= ~INPUT_IMAGE_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_IMAGE_V_user_V_0_ack_in) & (1'b1 == INPUT_IMAGE_V_user_V_0_vld_in))) begin
            INPUT_IMAGE_V_user_V_0_sel_wr <= ~INPUT_IMAGE_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_IMAGE_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_IMAGE_V_user_V_0_state) & (1'b0 == INPUT_IMAGE_V_user_V_0_vld_in)) | ((2'd3 == INPUT_IMAGE_V_user_V_0_state) & (1'b0 == INPUT_IMAGE_V_user_V_0_vld_in) & (1'b1 == INPUT_IMAGE_V_user_V_0_ack_out)))) begin
            INPUT_IMAGE_V_user_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_IMAGE_V_user_V_0_state) & (1'b0 == INPUT_IMAGE_V_user_V_0_ack_out)) | ((2'd3 == INPUT_IMAGE_V_user_V_0_state) & (1'b0 == INPUT_IMAGE_V_user_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_user_V_0_vld_in)))) begin
            INPUT_IMAGE_V_user_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_IMAGE_V_user_V_0_vld_in) & (1'b1 == INPUT_IMAGE_V_user_V_0_ack_out)) & ~((1'b0 == INPUT_IMAGE_V_user_V_0_ack_out) & (1'b1 == INPUT_IMAGE_V_user_V_0_vld_in)) & (2'd3 == INPUT_IMAGE_V_user_V_0_state)) | ((2'd1 == INPUT_IMAGE_V_user_V_0_state) & (1'b1 == INPUT_IMAGE_V_user_V_0_ack_out)) | ((2'd2 == INPUT_IMAGE_V_user_V_0_state) & (1'b1 == INPUT_IMAGE_V_user_V_0_vld_in)))) begin
            INPUT_IMAGE_V_user_V_0_state <= 2'd3;
        end else begin
            INPUT_IMAGE_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_data_V_1_ack_out) & (1'b1 == OUTPUT_IMAGE_V_data_V_1_vld_out))) begin
            OUTPUT_IMAGE_V_data_V_1_sel_rd <= ~OUTPUT_IMAGE_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_data_V_1_ack_in) & (1'b1 == OUTPUT_IMAGE_V_data_V_1_vld_in))) begin
            OUTPUT_IMAGE_V_data_V_1_sel_wr <= ~OUTPUT_IMAGE_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_data_V_1_vld_in)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_data_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_data_V_1_ack_out)))) begin
            OUTPUT_IMAGE_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_data_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_IMAGE_V_data_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_data_V_1_ack_out)) & ~((1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_data_V_1_vld_in)) & (2'd3 == OUTPUT_IMAGE_V_data_V_1_state)) | ((2'd1 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_data_V_1_ack_out)) | ((2'd2 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_data_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_data_V_1_state <= 2'd3;
        end else begin
            OUTPUT_IMAGE_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_dest_V_1_ack_out) & (1'b1 == OUTPUT_IMAGE_V_dest_V_1_vld_out))) begin
            OUTPUT_IMAGE_V_dest_V_1_sel_rd <= ~OUTPUT_IMAGE_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_dest_V_1_ack_in) & (1'b1 == OUTPUT_IMAGE_V_dest_V_1_vld_in))) begin
            OUTPUT_IMAGE_V_dest_V_1_sel_wr <= ~OUTPUT_IMAGE_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_dest_V_1_vld_in)) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_dest_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_dest_V_1_ack_out)))) begin
            OUTPUT_IMAGE_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_dest_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_IMAGE_V_dest_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_dest_V_1_ack_out)) & ~((1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_dest_V_1_vld_in)) & (2'd3 == OUTPUT_IMAGE_V_dest_V_1_state)) | ((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_dest_V_1_ack_out)) | ((2'd2 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_dest_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_dest_V_1_state <= 2'd3;
        end else begin
            OUTPUT_IMAGE_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_id_V_1_ack_out) & (1'b1 == OUTPUT_IMAGE_V_id_V_1_vld_out))) begin
            OUTPUT_IMAGE_V_id_V_1_sel_rd <= ~OUTPUT_IMAGE_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_id_V_1_ack_in) & (1'b1 == OUTPUT_IMAGE_V_id_V_1_vld_in))) begin
            OUTPUT_IMAGE_V_id_V_1_sel_wr <= ~OUTPUT_IMAGE_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_id_V_1_vld_in)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_id_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_id_V_1_ack_out)))) begin
            OUTPUT_IMAGE_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_id_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_IMAGE_V_id_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_id_V_1_ack_out)) & ~((1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_id_V_1_vld_in)) & (2'd3 == OUTPUT_IMAGE_V_id_V_1_state)) | ((2'd1 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_id_V_1_ack_out)) | ((2'd2 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_id_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_id_V_1_state <= 2'd3;
        end else begin
            OUTPUT_IMAGE_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_keep_V_1_ack_out) & (1'b1 == OUTPUT_IMAGE_V_keep_V_1_vld_out))) begin
            OUTPUT_IMAGE_V_keep_V_1_sel_rd <= ~OUTPUT_IMAGE_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_keep_V_1_ack_in) & (1'b1 == OUTPUT_IMAGE_V_keep_V_1_vld_in))) begin
            OUTPUT_IMAGE_V_keep_V_1_sel_wr <= ~OUTPUT_IMAGE_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_keep_V_1_vld_in)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_keep_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_keep_V_1_ack_out)))) begin
            OUTPUT_IMAGE_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_keep_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_IMAGE_V_keep_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_keep_V_1_ack_out)) & ~((1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_keep_V_1_vld_in)) & (2'd3 == OUTPUT_IMAGE_V_keep_V_1_state)) | ((2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_keep_V_1_ack_out)) | ((2'd2 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_keep_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_keep_V_1_state <= 2'd3;
        end else begin
            OUTPUT_IMAGE_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_last_V_1_ack_out) & (1'b1 == OUTPUT_IMAGE_V_last_V_1_vld_out))) begin
            OUTPUT_IMAGE_V_last_V_1_sel_rd <= ~OUTPUT_IMAGE_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_last_V_1_ack_in) & (1'b1 == OUTPUT_IMAGE_V_last_V_1_vld_in))) begin
            OUTPUT_IMAGE_V_last_V_1_sel_wr <= ~OUTPUT_IMAGE_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_last_V_1_vld_in)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_last_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_last_V_1_ack_out)))) begin
            OUTPUT_IMAGE_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_last_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_IMAGE_V_last_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_last_V_1_ack_out)) & ~((1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_last_V_1_vld_in)) & (2'd3 == OUTPUT_IMAGE_V_last_V_1_state)) | ((2'd1 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_last_V_1_ack_out)) | ((2'd2 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_last_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_last_V_1_state <= 2'd3;
        end else begin
            OUTPUT_IMAGE_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_strb_V_1_ack_out) & (1'b1 == OUTPUT_IMAGE_V_strb_V_1_vld_out))) begin
            OUTPUT_IMAGE_V_strb_V_1_sel_rd <= ~OUTPUT_IMAGE_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_strb_V_1_ack_in) & (1'b1 == OUTPUT_IMAGE_V_strb_V_1_vld_in))) begin
            OUTPUT_IMAGE_V_strb_V_1_sel_wr <= ~OUTPUT_IMAGE_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_strb_V_1_vld_in)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_strb_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_strb_V_1_ack_out)))) begin
            OUTPUT_IMAGE_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_strb_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_IMAGE_V_strb_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_strb_V_1_ack_out)) & ~((1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_strb_V_1_vld_in)) & (2'd3 == OUTPUT_IMAGE_V_strb_V_1_state)) | ((2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_strb_V_1_ack_out)) | ((2'd2 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_strb_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_strb_V_1_state <= 2'd3;
        end else begin
            OUTPUT_IMAGE_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_user_V_1_ack_out) & (1'b1 == OUTPUT_IMAGE_V_user_V_1_vld_out))) begin
            OUTPUT_IMAGE_V_user_V_1_sel_rd <= ~OUTPUT_IMAGE_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_IMAGE_V_user_V_1_ack_in) & (1'b1 == OUTPUT_IMAGE_V_user_V_1_vld_in))) begin
            OUTPUT_IMAGE_V_user_V_1_sel_wr <= ~OUTPUT_IMAGE_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_IMAGE_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_user_V_1_vld_in)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_V_user_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_user_V_1_ack_out)))) begin
            OUTPUT_IMAGE_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_user_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_IMAGE_V_user_V_1_vld_in) & (1'b1 == OUTPUT_IMAGE_V_user_V_1_ack_out)) & ~((1'b0 == OUTPUT_IMAGE_TREADY) & (1'b1 == OUTPUT_IMAGE_V_user_V_1_vld_in)) & (2'd3 == OUTPUT_IMAGE_V_user_V_1_state)) | ((2'd1 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_user_V_1_ack_out)) | ((2'd2 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b1 == OUTPUT_IMAGE_V_user_V_1_vld_in)))) begin
            OUTPUT_IMAGE_V_user_V_1_state <= 2'd3;
        end else begin
            OUTPUT_IMAGE_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (icmp_ln61_fu_1032_p2 == 1'd1) & (1'd0 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        colOffset_0_reg_390 <= 3'd7;
    end else if (((icmp_ln67_fu_1179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        colOffset_0_reg_390 <= colOffset_reg_1664;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_io))) begin
        col_assign_reg_367 <= j_reg_1536;
    end else if (((icmp_ln30_fu_495_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_assign_reg_367 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_495_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        counter_0_reg_333 <= counter_reg_1482;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        counter_0_reg_333 <= 21'd2097151;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        counter_1_reg_345 <= add_ln34_reg_1500;
    end else if (((icmp_ln29_fu_471_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        counter_1_reg_345 <= counter_0_reg_333;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_io))) begin
        counter_2_reg_379 <= add_ln34_1_reg_1564;
    end else if (((icmp_ln30_fu_495_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        counter_2_reg_379 <= counter_1_reg_345;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_495_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_322 <= i_2_reg_1477;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_322 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_460 <= 11'd0;
    end else if (((1'b1 == OUTPUT_IMAGE_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state12))) begin
        i_1_reg_460 <= i_reg_1720;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_1038_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io))) begin
        rowOffset_0_reg_425 <= 3'd7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        rowOffset_0_reg_425 <= rowOffset_reg_1687;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        row_assign_reg_356 <= k_reg_1495;
    end else if (((icmp_ln29_fu_471_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_assign_reg_356 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (icmp_ln61_fu_1032_p2 == 1'd1) & (1'd0 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        x_dir_0_reg_401 <= 32'd0;
    end else if (((icmp_ln67_fu_1179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        x_dir_0_reg_401 <= x_dir_1_reg_436;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_1038_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io))) begin
        x_dir_1_reg_436 <= x_dir_0_reg_401;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        x_dir_1_reg_436 <= grp_fu_1374_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (icmp_ln61_fu_1032_p2 == 1'd1) & (1'd0 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        y_dir_0_reg_413 <= 32'd0;
    end else if (((icmp_ln67_fu_1179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        y_dir_0_reg_413 <= y_dir_1_reg_448;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_1038_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io))) begin
        y_dir_1_reg_448 <= y_dir_0_reg_413;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        y_dir_1_reg_448 <= grp_fu_1382_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_IMAGE_V_data_V_0_load_A)) begin
        INPUT_IMAGE_V_data_V_0_payload_A <= INPUT_IMAGE_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_IMAGE_V_data_V_0_load_B)) begin
        INPUT_IMAGE_V_data_V_0_payload_B <= INPUT_IMAGE_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_IMAGE_V_dest_V_0_load_A)) begin
        INPUT_IMAGE_V_dest_V_0_payload_A <= INPUT_IMAGE_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_IMAGE_V_dest_V_0_load_B)) begin
        INPUT_IMAGE_V_dest_V_0_payload_B <= INPUT_IMAGE_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_IMAGE_V_id_V_0_load_A)) begin
        INPUT_IMAGE_V_id_V_0_payload_A <= INPUT_IMAGE_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_IMAGE_V_id_V_0_load_B)) begin
        INPUT_IMAGE_V_id_V_0_payload_B <= INPUT_IMAGE_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_IMAGE_V_keep_V_0_load_A)) begin
        INPUT_IMAGE_V_keep_V_0_payload_A <= INPUT_IMAGE_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_IMAGE_V_keep_V_0_load_B)) begin
        INPUT_IMAGE_V_keep_V_0_payload_B <= INPUT_IMAGE_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_IMAGE_V_strb_V_0_load_A)) begin
        INPUT_IMAGE_V_strb_V_0_payload_A <= INPUT_IMAGE_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_IMAGE_V_strb_V_0_load_B)) begin
        INPUT_IMAGE_V_strb_V_0_payload_B <= INPUT_IMAGE_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_IMAGE_V_user_V_0_load_A)) begin
        INPUT_IMAGE_V_user_V_0_payload_A <= INPUT_IMAGE_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_IMAGE_V_user_V_0_load_B)) begin
        INPUT_IMAGE_V_user_V_0_payload_B <= INPUT_IMAGE_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_data_V_1_load_A)) begin
        OUTPUT_IMAGE_V_data_V_1_payload_A <= OUTPUT_IMAGE_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_data_V_1_load_B)) begin
        OUTPUT_IMAGE_V_data_V_1_payload_B <= OUTPUT_IMAGE_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_dest_V_1_load_A)) begin
        OUTPUT_IMAGE_V_dest_V_1_payload_A <= OUTPUT_IMAGE_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_dest_V_1_load_B)) begin
        OUTPUT_IMAGE_V_dest_V_1_payload_B <= OUTPUT_IMAGE_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_id_V_1_load_A)) begin
        OUTPUT_IMAGE_V_id_V_1_payload_A <= OUTPUT_IMAGE_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_id_V_1_load_B)) begin
        OUTPUT_IMAGE_V_id_V_1_payload_B <= OUTPUT_IMAGE_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_keep_V_1_load_A)) begin
        OUTPUT_IMAGE_V_keep_V_1_payload_A <= OUTPUT_IMAGE_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_keep_V_1_load_B)) begin
        OUTPUT_IMAGE_V_keep_V_1_payload_B <= OUTPUT_IMAGE_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_last_V_1_load_A)) begin
        OUTPUT_IMAGE_V_last_V_1_payload_A <= OUTPUT_IMAGE_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_last_V_1_load_B)) begin
        OUTPUT_IMAGE_V_last_V_1_payload_B <= OUTPUT_IMAGE_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_strb_V_1_load_A)) begin
        OUTPUT_IMAGE_V_strb_V_1_payload_A <= OUTPUT_IMAGE_V_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_strb_V_1_load_B)) begin
        OUTPUT_IMAGE_V_strb_V_1_payload_B <= OUTPUT_IMAGE_V_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_user_V_1_load_A)) begin
        OUTPUT_IMAGE_V_user_V_1_payload_A <= OUTPUT_IMAGE_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_IMAGE_V_user_V_1_load_B)) begin
        OUTPUT_IMAGE_V_user_V_1_payload_B <= OUTPUT_IMAGE_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln34_1_reg_1564 <= add_ln34_1_fu_596_p2;
        and_ln52_reg_1653 <= and_ln52_fu_1026_p2;
        select_ln41_2_reg_1617 <= select_ln41_2_fu_972_p3;
        select_ln41_3_reg_1623 <= select_ln41_3_fu_979_p3;
        select_ln41_5_reg_1635 <= select_ln41_5_fu_993_p3;
        select_ln41_6_reg_1641 <= select_ln41_6_fu_1000_p3;
        select_ln41_reg_1605 <= select_ln41_fu_958_p3;
        tmp_dest_V_3_reg_1593 <= INPUT_IMAGE_V_dest_V_0_data_out;
        tmp_id_V_3_reg_1587 <= INPUT_IMAGE_V_id_V_0_data_out;
        tmp_keep_V_3_reg_1569 <= INPUT_IMAGE_V_keep_V_0_data_out;
        tmp_strb_V_3_reg_1575 <= INPUT_IMAGE_V_strb_V_0_data_out;
        tmp_user_V_3_reg_1581 <= INPUT_IMAGE_V_user_V_0_data_out;
        window_val_2_1_7_reg_1599 <= window_val_2_1_7_fu_951_p3;
        window_val_2_2_51_reg_1611 <= window_val_2_2_51_fu_965_p3;
        window_val_2_2_52_reg_1629 <= window_val_2_2_52_fu_986_p3;
        window_val_2_2_53_reg_1647 <= window_val_2_2_53_fu_1007_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_495_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln34_reg_1500 <= add_ln34_fu_507_p2;
        icmp_ln274_2_reg_1510 <= icmp_ln274_2_fu_523_p2;
        icmp_ln274_3_reg_1520 <= icmp_ln274_3_fu_529_p2;
        icmp_ln41_1_reg_1505 <= icmp_ln41_1_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_535_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        and_ln41_1_reg_1551 <= and_ln41_1_fu_564_p2;
        pixelbuffer_val_1_a_reg_1541 <= zext_ln729_fu_547_p1;
        pixelbuffer_val_2_a_reg_1546 <= zext_ln729_fu_547_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_1038_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io))) begin
        colOffset_reg_1664 <= colOffset_fu_1048_p2;
        zext_ln68_1_reg_1674[1 : 0] <= zext_ln68_1_fu_1064_p1[1 : 0];
        zext_ln68_2_reg_1669[2 : 0] <= zext_ln68_2_fu_1054_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_471_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        counter_reg_1482 <= counter_fu_483_p2;
        icmp_ln41_reg_1487 <= icmp_ln41_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_1477 <= i_2_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | (1'b1 == ap_block_state11_io) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (1'b1 == ap_CS_fsm_state11))) begin
        i_reg_1720 <= i_fu_1341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'd0 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        icmp_ln61_reg_1657 <= icmp_ln61_fu_1032_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_1536 <= j_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_1495 <= k_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_1179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        rowOffset_reg_1687 <= rowOffset_fu_1189_p2;
        tmp_1_reg_1702 <= tmp_1_fu_1253_p11;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_io))) begin
        tmp_dest_V_fu_162 <= tmp_dest_V_3_reg_1593;
        tmp_id_V_fu_178 <= tmp_id_V_3_reg_1587;
        tmp_keep_V_fu_166 <= tmp_keep_V_3_reg_1569;
        tmp_strb_V_fu_170 <= tmp_strb_V_3_reg_1575;
        tmp_user_V_fu_174 <= tmp_user_V_3_reg_1581;
        window_val_0_1_fu_190 <= select_ln41_5_reg_1635;
        window_val_1_0_fu_198 <= select_ln41_3_reg_1623;
        window_val_1_1_fu_202 <= select_ln41_2_reg_1617;
        window_val_2_0_fu_210 <= select_ln41_reg_1605;
        window_val_2_1_fu_214 <= window_val_2_1_7_reg_1599;
        window_val_2_2_1_fu_182 <= window_val_2_2_53_reg_1647;
        window_val_2_2_2_fu_186 <= select_ln41_6_reg_1641;
        window_val_2_2_3_fu_194 <= window_val_2_2_52_reg_1629;
        window_val_2_2_4_fu_206 <= window_val_2_2_51_reg_1611;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Gx_ce0 = 1'b1;
    end else begin
        Gx_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Gy_ce0 = 1'b1;
    end else begin
        Gy_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        INPUT_IMAGE_TDATA_blk_n = INPUT_IMAGE_V_data_V_0_state[1'd0];
    end else begin
        INPUT_IMAGE_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'b1 == ap_CS_fsm_state5))) begin
        INPUT_IMAGE_V_data_V_0_ack_out = 1'b1;
    end else begin
        INPUT_IMAGE_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_IMAGE_V_data_V_0_sel)) begin
        INPUT_IMAGE_V_data_V_0_data_out = INPUT_IMAGE_V_data_V_0_payload_B;
    end else begin
        INPUT_IMAGE_V_data_V_0_data_out = INPUT_IMAGE_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'b1 == ap_CS_fsm_state5))) begin
        INPUT_IMAGE_V_dest_V_0_ack_out = 1'b1;
    end else begin
        INPUT_IMAGE_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_IMAGE_V_dest_V_0_sel)) begin
        INPUT_IMAGE_V_dest_V_0_data_out = INPUT_IMAGE_V_dest_V_0_payload_B;
    end else begin
        INPUT_IMAGE_V_dest_V_0_data_out = INPUT_IMAGE_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'b1 == ap_CS_fsm_state5))) begin
        INPUT_IMAGE_V_id_V_0_ack_out = 1'b1;
    end else begin
        INPUT_IMAGE_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_IMAGE_V_id_V_0_sel)) begin
        INPUT_IMAGE_V_id_V_0_data_out = INPUT_IMAGE_V_id_V_0_payload_B;
    end else begin
        INPUT_IMAGE_V_id_V_0_data_out = INPUT_IMAGE_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'b1 == ap_CS_fsm_state5))) begin
        INPUT_IMAGE_V_keep_V_0_ack_out = 1'b1;
    end else begin
        INPUT_IMAGE_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_IMAGE_V_keep_V_0_sel)) begin
        INPUT_IMAGE_V_keep_V_0_data_out = INPUT_IMAGE_V_keep_V_0_payload_B;
    end else begin
        INPUT_IMAGE_V_keep_V_0_data_out = INPUT_IMAGE_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'b1 == ap_CS_fsm_state5))) begin
        INPUT_IMAGE_V_strb_V_0_ack_out = 1'b1;
    end else begin
        INPUT_IMAGE_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_IMAGE_V_strb_V_0_sel)) begin
        INPUT_IMAGE_V_strb_V_0_data_out = INPUT_IMAGE_V_strb_V_0_payload_B;
    end else begin
        INPUT_IMAGE_V_strb_V_0_data_out = INPUT_IMAGE_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'b1 == ap_CS_fsm_state5))) begin
        INPUT_IMAGE_V_user_V_0_ack_out = 1'b1;
    end else begin
        INPUT_IMAGE_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_IMAGE_V_user_V_0_sel)) begin
        INPUT_IMAGE_V_user_V_0_data_out = INPUT_IMAGE_V_user_V_0_payload_B;
    end else begin
        INPUT_IMAGE_V_user_V_0_data_out = INPUT_IMAGE_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | ((icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln61_reg_1657 == 1'd1) & (1'd0 == and_ln52_reg_1653) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((1'd1 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5)))) begin
        OUTPUT_IMAGE_TDATA_blk_n = OUTPUT_IMAGE_V_data_V_1_state[1'd1];
    end else begin
        OUTPUT_IMAGE_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        OUTPUT_IMAGE_V_data_V_1_data_in = tmp_data_V_fu_1170_p3;
    end else if (((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((1'd1 == and_ln52_fu_1026_p2) & (1'b1 == INPUT_IMAGE_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state5)))) begin
        OUTPUT_IMAGE_V_data_V_1_data_in = 8'd0;
    end else begin
        OUTPUT_IMAGE_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_IMAGE_V_data_V_1_sel)) begin
        OUTPUT_IMAGE_V_data_V_1_data_out = OUTPUT_IMAGE_V_data_V_1_payload_B;
    end else begin
        OUTPUT_IMAGE_V_data_V_1_data_out = OUTPUT_IMAGE_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | (1'b1 == ap_block_state11_io) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io)) | (~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'd1 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5)))) begin
        OUTPUT_IMAGE_V_data_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_IMAGE_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        OUTPUT_IMAGE_V_dest_V_1_data_in = tmp_dest_V_fu_162;
    end else if (((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        OUTPUT_IMAGE_V_dest_V_1_data_in = tmp_dest_V_3_reg_1593;
    end else if (((1'd1 == and_ln52_fu_1026_p2) & (1'b1 == INPUT_IMAGE_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state5))) begin
        OUTPUT_IMAGE_V_dest_V_1_data_in = INPUT_IMAGE_V_dest_V_0_data_out;
    end else begin
        OUTPUT_IMAGE_V_dest_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_IMAGE_V_dest_V_1_sel)) begin
        OUTPUT_IMAGE_V_dest_V_1_data_out = OUTPUT_IMAGE_V_dest_V_1_payload_B;
    end else begin
        OUTPUT_IMAGE_V_dest_V_1_data_out = OUTPUT_IMAGE_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | (1'b1 == ap_block_state11_io) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io)) | (~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'd1 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5)))) begin
        OUTPUT_IMAGE_V_dest_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_IMAGE_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        OUTPUT_IMAGE_V_id_V_1_data_in = tmp_id_V_fu_178;
    end else if (((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        OUTPUT_IMAGE_V_id_V_1_data_in = tmp_id_V_3_reg_1587;
    end else if (((1'd1 == and_ln52_fu_1026_p2) & (1'b1 == INPUT_IMAGE_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state5))) begin
        OUTPUT_IMAGE_V_id_V_1_data_in = INPUT_IMAGE_V_id_V_0_data_out;
    end else begin
        OUTPUT_IMAGE_V_id_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_IMAGE_V_id_V_1_sel)) begin
        OUTPUT_IMAGE_V_id_V_1_data_out = OUTPUT_IMAGE_V_id_V_1_payload_B;
    end else begin
        OUTPUT_IMAGE_V_id_V_1_data_out = OUTPUT_IMAGE_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | (1'b1 == ap_block_state11_io) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io)) | (~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'd1 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5)))) begin
        OUTPUT_IMAGE_V_id_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_IMAGE_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        OUTPUT_IMAGE_V_keep_V_1_data_in = tmp_keep_V_fu_166;
    end else if (((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        OUTPUT_IMAGE_V_keep_V_1_data_in = tmp_keep_V_3_reg_1569;
    end else if (((1'd1 == and_ln52_fu_1026_p2) & (1'b1 == INPUT_IMAGE_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state5))) begin
        OUTPUT_IMAGE_V_keep_V_1_data_in = INPUT_IMAGE_V_keep_V_0_data_out;
    end else begin
        OUTPUT_IMAGE_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_IMAGE_V_keep_V_1_sel)) begin
        OUTPUT_IMAGE_V_keep_V_1_data_out = OUTPUT_IMAGE_V_keep_V_1_payload_B;
    end else begin
        OUTPUT_IMAGE_V_keep_V_1_data_out = OUTPUT_IMAGE_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | (1'b1 == ap_block_state11_io) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io)) | (~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'd1 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5)))) begin
        OUTPUT_IMAGE_V_keep_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_IMAGE_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        OUTPUT_IMAGE_V_last_V_1_data_in = tmp_last_V_fu_1367_p2;
    end else if ((((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6)) | ((1'd1 == and_ln52_fu_1026_p2) & (1'b1 == INPUT_IMAGE_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state5)))) begin
        OUTPUT_IMAGE_V_last_V_1_data_in = 1'd0;
    end else begin
        OUTPUT_IMAGE_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_IMAGE_V_last_V_1_sel)) begin
        OUTPUT_IMAGE_V_last_V_1_data_out = OUTPUT_IMAGE_V_last_V_1_payload_B;
    end else begin
        OUTPUT_IMAGE_V_last_V_1_data_out = OUTPUT_IMAGE_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | (1'b1 == ap_block_state11_io) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io)) | (~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'd1 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5)))) begin
        OUTPUT_IMAGE_V_last_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_IMAGE_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        OUTPUT_IMAGE_V_strb_V_1_data_in = tmp_strb_V_fu_170;
    end else if (((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        OUTPUT_IMAGE_V_strb_V_1_data_in = tmp_strb_V_3_reg_1575;
    end else if (((1'd1 == and_ln52_fu_1026_p2) & (1'b1 == INPUT_IMAGE_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state5))) begin
        OUTPUT_IMAGE_V_strb_V_1_data_in = INPUT_IMAGE_V_strb_V_0_data_out;
    end else begin
        OUTPUT_IMAGE_V_strb_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_IMAGE_V_strb_V_1_sel)) begin
        OUTPUT_IMAGE_V_strb_V_1_data_out = OUTPUT_IMAGE_V_strb_V_1_payload_B;
    end else begin
        OUTPUT_IMAGE_V_strb_V_1_data_out = OUTPUT_IMAGE_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | (1'b1 == ap_block_state11_io) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io)) | (~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'd1 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5)))) begin
        OUTPUT_IMAGE_V_strb_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_IMAGE_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        OUTPUT_IMAGE_V_user_V_1_data_in = tmp_user_V_fu_174;
    end else if (((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        OUTPUT_IMAGE_V_user_V_1_data_in = tmp_user_V_3_reg_1581;
    end else if (((1'd1 == and_ln52_fu_1026_p2) & (1'b1 == INPUT_IMAGE_V_data_V_0_vld_out) & (1'b1 == ap_CS_fsm_state5))) begin
        OUTPUT_IMAGE_V_user_V_1_data_in = INPUT_IMAGE_V_user_V_0_data_out;
    end else begin
        OUTPUT_IMAGE_V_user_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_IMAGE_V_user_V_1_sel)) begin
        OUTPUT_IMAGE_V_user_V_1_data_out = OUTPUT_IMAGE_V_user_V_1_payload_B;
    end else begin
        OUTPUT_IMAGE_V_user_V_1_data_out = OUTPUT_IMAGE_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | (1'b1 == ap_block_state11_io) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io)) | (~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'd1 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5)))) begin
        OUTPUT_IMAGE_V_user_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_IMAGE_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | (1'b1 == ap_block_state11_io) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | (1'b1 == ap_block_state11_io) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pixelbuffer_val_1_address0 = pixelbuffer_val_1_a_reg_1541;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pixelbuffer_val_1_address0 = zext_ln729_fu_547_p1;
    end else begin
        pixelbuffer_val_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'b1 == ap_CS_fsm_state5)))) begin
        pixelbuffer_val_1_ce0 = 1'b1;
    end else begin
        pixelbuffer_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'b1 == ap_CS_fsm_state5))) begin
        pixelbuffer_val_1_we0 = 1'b1;
    end else begin
        pixelbuffer_val_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pixelbuffer_val_2_address0 = pixelbuffer_val_2_a_reg_1546;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pixelbuffer_val_2_address0 = zext_ln729_fu_547_p1;
    end else begin
        pixelbuffer_val_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'b1 == ap_CS_fsm_state5)))) begin
        pixelbuffer_val_2_ce0 = 1'b1;
    end else begin
        pixelbuffer_val_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'b1 == ap_CS_fsm_state5))) begin
        pixelbuffer_val_2_we0 = 1'b1;
    end else begin
        pixelbuffer_val_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln29_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln30_fu_495_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln31_fu_535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (icmp_ln61_fu_1032_p2 == 1'd1) & (1'd0 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'd0 == and_ln52_fu_1026_p2) & (icmp_ln61_fu_1032_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((1'b0 == INPUT_IMAGE_V_data_V_0_vld_out) | (1'b1 == ap_block_state5_io)) & (1'd1 == and_ln52_fu_1026_p2) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln66_fu_1038_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_io))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln67_fu_1179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_io))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == OUTPUT_IMAGE_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | (1'b1 == ap_block_state11_io) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | (1'b1 == ap_block_state11_io) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY))) & (icmp_ln101_fu_1335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == OUTPUT_IMAGE_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Gx_address0 = sext_ln69_fu_1218_p1;

assign Gy_address0 = sext_ln69_fu_1218_p1;

assign INPUT_IMAGE_TREADY = INPUT_IMAGE_V_dest_V_0_state[1'd1];

assign INPUT_IMAGE_V_data_V_0_ack_in = INPUT_IMAGE_V_data_V_0_state[1'd1];

assign INPUT_IMAGE_V_data_V_0_load_A = (~INPUT_IMAGE_V_data_V_0_sel_wr & INPUT_IMAGE_V_data_V_0_state_cmp_full);

assign INPUT_IMAGE_V_data_V_0_load_B = (INPUT_IMAGE_V_data_V_0_state_cmp_full & INPUT_IMAGE_V_data_V_0_sel_wr);

assign INPUT_IMAGE_V_data_V_0_sel = INPUT_IMAGE_V_data_V_0_sel_rd;

assign INPUT_IMAGE_V_data_V_0_state_cmp_full = ((INPUT_IMAGE_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_IMAGE_V_data_V_0_vld_in = INPUT_IMAGE_TVALID;

assign INPUT_IMAGE_V_data_V_0_vld_out = INPUT_IMAGE_V_data_V_0_state[1'd0];

assign INPUT_IMAGE_V_dest_V_0_ack_in = INPUT_IMAGE_V_dest_V_0_state[1'd1];

assign INPUT_IMAGE_V_dest_V_0_load_A = (~INPUT_IMAGE_V_dest_V_0_sel_wr & INPUT_IMAGE_V_dest_V_0_state_cmp_full);

assign INPUT_IMAGE_V_dest_V_0_load_B = (INPUT_IMAGE_V_dest_V_0_state_cmp_full & INPUT_IMAGE_V_dest_V_0_sel_wr);

assign INPUT_IMAGE_V_dest_V_0_sel = INPUT_IMAGE_V_dest_V_0_sel_rd;

assign INPUT_IMAGE_V_dest_V_0_state_cmp_full = ((INPUT_IMAGE_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_IMAGE_V_dest_V_0_vld_in = INPUT_IMAGE_TVALID;

assign INPUT_IMAGE_V_dest_V_0_vld_out = INPUT_IMAGE_V_dest_V_0_state[1'd0];

assign INPUT_IMAGE_V_id_V_0_ack_in = INPUT_IMAGE_V_id_V_0_state[1'd1];

assign INPUT_IMAGE_V_id_V_0_load_A = (~INPUT_IMAGE_V_id_V_0_sel_wr & INPUT_IMAGE_V_id_V_0_state_cmp_full);

assign INPUT_IMAGE_V_id_V_0_load_B = (INPUT_IMAGE_V_id_V_0_state_cmp_full & INPUT_IMAGE_V_id_V_0_sel_wr);

assign INPUT_IMAGE_V_id_V_0_sel = INPUT_IMAGE_V_id_V_0_sel_rd;

assign INPUT_IMAGE_V_id_V_0_state_cmp_full = ((INPUT_IMAGE_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_IMAGE_V_id_V_0_vld_in = INPUT_IMAGE_TVALID;

assign INPUT_IMAGE_V_id_V_0_vld_out = INPUT_IMAGE_V_id_V_0_state[1'd0];

assign INPUT_IMAGE_V_keep_V_0_ack_in = INPUT_IMAGE_V_keep_V_0_state[1'd1];

assign INPUT_IMAGE_V_keep_V_0_load_A = (~INPUT_IMAGE_V_keep_V_0_sel_wr & INPUT_IMAGE_V_keep_V_0_state_cmp_full);

assign INPUT_IMAGE_V_keep_V_0_load_B = (INPUT_IMAGE_V_keep_V_0_state_cmp_full & INPUT_IMAGE_V_keep_V_0_sel_wr);

assign INPUT_IMAGE_V_keep_V_0_sel = INPUT_IMAGE_V_keep_V_0_sel_rd;

assign INPUT_IMAGE_V_keep_V_0_state_cmp_full = ((INPUT_IMAGE_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_IMAGE_V_keep_V_0_vld_in = INPUT_IMAGE_TVALID;

assign INPUT_IMAGE_V_keep_V_0_vld_out = INPUT_IMAGE_V_keep_V_0_state[1'd0];

assign INPUT_IMAGE_V_strb_V_0_ack_in = INPUT_IMAGE_V_strb_V_0_state[1'd1];

assign INPUT_IMAGE_V_strb_V_0_load_A = (~INPUT_IMAGE_V_strb_V_0_sel_wr & INPUT_IMAGE_V_strb_V_0_state_cmp_full);

assign INPUT_IMAGE_V_strb_V_0_load_B = (INPUT_IMAGE_V_strb_V_0_state_cmp_full & INPUT_IMAGE_V_strb_V_0_sel_wr);

assign INPUT_IMAGE_V_strb_V_0_sel = INPUT_IMAGE_V_strb_V_0_sel_rd;

assign INPUT_IMAGE_V_strb_V_0_state_cmp_full = ((INPUT_IMAGE_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_IMAGE_V_strb_V_0_vld_in = INPUT_IMAGE_TVALID;

assign INPUT_IMAGE_V_strb_V_0_vld_out = INPUT_IMAGE_V_strb_V_0_state[1'd0];

assign INPUT_IMAGE_V_user_V_0_ack_in = INPUT_IMAGE_V_user_V_0_state[1'd1];

assign INPUT_IMAGE_V_user_V_0_load_A = (~INPUT_IMAGE_V_user_V_0_sel_wr & INPUT_IMAGE_V_user_V_0_state_cmp_full);

assign INPUT_IMAGE_V_user_V_0_load_B = (INPUT_IMAGE_V_user_V_0_state_cmp_full & INPUT_IMAGE_V_user_V_0_sel_wr);

assign INPUT_IMAGE_V_user_V_0_sel = INPUT_IMAGE_V_user_V_0_sel_rd;

assign INPUT_IMAGE_V_user_V_0_state_cmp_full = ((INPUT_IMAGE_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_IMAGE_V_user_V_0_vld_in = INPUT_IMAGE_TVALID;

assign INPUT_IMAGE_V_user_V_0_vld_out = INPUT_IMAGE_V_user_V_0_state[1'd0];

assign OUTPUT_IMAGE_TDATA = OUTPUT_IMAGE_V_data_V_1_data_out;

assign OUTPUT_IMAGE_TDEST = OUTPUT_IMAGE_V_dest_V_1_data_out;

assign OUTPUT_IMAGE_TID = OUTPUT_IMAGE_V_id_V_1_data_out;

assign OUTPUT_IMAGE_TKEEP = OUTPUT_IMAGE_V_keep_V_1_data_out;

assign OUTPUT_IMAGE_TLAST = OUTPUT_IMAGE_V_last_V_1_data_out;

assign OUTPUT_IMAGE_TSTRB = OUTPUT_IMAGE_V_strb_V_1_data_out;

assign OUTPUT_IMAGE_TUSER = OUTPUT_IMAGE_V_user_V_1_data_out;

assign OUTPUT_IMAGE_TVALID = OUTPUT_IMAGE_V_dest_V_1_state[1'd0];

assign OUTPUT_IMAGE_V_data_V_1_ack_in = OUTPUT_IMAGE_V_data_V_1_state[1'd1];

assign OUTPUT_IMAGE_V_data_V_1_ack_out = OUTPUT_IMAGE_TREADY;

assign OUTPUT_IMAGE_V_data_V_1_load_A = (~OUTPUT_IMAGE_V_data_V_1_sel_wr & OUTPUT_IMAGE_V_data_V_1_state_cmp_full);

assign OUTPUT_IMAGE_V_data_V_1_load_B = (OUTPUT_IMAGE_V_data_V_1_state_cmp_full & OUTPUT_IMAGE_V_data_V_1_sel_wr);

assign OUTPUT_IMAGE_V_data_V_1_sel = OUTPUT_IMAGE_V_data_V_1_sel_rd;

assign OUTPUT_IMAGE_V_data_V_1_state_cmp_full = ((OUTPUT_IMAGE_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_IMAGE_V_data_V_1_vld_out = OUTPUT_IMAGE_V_data_V_1_state[1'd0];

assign OUTPUT_IMAGE_V_dest_V_1_ack_in = OUTPUT_IMAGE_V_dest_V_1_state[1'd1];

assign OUTPUT_IMAGE_V_dest_V_1_ack_out = OUTPUT_IMAGE_TREADY;

assign OUTPUT_IMAGE_V_dest_V_1_load_A = (~OUTPUT_IMAGE_V_dest_V_1_sel_wr & OUTPUT_IMAGE_V_dest_V_1_state_cmp_full);

assign OUTPUT_IMAGE_V_dest_V_1_load_B = (OUTPUT_IMAGE_V_dest_V_1_state_cmp_full & OUTPUT_IMAGE_V_dest_V_1_sel_wr);

assign OUTPUT_IMAGE_V_dest_V_1_sel = OUTPUT_IMAGE_V_dest_V_1_sel_rd;

assign OUTPUT_IMAGE_V_dest_V_1_state_cmp_full = ((OUTPUT_IMAGE_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_IMAGE_V_dest_V_1_vld_out = OUTPUT_IMAGE_V_dest_V_1_state[1'd0];

assign OUTPUT_IMAGE_V_id_V_1_ack_in = OUTPUT_IMAGE_V_id_V_1_state[1'd1];

assign OUTPUT_IMAGE_V_id_V_1_ack_out = OUTPUT_IMAGE_TREADY;

assign OUTPUT_IMAGE_V_id_V_1_load_A = (~OUTPUT_IMAGE_V_id_V_1_sel_wr & OUTPUT_IMAGE_V_id_V_1_state_cmp_full);

assign OUTPUT_IMAGE_V_id_V_1_load_B = (OUTPUT_IMAGE_V_id_V_1_state_cmp_full & OUTPUT_IMAGE_V_id_V_1_sel_wr);

assign OUTPUT_IMAGE_V_id_V_1_sel = OUTPUT_IMAGE_V_id_V_1_sel_rd;

assign OUTPUT_IMAGE_V_id_V_1_state_cmp_full = ((OUTPUT_IMAGE_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_IMAGE_V_id_V_1_vld_out = OUTPUT_IMAGE_V_id_V_1_state[1'd0];

assign OUTPUT_IMAGE_V_keep_V_1_ack_in = OUTPUT_IMAGE_V_keep_V_1_state[1'd1];

assign OUTPUT_IMAGE_V_keep_V_1_ack_out = OUTPUT_IMAGE_TREADY;

assign OUTPUT_IMAGE_V_keep_V_1_load_A = (~OUTPUT_IMAGE_V_keep_V_1_sel_wr & OUTPUT_IMAGE_V_keep_V_1_state_cmp_full);

assign OUTPUT_IMAGE_V_keep_V_1_load_B = (OUTPUT_IMAGE_V_keep_V_1_state_cmp_full & OUTPUT_IMAGE_V_keep_V_1_sel_wr);

assign OUTPUT_IMAGE_V_keep_V_1_sel = OUTPUT_IMAGE_V_keep_V_1_sel_rd;

assign OUTPUT_IMAGE_V_keep_V_1_state_cmp_full = ((OUTPUT_IMAGE_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_IMAGE_V_keep_V_1_vld_out = OUTPUT_IMAGE_V_keep_V_1_state[1'd0];

assign OUTPUT_IMAGE_V_last_V_1_ack_in = OUTPUT_IMAGE_V_last_V_1_state[1'd1];

assign OUTPUT_IMAGE_V_last_V_1_ack_out = OUTPUT_IMAGE_TREADY;

assign OUTPUT_IMAGE_V_last_V_1_load_A = (~OUTPUT_IMAGE_V_last_V_1_sel_wr & OUTPUT_IMAGE_V_last_V_1_state_cmp_full);

assign OUTPUT_IMAGE_V_last_V_1_load_B = (OUTPUT_IMAGE_V_last_V_1_state_cmp_full & OUTPUT_IMAGE_V_last_V_1_sel_wr);

assign OUTPUT_IMAGE_V_last_V_1_sel = OUTPUT_IMAGE_V_last_V_1_sel_rd;

assign OUTPUT_IMAGE_V_last_V_1_state_cmp_full = ((OUTPUT_IMAGE_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_IMAGE_V_last_V_1_vld_out = OUTPUT_IMAGE_V_last_V_1_state[1'd0];

assign OUTPUT_IMAGE_V_strb_V_1_ack_in = OUTPUT_IMAGE_V_strb_V_1_state[1'd1];

assign OUTPUT_IMAGE_V_strb_V_1_ack_out = OUTPUT_IMAGE_TREADY;

assign OUTPUT_IMAGE_V_strb_V_1_load_A = (~OUTPUT_IMAGE_V_strb_V_1_sel_wr & OUTPUT_IMAGE_V_strb_V_1_state_cmp_full);

assign OUTPUT_IMAGE_V_strb_V_1_load_B = (OUTPUT_IMAGE_V_strb_V_1_state_cmp_full & OUTPUT_IMAGE_V_strb_V_1_sel_wr);

assign OUTPUT_IMAGE_V_strb_V_1_sel = OUTPUT_IMAGE_V_strb_V_1_sel_rd;

assign OUTPUT_IMAGE_V_strb_V_1_state_cmp_full = ((OUTPUT_IMAGE_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_IMAGE_V_strb_V_1_vld_out = OUTPUT_IMAGE_V_strb_V_1_state[1'd0];

assign OUTPUT_IMAGE_V_user_V_1_ack_in = OUTPUT_IMAGE_V_user_V_1_state[1'd1];

assign OUTPUT_IMAGE_V_user_V_1_ack_out = OUTPUT_IMAGE_TREADY;

assign OUTPUT_IMAGE_V_user_V_1_load_A = (~OUTPUT_IMAGE_V_user_V_1_sel_wr & OUTPUT_IMAGE_V_user_V_1_state_cmp_full);

assign OUTPUT_IMAGE_V_user_V_1_load_B = (OUTPUT_IMAGE_V_user_V_1_state_cmp_full & OUTPUT_IMAGE_V_user_V_1_sel_wr);

assign OUTPUT_IMAGE_V_user_V_1_sel = OUTPUT_IMAGE_V_user_V_1_sel_rd;

assign OUTPUT_IMAGE_V_user_V_1_state_cmp_full = ((OUTPUT_IMAGE_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_IMAGE_V_user_V_1_vld_out = OUTPUT_IMAGE_V_user_V_1_state[1'd0];

assign abs200_fu_1100_p3 = ((abscond199_fu_1094_p2[0:0] === 1'b1) ? y_dir_0_reg_413 : neg198_fu_1088_p2);

assign abs_fu_1080_p3 = ((abscond_fu_1074_p2[0:0] === 1'b1) ? x_dir_0_reg_401 : neg_fu_1068_p2);

assign abscond199_fu_1094_p2 = (($signed(y_dir_0_reg_413) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign abscond_fu_1074_p2 = (($signed(x_dir_0_reg_401) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign add_ln34_1_fu_596_p2 = (21'd1 + counter_2_reg_379);

assign add_ln34_fu_507_p2 = (21'd1024 + counter_1_reg_345);

assign add_ln493_fu_1224_p2 = (2'd1 + trunc_ln68_1_fu_1185_p1);

assign add_ln68_2_fu_1058_p2 = (2'd1 + trunc_ln68_fu_1044_p1);

assign add_ln69_fu_1213_p2 = (zext_ln68_2_reg_1669 + sub_ln69_fu_1207_p2);

assign and_ln41_1_fu_564_p2 = (icmp_ln41_reg_1487 & and_ln41_fu_559_p2);

assign and_ln41_fu_559_p2 = (icmp_ln41_2_fu_553_p2 & icmp_ln41_1_reg_1505);

assign and_ln52_fu_1026_p2 = (icmp_ln52_fu_1014_p2 & icmp_ln52_1_fu_1020_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11 = ((2'd1 == OUTPUT_IMAGE_V_dest_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_id_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_last_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_user_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_strb_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_keep_V_1_state) | (2'd1 == OUTPUT_IMAGE_V_data_V_1_state) | ((2'd3 == OUTPUT_IMAGE_V_dest_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_id_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_last_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_user_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_strb_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_keep_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)) | ((2'd3 == OUTPUT_IMAGE_V_data_V_1_state) & (1'b0 == OUTPUT_IMAGE_TREADY)));
end

always @ (*) begin
    ap_block_state11_io = ((icmp_ln101_fu_1335_p2 == 1'd0) & (1'b0 == OUTPUT_IMAGE_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state5_io = ((1'd1 == and_ln52_fu_1026_p2) & (1'b0 == OUTPUT_IMAGE_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state6_io = ((icmp_ln66_fu_1038_p2 == 1'd1) & (1'b0 == OUTPUT_IMAGE_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state9_io = ((1'b0 == OUTPUT_IMAGE_V_data_V_1_ack_in) & (ap_predicate_op236_write_state9 == 1'b1));
end

always @ (*) begin
    ap_predicate_op236_write_state9 = ((icmp_ln61_reg_1657 == 1'd1) & (1'd0 == and_ln52_reg_1653));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign colOffset_fu_1048_p2 = (3'd1 + colOffset_0_reg_390);

assign counter_fu_483_p2 = (counter_0_reg_333 + 21'd131072);

assign empty_12_fu_1146_p1 = result_fu_1108_p2[7:0];

assign grp_fu_1374_p1 = zext_ln69_1_fu_1268_p1;

assign grp_fu_1382_p1 = zext_ln69_1_fu_1268_p1;

assign i_2_fu_477_p2 = (i_0_reg_322 + 4'd1);

assign i_fu_1341_p2 = (i_1_reg_460 + 11'd1);

assign icmp_ln101_fu_1335_p2 = ((i_1_reg_460 == 11'd1025) ? 1'b1 : 1'b0);

assign icmp_ln274_1_fu_728_p2 = ((trunc_ln274_1_fu_632_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln274_2_fu_523_p2 = ((trunc_ln274_fu_519_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln274_3_fu_529_p2 = ((trunc_ln274_fu_519_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln274_fu_714_p2 = ((trunc_ln274_1_fu_632_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_471_p2 = ((i_0_reg_322 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_495_p2 = ((row_assign_reg_356 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_535_p2 = ((col_assign_reg_367 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_513_p2 = ((row_assign_reg_356 < 8'd3) ? 1'b1 : 1'b0);

assign icmp_ln41_2_fu_553_p2 = ((col_assign_reg_367 < 11'd3) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_489_p2 = ((i_0_reg_322 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_636_p2 = (($signed(add_ln34_1_fu_596_p2) > $signed(21'd2048)) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_1020_p2 = (($signed(add_ln34_1_fu_596_p2) < $signed(21'd2050)) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_1014_p2 = (($signed(add_ln34_1_fu_596_p2) > $signed(21'd1024)) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_1032_p2 = (($signed(add_ln34_1_fu_596_p2) > $signed(21'd2049)) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_1038_p2 = ((colOffset_0_reg_390 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_1179_p2 = ((rowOffset_0_reg_425 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_1124_p2 = ((tmp_2_fu_1114_p4 == 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_1140_p2 = (($signed(tmp_4_fu_1130_p4) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign j_fu_541_p2 = (col_assign_reg_367 + 11'd1);

assign k_fu_501_p2 = (row_assign_reg_356 + 8'd1);

assign neg198_fu_1088_p2 = (32'd0 - y_dir_0_reg_413);

assign neg_fu_1068_p2 = (32'd0 - x_dir_0_reg_401);

assign or_ln80_fu_1164_p2 = (icmp_ln82_fu_1140_p2 | icmp_ln80_fu_1124_p2);

assign result_fu_1108_p2 = (abs_fu_1080_p3 - abs200_fu_1100_p3);

assign rowOffset_fu_1189_p2 = (3'd1 + rowOffset_0_reg_425);

assign select_ln41_2_fu_972_p3 = ((and_ln41_1_reg_1551[0:0] === 1'b1) ? window_val_1_1_5_fu_895_p3 : window_val_1_2_1_fu_666_p3);

assign select_ln41_3_fu_979_p3 = ((and_ln41_1_reg_1551[0:0] === 1'b1) ? window_val_2_2_46_fu_909_p3 : window_val_1_0_1_fu_674_p3);

assign select_ln41_5_fu_993_p3 = ((and_ln41_1_reg_1551[0:0] === 1'b1) ? window_val_0_1_4_fu_930_p3 : window_val_0_2_1_fu_690_p3);

assign select_ln41_6_fu_1000_p3 = ((and_ln41_1_reg_1551[0:0] === 1'b1) ? window_val_2_2_49_fu_937_p3 : window_val_0_0_fu_698_p3);

assign select_ln41_fu_958_p3 = ((and_ln41_1_reg_1551[0:0] === 1'b1) ? window_val_2_2_42_fu_867_p3 : window_val_2_0_1_fu_650_p3);

assign select_ln80_fu_1156_p3 = ((xor_ln80_fu_1150_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign sext_ln69_fu_1218_p1 = $signed(add_ln69_fu_1213_p2);

assign shl_ln_fu_1234_p3 = {{add_ln493_fu_1224_p2}, {2'd0}};

assign sub_ln68_fu_1242_p2 = (shl_ln_fu_1234_p3 - zext_ln68_fu_1230_p1);

assign sub_ln69_fu_1207_p2 = (tmp_3_fu_1199_p3 - zext_ln69_fu_1195_p1);

assign tmp_1_fu_1253_p10 = (sub_ln68_fu_1242_p2 + zext_ln68_1_reg_1674);

assign tmp_2_fu_1114_p4 = {{col_assign_reg_367[10:1]}};

assign tmp_3_fu_1199_p3 = {{rowOffset_fu_1189_p2}, {2'd0}};

assign tmp_4_fu_1130_p4 = {{result_fu_1108_p2[31:8]}};

assign tmp_data_V_fu_1170_p3 = ((or_ln80_fu_1164_p2[0:0] === 1'b1) ? select_ln80_fu_1156_p3 : empty_12_fu_1146_p1);

assign tmp_last_V_fu_1367_p2 = ((i_1_reg_460 == 11'd1024) ? 1'b1 : 1'b0);

assign trunc_ln274_1_fu_632_p1 = col_assign_reg_367[1:0];

assign trunc_ln274_fu_519_p1 = row_assign_reg_356[1:0];

assign trunc_ln68_1_fu_1185_p1 = rowOffset_0_reg_425[1:0];

assign trunc_ln68_fu_1044_p1 = colOffset_0_reg_390[1:0];

assign window_val_0_0_fu_698_p3 = ((icmp_ln43_fu_636_p2[0:0] === 1'b1) ? window_val_0_1_fu_190 : window_val_2_2_2_fu_186);

assign window_val_0_1_2_fu_766_p3 = ((icmp_ln274_fu_714_p2[0:0] === 1'b1) ? window_val_0_1_fu_190 : INPUT_IMAGE_V_data_V_0_data_out);

assign window_val_0_1_3_fu_774_p3 = ((icmp_ln274_1_fu_728_p2[0:0] === 1'b1) ? window_val_0_1_fu_190 : window_val_0_1_2_fu_766_p3);

assign window_val_0_1_4_fu_930_p3 = ((icmp_ln274_3_reg_1520[0:0] === 1'b1) ? window_val_0_1_3_fu_774_p3 : window_val_0_1_fu_190);

assign window_val_0_2_1_fu_690_p3 = ((icmp_ln43_fu_636_p2[0:0] === 1'b1) ? pixelbuffer_val_1_q0 : window_val_0_1_fu_190);

assign window_val_1_0_1_fu_674_p3 = ((icmp_ln43_fu_636_p2[0:0] === 1'b1) ? window_val_1_1_fu_202 : window_val_1_0_fu_198);

assign window_val_1_1_2_fu_806_p3 = ((icmp_ln274_fu_714_p2[0:0] === 1'b1) ? window_val_1_1_fu_202 : INPUT_IMAGE_V_data_V_0_data_out);

assign window_val_1_1_3_fu_814_p3 = ((icmp_ln274_1_fu_728_p2[0:0] === 1'b1) ? window_val_1_1_fu_202 : window_val_1_1_2_fu_806_p3);

assign window_val_1_1_4_fu_888_p3 = ((icmp_ln274_2_reg_1510[0:0] === 1'b1) ? window_val_1_1_3_fu_814_p3 : window_val_1_1_fu_202);

assign window_val_1_1_5_fu_895_p3 = ((icmp_ln274_3_reg_1520[0:0] === 1'b1) ? window_val_1_1_fu_202 : window_val_1_1_4_fu_888_p3);

assign window_val_1_2_1_fu_666_p3 = ((icmp_ln43_fu_636_p2[0:0] === 1'b1) ? pixelbuffer_val_2_q0 : window_val_1_1_fu_202);

assign window_val_2_0_1_fu_650_p3 = ((icmp_ln43_fu_636_p2[0:0] === 1'b1) ? window_val_2_1_fu_214 : window_val_2_0_fu_210);

assign window_val_2_1_1_fu_642_p3 = ((icmp_ln43_fu_636_p2[0:0] === 1'b1) ? INPUT_IMAGE_V_data_V_0_data_out : window_val_2_1_fu_214);

assign window_val_2_1_3_fu_720_p3 = ((icmp_ln274_fu_714_p2[0:0] === 1'b1) ? window_val_2_1_fu_214 : INPUT_IMAGE_V_data_V_0_data_out);

assign window_val_2_1_4_fu_734_p3 = ((icmp_ln274_1_fu_728_p2[0:0] === 1'b1) ? window_val_2_1_fu_214 : window_val_2_1_3_fu_720_p3);

assign window_val_2_1_5_fu_846_p3 = ((icmp_ln274_2_reg_1510[0:0] === 1'b1) ? window_val_2_1_fu_214 : window_val_2_1_4_fu_734_p3);

assign window_val_2_1_6_fu_853_p3 = ((icmp_ln274_3_reg_1520[0:0] === 1'b1) ? window_val_2_1_fu_214 : window_val_2_1_5_fu_846_p3);

assign window_val_2_1_7_fu_951_p3 = ((and_ln41_1_reg_1551[0:0] === 1'b1) ? window_val_2_1_6_fu_853_p3 : window_val_2_1_1_fu_642_p3);

assign window_val_2_2_13_fu_658_p3 = ((icmp_ln43_fu_636_p2[0:0] === 1'b1) ? window_val_2_0_fu_210 : window_val_2_2_4_fu_206);

assign window_val_2_2_17_fu_682_p3 = ((icmp_ln43_fu_636_p2[0:0] === 1'b1) ? window_val_1_0_fu_198 : window_val_2_2_3_fu_194);

assign window_val_2_2_27_fu_706_p3 = ((icmp_ln43_fu_636_p2[0:0] === 1'b1) ? window_val_2_2_2_fu_186 : window_val_2_2_1_fu_182);

assign window_val_2_2_33_fu_750_p3 = ((icmp_ln274_1_fu_728_p2[0:0] === 1'b1) ? window_val_2_0_fu_210 : window_val_2_2_fu_742_p3);

assign window_val_2_2_34_fu_758_p3 = ((icmp_ln274_1_fu_728_p2[0:0] === 1'b1) ? INPUT_IMAGE_V_data_V_0_data_out : window_val_2_2_4_fu_206);

assign window_val_2_2_35_fu_782_p3 = ((icmp_ln274_fu_714_p2[0:0] === 1'b1) ? INPUT_IMAGE_V_data_V_0_data_out : window_val_2_2_2_fu_186);

assign window_val_2_2_36_fu_790_p3 = ((icmp_ln274_1_fu_728_p2[0:0] === 1'b1) ? window_val_2_2_2_fu_186 : window_val_2_2_35_fu_782_p3);

assign window_val_2_2_37_fu_798_p3 = ((icmp_ln274_1_fu_728_p2[0:0] === 1'b1) ? INPUT_IMAGE_V_data_V_0_data_out : window_val_2_2_1_fu_182);

assign window_val_2_2_38_fu_822_p3 = ((icmp_ln274_fu_714_p2[0:0] === 1'b1) ? INPUT_IMAGE_V_data_V_0_data_out : window_val_1_0_fu_198);

assign window_val_2_2_39_fu_830_p3 = ((icmp_ln274_1_fu_728_p2[0:0] === 1'b1) ? window_val_1_0_fu_198 : window_val_2_2_38_fu_822_p3);

assign window_val_2_2_40_fu_838_p3 = ((icmp_ln274_1_fu_728_p2[0:0] === 1'b1) ? INPUT_IMAGE_V_data_V_0_data_out : window_val_2_2_3_fu_194);

assign window_val_2_2_41_fu_860_p3 = ((icmp_ln274_2_reg_1510[0:0] === 1'b1) ? window_val_2_0_fu_210 : window_val_2_2_33_fu_750_p3);

assign window_val_2_2_42_fu_867_p3 = ((icmp_ln274_3_reg_1520[0:0] === 1'b1) ? window_val_2_0_fu_210 : window_val_2_2_41_fu_860_p3);

assign window_val_2_2_43_fu_874_p3 = ((icmp_ln274_2_reg_1510[0:0] === 1'b1) ? window_val_2_2_4_fu_206 : window_val_2_2_34_fu_758_p3);

assign window_val_2_2_44_fu_881_p3 = ((icmp_ln274_3_reg_1520[0:0] === 1'b1) ? window_val_2_2_4_fu_206 : window_val_2_2_43_fu_874_p3);

assign window_val_2_2_45_fu_902_p3 = ((icmp_ln274_2_reg_1510[0:0] === 1'b1) ? window_val_2_2_39_fu_830_p3 : window_val_1_0_fu_198);

assign window_val_2_2_46_fu_909_p3 = ((icmp_ln274_3_reg_1520[0:0] === 1'b1) ? window_val_1_0_fu_198 : window_val_2_2_45_fu_902_p3);

assign window_val_2_2_47_fu_916_p3 = ((icmp_ln274_2_reg_1510[0:0] === 1'b1) ? window_val_2_2_40_fu_838_p3 : window_val_2_2_3_fu_194);

assign window_val_2_2_48_fu_923_p3 = ((icmp_ln274_3_reg_1520[0:0] === 1'b1) ? window_val_2_2_3_fu_194 : window_val_2_2_47_fu_916_p3);

assign window_val_2_2_49_fu_937_p3 = ((icmp_ln274_3_reg_1520[0:0] === 1'b1) ? window_val_2_2_36_fu_790_p3 : window_val_2_2_2_fu_186);

assign window_val_2_2_50_fu_944_p3 = ((icmp_ln274_3_reg_1520[0:0] === 1'b1) ? window_val_2_2_37_fu_798_p3 : window_val_2_2_1_fu_182);

assign window_val_2_2_51_fu_965_p3 = ((and_ln41_1_reg_1551[0:0] === 1'b1) ? window_val_2_2_44_fu_881_p3 : window_val_2_2_13_fu_658_p3);

assign window_val_2_2_52_fu_986_p3 = ((and_ln41_1_reg_1551[0:0] === 1'b1) ? window_val_2_2_48_fu_923_p3 : window_val_2_2_17_fu_682_p3);

assign window_val_2_2_53_fu_1007_p3 = ((and_ln41_1_reg_1551[0:0] === 1'b1) ? window_val_2_2_50_fu_944_p3 : window_val_2_2_27_fu_706_p3);

assign window_val_2_2_fu_742_p3 = ((icmp_ln274_fu_714_p2[0:0] === 1'b1) ? INPUT_IMAGE_V_data_V_0_data_out : window_val_2_0_fu_210);

assign xor_ln80_fu_1150_p2 = (icmp_ln80_fu_1124_p2 ^ 1'd1);

assign zext_ln68_1_fu_1064_p1 = add_ln68_2_fu_1058_p2;

assign zext_ln68_2_fu_1054_p1 = colOffset_fu_1048_p2;

assign zext_ln68_fu_1230_p1 = add_ln493_fu_1224_p2;

assign zext_ln69_1_fu_1268_p1 = tmp_1_reg_1702;

assign zext_ln69_fu_1195_p1 = rowOffset_fu_1189_p2;

assign zext_ln729_fu_547_p1 = col_assign_reg_367;

always @ (posedge ap_clk) begin
    zext_ln68_2_reg_1669[4:3] <= 2'b00;
    zext_ln68_1_reg_1674[3:2] <= 2'b00;
end

endmodule //sobel_filter

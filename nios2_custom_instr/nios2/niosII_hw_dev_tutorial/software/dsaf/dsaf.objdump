
dsaf.elf:     file format elf32-littlenios2
dsaf.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008140

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000013b4 memsz 0x000013b4 flags r-x
    LOAD off    0x000023d4 vaddr 0x000093d4 paddr 0x000094d0 align 2**12
         filesz 0x000000fc memsz 0x000000fc flags rw-
    LOAD off    0x000025cc vaddr 0x000095cc paddr 0x000095cc align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001244  00008140  00008140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00009384  00009384  00002384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000fc  000093d4  000094d0  000023d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  000095cc  000095cc  000025cc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000024d0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003b8  00000000  00000000  000024f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000591  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004f1b  00000000  00000000  00002e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001af6  00000000  00000000  00007d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004744  00000000  00000000  00009852  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000518  00000000  00000000  0000df98  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001263  00000000  00000000  0000e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000147e  00000000  00000000  0000f713  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00010b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000200  00000000  00000000  00010bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001232e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00012331  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00012334  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00012335  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00012336  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001233a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001233e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00012342  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001234b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00012354  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  0001235d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005c  00000000  00000000  00012362  2**0
                  CONTENTS, READONLY
 29 .jdi          000043e7  00000000  00000000  000123be  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00036d69  00000000  00000000  000167a5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008140 l    d  .text	00000000 .text
00009384 l    d  .rodata	00000000 .rodata
000093d4 l    d  .rwdata	00000000 .rwdata
000095cc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008178 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008368 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 __call_atexit.c
00008aa8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000093d4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008d9c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008f20 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000910c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00008fac g     F .text	0000002c alt_main
000082a4 g     F .text	00000090 _puts_r
000095e8 g     O .bss	00000100 alt_irq
000094d0 g       *ABS*	00000000 __flash_rwdata_start
0000820c g     F .text	00000054 printf
000094bc g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000095cc g     O .bss	00000004 errno
000095d4 g     O .bss	00000004 alt_argv
000114b4 g       *ABS*	00000000 _gp
00008334 g     F .text	00000014 puts
00008260 g     F .text	00000044 _printf_r
00008ed8 g     F .text	00000008 __udivsi3
00009348 g     F .text	00000038 alt_icache_flush
0000817c g     F .text	00000024 leading_zero_naive3
000094b8 g     O .rwdata	00000004 _global_impure_ptr
000096e8 g       *ABS*	00000000 __bss_end
000091f4 g     F .text	0000006c alt_iic_isr_register
00009294 g     F .text	000000ac alt_tick
00009158 g     F .text	00000018 alt_ic_irq_enabled
00009260 g     F .text	00000034 alt_alarm_stop
000095dc g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080ec g     F .exceptions	00000054 alt_irq_handler
00009148 g     F .text	00000004 alt_dcache_flush_all
000094d0 g       *ABS*	00000000 __ram_rwdata_end
00008fd8 g     F .text	00000078 write
000093d4 g       *ABS*	00000000 __ram_rodata_end
00008ee0 g     F .text	00000008 __umodsi3
000096e8 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000090bc g     F .text	00000050 alt_avalon_timer_sc_init
00009088 g     F .text	00000034 altera_avalon_jtag_uart_write
000083e8 g     F .text	0000069c ___vfprintf_internal_r
00008aac g     F .text	000001bc __call_exitprocs
00008140 g     F .text	0000003c _start
000095e0 g     O .bss	00000004 _alt_tick_rate
000095e4 g     O .bss	00000004 _alt_nticks
00009050 g     F .text	00000018 alt_sys_init
00008ee8 g     F .text	00000038 __mulsi3
000093d4 g       *ABS*	00000000 __ram_rwdata_start
00009384 g       *ABS*	00000000 __ram_rodata_start
000096e8 g       *ABS*	00000000 __alt_stack_base
00008c68 g     F .text	000000bc __sfvwrite_small_dev
000095cc g       *ABS*	00000000 __bss_start
000081a0 g     F .text	0000004c main
000095d8 g     O .bss	00000004 alt_envp
000094c0 g     O .rwdata	00000004 alt_errno
00008e18 g     F .text	00000060 __divsi3
00009384 g       *ABS*	00000000 __flash_rodata_start
00009068 g     F .text	00000020 alt_irq_init
00008d24 g     F .text	00000078 _write_r
000094b4 g     O .rwdata	00000004 _impure_ptr
000095d0 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
00008020 g       *ABS*	00000000 __ram_exceptions_start
000091f0 g     F .text	00000004 alt_ic_isr_register
000094d0 g       *ABS*	00000000 _edata
000096e8 g       *ABS*	00000000 _end
00008140 g       *ABS*	00000000 __ram_exceptions_end
000091b0 g     F .text	00000040 alt_ic_irq_disable
00009340 g     F .text	00000008 altera_nios2_qsys_irq_init
0000801c g     F .entry	00000020 exit
00008e78 g     F .text	00000060 __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000801c g       .entry	00000000 _exit
00008348 g     F .text	00000020 strlen
0000914c g     F .text	0000000c alt_icache_flush_all
000094c4 g     O .rwdata	00000004 alt_priority_mask
00009170 g     F .text	00000040 alt_ic_irq_enable
00008a84 g     F .text	00000024 __vfprintf_internal
000094c8 g     O .rwdata	00000008 alt_alarm_list
00008f40 g     F .text	0000006c alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08605014 	ori	at,at,33088
    jmp r1
    8018:	0800683a 	jmp	at

0000801c <exit>:
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    8044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	deffff04 	addi	sp,sp,-4
    80f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    80f4:	0009313a 	rdctl	r4,ipending
    80f8:	00c00044 	movi	r3,1
    80fc:	01400074 	movhi	r5,1
    8100:	29657a04 	addi	r5,r5,-27160
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    810c:	10000726 	beq	r2,zero,812c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    8110:	29000117 	ldw	r4,4(r5)
    8114:	28800017 	ldw	r2,0(r5)
    8118:	103ee83a 	callr	r2
    811c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    8120:	10000426 	beq	r2,zero,8134 <alt_irq_handler+0x48>
    8124:	1009883a 	mov	r4,r2
    8128:	003ff306 	br	80f8 <alt_irq_handler+0xc>
    812c:	29400204 	addi	r5,r5,8
    8130:	003ff406 	br	8104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    8134:	dfc00017 	ldw	ra,0(sp)
    8138:	dec00104 	addi	sp,sp,4
    813c:	f800283a 	ret

Disassembly of section .text:

00008140 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8140:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8144:	def40014 	ori	sp,sp,53248

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8148:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    814c:	d6852d14 	ori	gp,gp,5300
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8150:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8154:	10a57314 	ori	r2,r2,38348

    movhi r3, %hi(__bss_end)
    8158:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    815c:	18e5ba14 	ori	r3,r3,38632

    beq r2, r3, 1f
    8160:	10c00326 	beq	r2,r3,8170 <_start+0x30>

0:
    stw zero, (r2)
    8164:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8168:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    816c:	10fffd36 	bltu	r2,r3,8164 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8170:	0008f400 	call	8f40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8174:	0008fac0 	call	8fac <alt_main>

00008178 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8178:	003fff06 	br	8178 <alt_after_alt_main>

0000817c <leading_zero_naive3>:


unsigned leading_zero_naive3(int x)
{
    unsigned n = 0;
    if (x == 0xFFFFFFFF) return 32;
    817c:	00bfffc4 	movi	r2,-1
    8180:	20800526 	beq	r4,r2,8198 <leading_zero_naive3+0x1c>
    8184:	0005883a 	mov	r2,zero
    while (1) {
        if (x > 0) break;
    8188:	01000416 	blt	zero,r4,819c <leading_zero_naive3+0x20>
        n ++;
    818c:	10800044 	addi	r2,r2,1
        x <<= 1;
    8190:	2109883a 	add	r4,r4,r4
    8194:	003ffc06 	br	8188 <leading_zero_naive3+0xc>
    }
    8198:	00800804 	movi	r2,32
    return n;
}
    819c:	f800283a 	ret

000081a0 <main>:

int main(void)
{
    81a0:	defffe04 	addi	sp,sp,-8
//	for (i=0;i<=32;i++){
//		sample[i]=0xFFFFFFFF<<i;
//		//printf("Sample[%d] = %d \n",i,sample[i]);
//	}

	unsigned int result=ALT_CI_COUNT_LEADING_ONES_0(0xFFFFFFF0);
    81a4:	013ffc04 	movi	r4,-16
    }
    return n;
}

int main(void)
{
    81a8:	dfc00115 	stw	ra,4(sp)
    81ac:	dc000015 	stw	r16,0(sp)
//	for (i=0;i<=32;i++){
//		sample[i]=0xFFFFFFFF<<i;
//		//printf("Sample[%d] = %d \n",i,sample[i]);
//	}

	unsigned int result=ALT_CI_COUNT_LEADING_ONES_0(0xFFFFFFF0);
    81b0:	2021c032 	custom	0,r16,r4,zero
	unsigned int soft_result=leading_zero_naive3(0xFFFFFFF0);
    81b4:	000817c0 	call	817c <leading_zero_naive3>
	printf("%x,%x",result,soft_result);
    81b8:	800b883a 	mov	r5,r16
    81bc:	100d883a 	mov	r6,r2
    81c0:	01000074 	movhi	r4,1
    81c4:	2124e104 	addi	r4,r4,-27772
    81c8:	000820c0 	call	820c <printf>
	printf("**********************************************\n");
    81cc:	01000074 	movhi	r4,1
    81d0:	2124e304 	addi	r4,r4,-27764
    81d4:	00083340 	call	8334 <puts>
  printf("Program Complete.\n");
    81d8:	01000074 	movhi	r4,1
    81dc:	2124ef04 	addi	r4,r4,-27716
    81e0:	00083340 	call	8334 <puts>

  exit(0);
    81e4:	0009883a 	mov	r4,zero
    81e8:	000801c0 	call	801c <exit>
    81ec:	defffe04 	addi	sp,sp,-8
    81f0:	dc400015 	stw	r17,0(sp)
    81f4:	000b883a 	mov	r5,zero
    81f8:	2023883a 	mov	r17,r4
    81fc:	dfc00115 	stw	ra,4(sp)
    8200:	0008aac0 	call	8aac <__call_exitprocs>
    8204:	8809883a 	mov	r4,r17
    8208:	000801c0 	call	801c <exit>

0000820c <printf>:
    820c:	defffb04 	addi	sp,sp,-20
    8210:	dfc00115 	stw	ra,4(sp)
    8214:	d9400215 	stw	r5,8(sp)
    8218:	d9800315 	stw	r6,12(sp)
    821c:	d9c00415 	stw	r7,16(sp)
    8220:	00800074 	movhi	r2,1
    8224:	10a52d04 	addi	r2,r2,-27468
    8228:	11400017 	ldw	r5,0(r2)
    822c:	d8800204 	addi	r2,sp,8
    8230:	d8800015 	stw	r2,0(sp)
    8234:	29c00217 	ldw	r7,8(r5)
    8238:	100d883a 	mov	r6,r2
    823c:	00800074 	movhi	r2,1
    8240:	10a31a04 	addi	r2,r2,-29592
    8244:	200b883a 	mov	r5,r4
    8248:	38800115 	stw	r2,4(r7)
    824c:	3809883a 	mov	r4,r7
    8250:	0008a840 	call	8a84 <__vfprintf_internal>
    8254:	dfc00117 	ldw	ra,4(sp)
    8258:	dec00504 	addi	sp,sp,20
    825c:	f800283a 	ret

00008260 <_printf_r>:
    8260:	defffc04 	addi	sp,sp,-16
    8264:	dfc00115 	stw	ra,4(sp)
    8268:	d9800215 	stw	r6,8(sp)
    826c:	d9c00315 	stw	r7,12(sp)
    8270:	22000217 	ldw	r8,8(r4)
    8274:	d8800204 	addi	r2,sp,8
    8278:	d8800015 	stw	r2,0(sp)
    827c:	100f883a 	mov	r7,r2
    8280:	00800074 	movhi	r2,1
    8284:	10a31a04 	addi	r2,r2,-29592
    8288:	280d883a 	mov	r6,r5
    828c:	40800115 	stw	r2,4(r8)
    8290:	400b883a 	mov	r5,r8
    8294:	00083e80 	call	83e8 <___vfprintf_internal_r>
    8298:	dfc00117 	ldw	ra,4(sp)
    829c:	dec00404 	addi	sp,sp,16
    82a0:	f800283a 	ret

000082a4 <_puts_r>:
    82a4:	defffd04 	addi	sp,sp,-12
    82a8:	dc000015 	stw	r16,0(sp)
    82ac:	2021883a 	mov	r16,r4
    82b0:	2809883a 	mov	r4,r5
    82b4:	dfc00215 	stw	ra,8(sp)
    82b8:	dc400115 	stw	r17,4(sp)
    82bc:	2823883a 	mov	r17,r5
    82c0:	00083480 	call	8348 <strlen>
    82c4:	80c00217 	ldw	r3,8(r16)
    82c8:	02000074 	movhi	r8,1
    82cc:	42231a04 	addi	r8,r8,-29592
    82d0:	880d883a 	mov	r6,r17
    82d4:	100f883a 	mov	r7,r2
    82d8:	8009883a 	mov	r4,r16
    82dc:	180b883a 	mov	r5,r3
    82e0:	1a000115 	stw	r8,4(r3)
    82e4:	403ee83a 	callr	r8
    82e8:	047fffc4 	movi	r17,-1
    82ec:	8009883a 	mov	r4,r16
    82f0:	01800074 	movhi	r6,1
    82f4:	31a4f404 	addi	r6,r6,-27696
    82f8:	01c00044 	movi	r7,1
    82fc:	1440071e 	bne	r2,r17,831c <_puts_r+0x78>
    8300:	00ffffc4 	movi	r3,-1
    8304:	1805883a 	mov	r2,r3
    8308:	dfc00217 	ldw	ra,8(sp)
    830c:	dc400117 	ldw	r17,4(sp)
    8310:	dc000017 	ldw	r16,0(sp)
    8314:	dec00304 	addi	sp,sp,12
    8318:	f800283a 	ret
    831c:	81400217 	ldw	r5,8(r16)
    8320:	28c00117 	ldw	r3,4(r5)
    8324:	183ee83a 	callr	r3
    8328:	0007883a 	mov	r3,zero
    832c:	147ff51e 	bne	r2,r17,8304 <_puts_r+0x60>
    8330:	003ff306 	br	8300 <_puts_r+0x5c>

00008334 <puts>:
    8334:	00800074 	movhi	r2,1
    8338:	10a52d04 	addi	r2,r2,-27468
    833c:	200b883a 	mov	r5,r4
    8340:	11000017 	ldw	r4,0(r2)
    8344:	00082a41 	jmpi	82a4 <_puts_r>

00008348 <strlen>:
    8348:	20800007 	ldb	r2,0(r4)
    834c:	10000526 	beq	r2,zero,8364 <strlen+0x1c>
    8350:	2007883a 	mov	r3,r4
    8354:	18c00044 	addi	r3,r3,1
    8358:	18800007 	ldb	r2,0(r3)
    835c:	103ffd1e 	bne	r2,zero,8354 <strlen+0xc>
    8360:	1905c83a 	sub	r2,r3,r4
    8364:	f800283a 	ret

00008368 <print_repeat>:
    8368:	defffb04 	addi	sp,sp,-20
    836c:	dc800315 	stw	r18,12(sp)
    8370:	dc400215 	stw	r17,8(sp)
    8374:	dc000115 	stw	r16,4(sp)
    8378:	dfc00415 	stw	ra,16(sp)
    837c:	2025883a 	mov	r18,r4
    8380:	2823883a 	mov	r17,r5
    8384:	3821883a 	mov	r16,r7
    8388:	d9800005 	stb	r6,0(sp)
    838c:	9009883a 	mov	r4,r18
    8390:	880b883a 	mov	r5,r17
    8394:	d80d883a 	mov	r6,sp
    8398:	01c00044 	movi	r7,1
    839c:	04000b0e 	bge	zero,r16,83cc <print_repeat+0x64>
    83a0:	88c00117 	ldw	r3,4(r17)
    83a4:	843fffc4 	addi	r16,r16,-1
    83a8:	183ee83a 	callr	r3
    83ac:	103ff726 	beq	r2,zero,838c <print_repeat+0x24>
    83b0:	00bfffc4 	movi	r2,-1
    83b4:	dfc00417 	ldw	ra,16(sp)
    83b8:	dc800317 	ldw	r18,12(sp)
    83bc:	dc400217 	ldw	r17,8(sp)
    83c0:	dc000117 	ldw	r16,4(sp)
    83c4:	dec00504 	addi	sp,sp,20
    83c8:	f800283a 	ret
    83cc:	0005883a 	mov	r2,zero
    83d0:	dfc00417 	ldw	ra,16(sp)
    83d4:	dc800317 	ldw	r18,12(sp)
    83d8:	dc400217 	ldw	r17,8(sp)
    83dc:	dc000117 	ldw	r16,4(sp)
    83e0:	dec00504 	addi	sp,sp,20
    83e4:	f800283a 	ret

000083e8 <___vfprintf_internal_r>:
    83e8:	deffe304 	addi	sp,sp,-116
    83ec:	df001b15 	stw	fp,108(sp)
    83f0:	ddc01a15 	stw	r23,104(sp)
    83f4:	dd001715 	stw	r20,92(sp)
    83f8:	dc801515 	stw	r18,84(sp)
    83fc:	dc001315 	stw	r16,76(sp)
    8400:	dfc01c15 	stw	ra,112(sp)
    8404:	dd801915 	stw	r22,100(sp)
    8408:	dd401815 	stw	r21,96(sp)
    840c:	dcc01615 	stw	r19,88(sp)
    8410:	dc401415 	stw	r17,80(sp)
    8414:	d9001015 	stw	r4,64(sp)
    8418:	2829883a 	mov	r20,r5
    841c:	d9c01115 	stw	r7,68(sp)
    8420:	3025883a 	mov	r18,r6
    8424:	0021883a 	mov	r16,zero
    8428:	d8000f15 	stw	zero,60(sp)
    842c:	d8000e15 	stw	zero,56(sp)
    8430:	0039883a 	mov	fp,zero
    8434:	d8000915 	stw	zero,36(sp)
    8438:	d8000d15 	stw	zero,52(sp)
    843c:	d8000c15 	stw	zero,48(sp)
    8440:	d8000b15 	stw	zero,44(sp)
    8444:	002f883a 	mov	r23,zero
    8448:	91400003 	ldbu	r5,0(r18)
    844c:	01c00044 	movi	r7,1
    8450:	94800044 	addi	r18,r18,1
    8454:	29003fcc 	andi	r4,r5,255
    8458:	2100201c 	xori	r4,r4,128
    845c:	213fe004 	addi	r4,r4,-128
    8460:	20001526 	beq	r4,zero,84b8 <___vfprintf_internal_r+0xd0>
    8464:	81c03526 	beq	r16,r7,853c <___vfprintf_internal_r+0x154>
    8468:	3c002016 	blt	r7,r16,84ec <___vfprintf_internal_r+0x104>
    846c:	803ff61e 	bne	r16,zero,8448 <___vfprintf_internal_r+0x60>
    8470:	00800944 	movi	r2,37
    8474:	2081501e 	bne	r4,r2,89b8 <___vfprintf_internal_r+0x5d0>
    8478:	073fffc4 	movi	fp,-1
    847c:	00800284 	movi	r2,10
    8480:	d9c00c15 	stw	r7,48(sp)
    8484:	d8000f15 	stw	zero,60(sp)
    8488:	d8000e15 	stw	zero,56(sp)
    848c:	df000915 	stw	fp,36(sp)
    8490:	d8800d15 	stw	r2,52(sp)
    8494:	d8000b15 	stw	zero,44(sp)
    8498:	91400003 	ldbu	r5,0(r18)
    849c:	3821883a 	mov	r16,r7
    84a0:	94800044 	addi	r18,r18,1
    84a4:	29003fcc 	andi	r4,r5,255
    84a8:	2100201c 	xori	r4,r4,128
    84ac:	213fe004 	addi	r4,r4,-128
    84b0:	01c00044 	movi	r7,1
    84b4:	203feb1e 	bne	r4,zero,8464 <___vfprintf_internal_r+0x7c>
    84b8:	b805883a 	mov	r2,r23
    84bc:	dfc01c17 	ldw	ra,112(sp)
    84c0:	df001b17 	ldw	fp,108(sp)
    84c4:	ddc01a17 	ldw	r23,104(sp)
    84c8:	dd801917 	ldw	r22,100(sp)
    84cc:	dd401817 	ldw	r21,96(sp)
    84d0:	dd001717 	ldw	r20,92(sp)
    84d4:	dcc01617 	ldw	r19,88(sp)
    84d8:	dc801517 	ldw	r18,84(sp)
    84dc:	dc401417 	ldw	r17,80(sp)
    84e0:	dc001317 	ldw	r16,76(sp)
    84e4:	dec01d04 	addi	sp,sp,116
    84e8:	f800283a 	ret
    84ec:	00800084 	movi	r2,2
    84f0:	80801726 	beq	r16,r2,8550 <___vfprintf_internal_r+0x168>
    84f4:	008000c4 	movi	r2,3
    84f8:	80bfd31e 	bne	r16,r2,8448 <___vfprintf_internal_r+0x60>
    84fc:	2c7ff404 	addi	r17,r5,-48
    8500:	88c03fcc 	andi	r3,r17,255
    8504:	00800244 	movi	r2,9
    8508:	10c02136 	bltu	r2,r3,8590 <___vfprintf_internal_r+0x1a8>
    850c:	d8c00917 	ldw	r3,36(sp)
    8510:	18012716 	blt	r3,zero,89b0 <___vfprintf_internal_r+0x5c8>
    8514:	d9000917 	ldw	r4,36(sp)
    8518:	01400284 	movi	r5,10
    851c:	0008ee80 	call	8ee8 <__mulsi3>
    8520:	1007883a 	mov	r3,r2
    8524:	88803fcc 	andi	r2,r17,255
    8528:	1080201c 	xori	r2,r2,128
    852c:	10bfe004 	addi	r2,r2,-128
    8530:	1887883a 	add	r3,r3,r2
    8534:	d8c00915 	stw	r3,36(sp)
    8538:	003fc306 	br	8448 <___vfprintf_internal_r+0x60>
    853c:	00800c04 	movi	r2,48
    8540:	2080b326 	beq	r4,r2,8810 <___vfprintf_internal_r+0x428>
    8544:	00800944 	movi	r2,37
    8548:	20812726 	beq	r4,r2,89e8 <___vfprintf_internal_r+0x600>
    854c:	04000084 	movi	r16,2
    8550:	2c7ff404 	addi	r17,r5,-48
    8554:	88c03fcc 	andi	r3,r17,255
    8558:	00800244 	movi	r2,9
    855c:	10c00a36 	bltu	r2,r3,8588 <___vfprintf_internal_r+0x1a0>
    8560:	e000b416 	blt	fp,zero,8834 <___vfprintf_internal_r+0x44c>
    8564:	e009883a 	mov	r4,fp
    8568:	01400284 	movi	r5,10
    856c:	0008ee80 	call	8ee8 <__mulsi3>
    8570:	1007883a 	mov	r3,r2
    8574:	88803fcc 	andi	r2,r17,255
    8578:	1080201c 	xori	r2,r2,128
    857c:	10bfe004 	addi	r2,r2,-128
    8580:	18b9883a 	add	fp,r3,r2
    8584:	003fb006 	br	8448 <___vfprintf_internal_r+0x60>
    8588:	00800b84 	movi	r2,46
    858c:	2080a326 	beq	r4,r2,881c <___vfprintf_internal_r+0x434>
    8590:	00801b04 	movi	r2,108
    8594:	2080a326 	beq	r4,r2,8824 <___vfprintf_internal_r+0x43c>
    8598:	d8c00917 	ldw	r3,36(sp)
    859c:	1800a716 	blt	r3,zero,883c <___vfprintf_internal_r+0x454>
    85a0:	d8000f15 	stw	zero,60(sp)
    85a4:	28bfea04 	addi	r2,r5,-88
    85a8:	10803fcc 	andi	r2,r2,255
    85ac:	00c00804 	movi	r3,32
    85b0:	18802836 	bltu	r3,r2,8654 <___vfprintf_internal_r+0x26c>
    85b4:	1085883a 	add	r2,r2,r2
    85b8:	1085883a 	add	r2,r2,r2
    85bc:	00c00074 	movhi	r3,1
    85c0:	18e17404 	addi	r3,r3,-31280
    85c4:	10c5883a 	add	r2,r2,r3
    85c8:	11000017 	ldw	r4,0(r2)
    85cc:	2000683a 	jmp	r4
    85d0:	0000865c 	xori	zero,zero,537
    85d4:	00008654 	movui	zero,537
    85d8:	00008654 	movui	zero,537
    85dc:	00008654 	movui	zero,537
    85e0:	00008654 	movui	zero,537
    85e4:	00008654 	movui	zero,537
    85e8:	00008654 	movui	zero,537
    85ec:	00008654 	movui	zero,537
    85f0:	00008654 	movui	zero,537
    85f4:	00008654 	movui	zero,537
    85f8:	00008654 	movui	zero,537
    85fc:	00008888 	cmpgei	zero,zero,546
    8600:	00008670 	cmpltui	zero,zero,537
    8604:	00008654 	movui	zero,537
    8608:	00008654 	movui	zero,537
    860c:	00008654 	movui	zero,537
    8610:	00008654 	movui	zero,537
    8614:	00008670 	cmpltui	zero,zero,537
    8618:	00008654 	movui	zero,537
    861c:	00008654 	movui	zero,537
    8620:	00008654 	movui	zero,537
    8624:	00008654 	movui	zero,537
    8628:	00008654 	movui	zero,537
    862c:	000088f0 	cmpltui	zero,zero,547
    8630:	00008654 	movui	zero,537
    8634:	00008654 	movui	zero,537
    8638:	00008654 	movui	zero,537
    863c:	00008900 	call	890 <__alt_mem_onchip_mem-0x7770>
    8640:	00008654 	movui	zero,537
    8644:	000087d4 	movui	zero,543
    8648:	00008654 	movui	zero,537
    864c:	00008654 	movui	zero,537
    8650:	000087cc 	andi	zero,zero,543
    8654:	0021883a 	mov	r16,zero
    8658:	003f7b06 	br	8448 <___vfprintf_internal_r+0x60>
    865c:	00c00404 	movi	r3,16
    8660:	00800044 	movi	r2,1
    8664:	d8c00d15 	stw	r3,52(sp)
    8668:	d8000c15 	stw	zero,48(sp)
    866c:	d8800b15 	stw	r2,44(sp)
    8670:	d8c00e17 	ldw	r3,56(sp)
    8674:	1805003a 	cmpeq	r2,r3,zero
    8678:	10005a1e 	bne	r2,zero,87e4 <___vfprintf_internal_r+0x3fc>
    867c:	d8800c17 	ldw	r2,48(sp)
    8680:	1000781e 	bne	r2,zero,8864 <___vfprintf_internal_r+0x47c>
    8684:	d8801117 	ldw	r2,68(sp)
    8688:	d8000a15 	stw	zero,40(sp)
    868c:	14400017 	ldw	r17,0(r2)
    8690:	11c00104 	addi	r7,r2,4
    8694:	d9c01115 	stw	r7,68(sp)
    8698:	88005a26 	beq	r17,zero,8804 <___vfprintf_internal_r+0x41c>
    869c:	d8c00b17 	ldw	r3,44(sp)
    86a0:	dcc00044 	addi	r19,sp,1
    86a4:	05800244 	movi	r22,9
    86a8:	182b003a 	cmpeq	r21,r3,zero
    86ac:	dcc01215 	stw	r19,72(sp)
    86b0:	00000506 	br	86c8 <___vfprintf_internal_r+0x2e0>
    86b4:	21000c04 	addi	r4,r4,48
    86b8:	99000005 	stb	r4,0(r19)
    86bc:	9cc00044 	addi	r19,r19,1
    86c0:	80000f26 	beq	r16,zero,8700 <___vfprintf_internal_r+0x318>
    86c4:	8023883a 	mov	r17,r16
    86c8:	d9400d17 	ldw	r5,52(sp)
    86cc:	8809883a 	mov	r4,r17
    86d0:	0008ed80 	call	8ed8 <__udivsi3>
    86d4:	d9000d17 	ldw	r4,52(sp)
    86d8:	100b883a 	mov	r5,r2
    86dc:	1021883a 	mov	r16,r2
    86e0:	0008ee80 	call	8ee8 <__mulsi3>
    86e4:	8889c83a 	sub	r4,r17,r2
    86e8:	b13ff20e 	bge	r22,r4,86b4 <___vfprintf_internal_r+0x2cc>
    86ec:	a8009f1e 	bne	r21,zero,896c <___vfprintf_internal_r+0x584>
    86f0:	21000dc4 	addi	r4,r4,55
    86f4:	99000005 	stb	r4,0(r19)
    86f8:	9cc00044 	addi	r19,r19,1
    86fc:	803ff11e 	bne	r16,zero,86c4 <___vfprintf_internal_r+0x2dc>
    8700:	d8801217 	ldw	r2,72(sp)
    8704:	98a3c83a 	sub	r17,r19,r2
    8708:	d8c00917 	ldw	r3,36(sp)
    870c:	1c4bc83a 	sub	r5,r3,r17
    8710:	0140130e 	bge	zero,r5,8760 <___vfprintf_internal_r+0x378>
    8714:	d8c00044 	addi	r3,sp,1
    8718:	18800804 	addi	r2,r3,32
    871c:	9880102e 	bgeu	r19,r2,8760 <___vfprintf_internal_r+0x378>
    8720:	00800c04 	movi	r2,48
    8724:	28ffffc4 	addi	r3,r5,-1
    8728:	98800005 	stb	r2,0(r19)
    872c:	99000044 	addi	r4,r19,1
    8730:	00c0080e 	bge	zero,r3,8754 <___vfprintf_internal_r+0x36c>
    8734:	d8c00044 	addi	r3,sp,1
    8738:	18800804 	addi	r2,r3,32
    873c:	2080052e 	bgeu	r4,r2,8754 <___vfprintf_internal_r+0x36c>
    8740:	00800c04 	movi	r2,48
    8744:	20800005 	stb	r2,0(r4)
    8748:	21000044 	addi	r4,r4,1
    874c:	9945883a 	add	r2,r19,r5
    8750:	20bff81e 	bne	r4,r2,8734 <___vfprintf_internal_r+0x34c>
    8754:	d8801217 	ldw	r2,72(sp)
    8758:	2027883a 	mov	r19,r4
    875c:	20a3c83a 	sub	r17,r4,r2
    8760:	d8c00a17 	ldw	r3,40(sp)
    8764:	1c45883a 	add	r2,r3,r17
    8768:	e0a1c83a 	sub	r16,fp,r2
    876c:	d8800f17 	ldw	r2,60(sp)
    8770:	10008026 	beq	r2,zero,8974 <___vfprintf_internal_r+0x58c>
    8774:	1805003a 	cmpeq	r2,r3,zero
    8778:	1000ae26 	beq	r2,zero,8a34 <___vfprintf_internal_r+0x64c>
    877c:	0400a516 	blt	zero,r16,8a14 <___vfprintf_internal_r+0x62c>
    8780:	b805883a 	mov	r2,r23
    8784:	0440950e 	bge	zero,r17,89dc <___vfprintf_internal_r+0x5f4>
    8788:	102f883a 	mov	r23,r2
    878c:	1461883a 	add	r16,r2,r17
    8790:	00000206 	br	879c <___vfprintf_internal_r+0x3b4>
    8794:	bdc00044 	addi	r23,r23,1
    8798:	85ffae26 	beq	r16,r23,8654 <___vfprintf_internal_r+0x26c>
    879c:	9cffffc4 	addi	r19,r19,-1
    87a0:	98800003 	ldbu	r2,0(r19)
    87a4:	a0c00117 	ldw	r3,4(r20)
    87a8:	d9001017 	ldw	r4,64(sp)
    87ac:	d8800005 	stb	r2,0(sp)
    87b0:	a00b883a 	mov	r5,r20
    87b4:	d80d883a 	mov	r6,sp
    87b8:	01c00044 	movi	r7,1
    87bc:	183ee83a 	callr	r3
    87c0:	103ff426 	beq	r2,zero,8794 <___vfprintf_internal_r+0x3ac>
    87c4:	05ffffc4 	movi	r23,-1
    87c8:	003f3b06 	br	84b8 <___vfprintf_internal_r+0xd0>
    87cc:	00c00404 	movi	r3,16
    87d0:	d8c00d15 	stw	r3,52(sp)
    87d4:	d8000c15 	stw	zero,48(sp)
    87d8:	d8c00e17 	ldw	r3,56(sp)
    87dc:	1805003a 	cmpeq	r2,r3,zero
    87e0:	103fa626 	beq	r2,zero,867c <___vfprintf_internal_r+0x294>
    87e4:	d8c00c17 	ldw	r3,48(sp)
    87e8:	1800171e 	bne	r3,zero,8848 <___vfprintf_internal_r+0x460>
    87ec:	d8c01117 	ldw	r3,68(sp)
    87f0:	d8000a15 	stw	zero,40(sp)
    87f4:	1c400017 	ldw	r17,0(r3)
    87f8:	19c00104 	addi	r7,r3,4
    87fc:	d9c01115 	stw	r7,68(sp)
    8800:	883fa61e 	bne	r17,zero,869c <___vfprintf_internal_r+0x2b4>
    8804:	dcc00044 	addi	r19,sp,1
    8808:	dcc01215 	stw	r19,72(sp)
    880c:	003fbe06 	br	8708 <___vfprintf_internal_r+0x320>
    8810:	04000084 	movi	r16,2
    8814:	d9c00f15 	stw	r7,60(sp)
    8818:	003f0b06 	br	8448 <___vfprintf_internal_r+0x60>
    881c:	040000c4 	movi	r16,3
    8820:	003f0906 	br	8448 <___vfprintf_internal_r+0x60>
    8824:	00800044 	movi	r2,1
    8828:	040000c4 	movi	r16,3
    882c:	d8800e15 	stw	r2,56(sp)
    8830:	003f0506 	br	8448 <___vfprintf_internal_r+0x60>
    8834:	0007883a 	mov	r3,zero
    8838:	003f4e06 	br	8574 <___vfprintf_internal_r+0x18c>
    883c:	00800044 	movi	r2,1
    8840:	d8800915 	stw	r2,36(sp)
    8844:	003f5706 	br	85a4 <___vfprintf_internal_r+0x1bc>
    8848:	d8801117 	ldw	r2,68(sp)
    884c:	14400017 	ldw	r17,0(r2)
    8850:	10800104 	addi	r2,r2,4
    8854:	d8801115 	stw	r2,68(sp)
    8858:	88000716 	blt	r17,zero,8878 <___vfprintf_internal_r+0x490>
    885c:	d8000a15 	stw	zero,40(sp)
    8860:	003f8d06 	br	8698 <___vfprintf_internal_r+0x2b0>
    8864:	d8c01117 	ldw	r3,68(sp)
    8868:	1c400017 	ldw	r17,0(r3)
    886c:	18c00104 	addi	r3,r3,4
    8870:	d8c01115 	stw	r3,68(sp)
    8874:	883ff90e 	bge	r17,zero,885c <___vfprintf_internal_r+0x474>
    8878:	00800044 	movi	r2,1
    887c:	0463c83a 	sub	r17,zero,r17
    8880:	d8800a15 	stw	r2,40(sp)
    8884:	003f8406 	br	8698 <___vfprintf_internal_r+0x2b0>
    8888:	04000044 	movi	r16,1
    888c:	8700080e 	bge	r16,fp,88b0 <___vfprintf_internal_r+0x4c8>
    8890:	d9001017 	ldw	r4,64(sp)
    8894:	a00b883a 	mov	r5,r20
    8898:	01800804 	movi	r6,32
    889c:	e1ffffc4 	addi	r7,fp,-1
    88a0:	00083680 	call	8368 <print_repeat>
    88a4:	103fc71e 	bne	r2,zero,87c4 <___vfprintf_internal_r+0x3dc>
    88a8:	e5c5883a 	add	r2,fp,r23
    88ac:	15ffffc4 	addi	r23,r2,-1
    88b0:	d8c01117 	ldw	r3,68(sp)
    88b4:	d9001017 	ldw	r4,64(sp)
    88b8:	800f883a 	mov	r7,r16
    88bc:	18800017 	ldw	r2,0(r3)
    88c0:	a0c00117 	ldw	r3,4(r20)
    88c4:	a00b883a 	mov	r5,r20
    88c8:	d8800005 	stb	r2,0(sp)
    88cc:	d80d883a 	mov	r6,sp
    88d0:	183ee83a 	callr	r3
    88d4:	103fbb1e 	bne	r2,zero,87c4 <___vfprintf_internal_r+0x3dc>
    88d8:	d8801117 	ldw	r2,68(sp)
    88dc:	bdc00044 	addi	r23,r23,1
    88e0:	0021883a 	mov	r16,zero
    88e4:	10800104 	addi	r2,r2,4
    88e8:	d8801115 	stw	r2,68(sp)
    88ec:	003ed606 	br	8448 <___vfprintf_internal_r+0x60>
    88f0:	00800204 	movi	r2,8
    88f4:	d8800d15 	stw	r2,52(sp)
    88f8:	d8000c15 	stw	zero,48(sp)
    88fc:	003fb606 	br	87d8 <___vfprintf_internal_r+0x3f0>
    8900:	d8c01117 	ldw	r3,68(sp)
    8904:	1cc00017 	ldw	r19,0(r3)
    8908:	9809883a 	mov	r4,r19
    890c:	00083480 	call	8348 <strlen>
    8910:	e0a1c83a 	sub	r16,fp,r2
    8914:	1023883a 	mov	r17,r2
    8918:	0400070e 	bge	zero,r16,8938 <___vfprintf_internal_r+0x550>
    891c:	d9001017 	ldw	r4,64(sp)
    8920:	a00b883a 	mov	r5,r20
    8924:	01800804 	movi	r6,32
    8928:	800f883a 	mov	r7,r16
    892c:	00083680 	call	8368 <print_repeat>
    8930:	103fa41e 	bne	r2,zero,87c4 <___vfprintf_internal_r+0x3dc>
    8934:	bc2f883a 	add	r23,r23,r16
    8938:	a0c00117 	ldw	r3,4(r20)
    893c:	d9001017 	ldw	r4,64(sp)
    8940:	980d883a 	mov	r6,r19
    8944:	a00b883a 	mov	r5,r20
    8948:	880f883a 	mov	r7,r17
    894c:	183ee83a 	callr	r3
    8950:	103f9c1e 	bne	r2,zero,87c4 <___vfprintf_internal_r+0x3dc>
    8954:	d8801117 	ldw	r2,68(sp)
    8958:	bc6f883a 	add	r23,r23,r17
    895c:	0021883a 	mov	r16,zero
    8960:	10800104 	addi	r2,r2,4
    8964:	d8801115 	stw	r2,68(sp)
    8968:	003eb706 	br	8448 <___vfprintf_internal_r+0x60>
    896c:	210015c4 	addi	r4,r4,87
    8970:	003f5106 	br	86b8 <___vfprintf_internal_r+0x2d0>
    8974:	04003b16 	blt	zero,r16,8a64 <___vfprintf_internal_r+0x67c>
    8978:	d8c00a17 	ldw	r3,40(sp)
    897c:	1805003a 	cmpeq	r2,r3,zero
    8980:	103f7f1e 	bne	r2,zero,8780 <___vfprintf_internal_r+0x398>
    8984:	a0c00117 	ldw	r3,4(r20)
    8988:	d9001017 	ldw	r4,64(sp)
    898c:	00800b44 	movi	r2,45
    8990:	d8800005 	stb	r2,0(sp)
    8994:	a00b883a 	mov	r5,r20
    8998:	d80d883a 	mov	r6,sp
    899c:	01c00044 	movi	r7,1
    89a0:	183ee83a 	callr	r3
    89a4:	103f871e 	bne	r2,zero,87c4 <___vfprintf_internal_r+0x3dc>
    89a8:	b8800044 	addi	r2,r23,1
    89ac:	003f7506 	br	8784 <___vfprintf_internal_r+0x39c>
    89b0:	0007883a 	mov	r3,zero
    89b4:	003edb06 	br	8524 <___vfprintf_internal_r+0x13c>
    89b8:	a0c00117 	ldw	r3,4(r20)
    89bc:	d9001017 	ldw	r4,64(sp)
    89c0:	d9400005 	stb	r5,0(sp)
    89c4:	d80d883a 	mov	r6,sp
    89c8:	a00b883a 	mov	r5,r20
    89cc:	183ee83a 	callr	r3
    89d0:	103f7c1e 	bne	r2,zero,87c4 <___vfprintf_internal_r+0x3dc>
    89d4:	bdc00044 	addi	r23,r23,1
    89d8:	003e9b06 	br	8448 <___vfprintf_internal_r+0x60>
    89dc:	102f883a 	mov	r23,r2
    89e0:	0021883a 	mov	r16,zero
    89e4:	003e9806 	br	8448 <___vfprintf_internal_r+0x60>
    89e8:	a0c00117 	ldw	r3,4(r20)
    89ec:	d9000005 	stb	r4,0(sp)
    89f0:	d9001017 	ldw	r4,64(sp)
    89f4:	a00b883a 	mov	r5,r20
    89f8:	d80d883a 	mov	r6,sp
    89fc:	800f883a 	mov	r7,r16
    8a00:	183ee83a 	callr	r3
    8a04:	103f6f1e 	bne	r2,zero,87c4 <___vfprintf_internal_r+0x3dc>
    8a08:	bc2f883a 	add	r23,r23,r16
    8a0c:	0021883a 	mov	r16,zero
    8a10:	003e8d06 	br	8448 <___vfprintf_internal_r+0x60>
    8a14:	d9001017 	ldw	r4,64(sp)
    8a18:	a00b883a 	mov	r5,r20
    8a1c:	01800c04 	movi	r6,48
    8a20:	800f883a 	mov	r7,r16
    8a24:	00083680 	call	8368 <print_repeat>
    8a28:	103f661e 	bne	r2,zero,87c4 <___vfprintf_internal_r+0x3dc>
    8a2c:	bc05883a 	add	r2,r23,r16
    8a30:	003f5406 	br	8784 <___vfprintf_internal_r+0x39c>
    8a34:	a0c00117 	ldw	r3,4(r20)
    8a38:	d9001017 	ldw	r4,64(sp)
    8a3c:	00800b44 	movi	r2,45
    8a40:	d8800005 	stb	r2,0(sp)
    8a44:	a00b883a 	mov	r5,r20
    8a48:	d80d883a 	mov	r6,sp
    8a4c:	01c00044 	movi	r7,1
    8a50:	183ee83a 	callr	r3
    8a54:	103f5b1e 	bne	r2,zero,87c4 <___vfprintf_internal_r+0x3dc>
    8a58:	bdc00044 	addi	r23,r23,1
    8a5c:	043f480e 	bge	zero,r16,8780 <___vfprintf_internal_r+0x398>
    8a60:	003fec06 	br	8a14 <___vfprintf_internal_r+0x62c>
    8a64:	d9001017 	ldw	r4,64(sp)
    8a68:	a00b883a 	mov	r5,r20
    8a6c:	01800804 	movi	r6,32
    8a70:	800f883a 	mov	r7,r16
    8a74:	00083680 	call	8368 <print_repeat>
    8a78:	103f521e 	bne	r2,zero,87c4 <___vfprintf_internal_r+0x3dc>
    8a7c:	bc2f883a 	add	r23,r23,r16
    8a80:	003fbd06 	br	8978 <___vfprintf_internal_r+0x590>

00008a84 <__vfprintf_internal>:
    8a84:	00800074 	movhi	r2,1
    8a88:	10a52d04 	addi	r2,r2,-27468
    8a8c:	2013883a 	mov	r9,r4
    8a90:	11000017 	ldw	r4,0(r2)
    8a94:	2805883a 	mov	r2,r5
    8a98:	300f883a 	mov	r7,r6
    8a9c:	480b883a 	mov	r5,r9
    8aa0:	100d883a 	mov	r6,r2
    8aa4:	00083e81 	jmpi	83e8 <___vfprintf_internal_r>

00008aa8 <register_fini>:
    8aa8:	f800283a 	ret

00008aac <__call_exitprocs>:
    8aac:	defff304 	addi	sp,sp,-52
    8ab0:	00800074 	movhi	r2,1
    8ab4:	10a52e04 	addi	r2,r2,-27464
    8ab8:	df000b15 	stw	fp,44(sp)
    8abc:	17000017 	ldw	fp,0(r2)
    8ac0:	00800034 	movhi	r2,0
    8ac4:	10800004 	addi	r2,r2,0
    8ac8:	1005003a 	cmpeq	r2,r2,zero
    8acc:	d8800215 	stw	r2,8(sp)
    8ad0:	e0800c04 	addi	r2,fp,48
    8ad4:	dd800915 	stw	r22,36(sp)
    8ad8:	dd400815 	stw	r21,32(sp)
    8adc:	dfc00c15 	stw	ra,48(sp)
    8ae0:	ddc00a15 	stw	r23,40(sp)
    8ae4:	dd000715 	stw	r20,28(sp)
    8ae8:	dcc00615 	stw	r19,24(sp)
    8aec:	dc800515 	stw	r18,20(sp)
    8af0:	dc400415 	stw	r17,16(sp)
    8af4:	dc000315 	stw	r16,12(sp)
    8af8:	282d883a 	mov	r22,r5
    8afc:	d9000115 	stw	r4,4(sp)
    8b00:	d8800015 	stw	r2,0(sp)
    8b04:	282b003a 	cmpeq	r21,r5,zero
    8b08:	e4400c17 	ldw	r17,48(fp)
    8b0c:	88001226 	beq	r17,zero,8b58 <__call_exitprocs+0xac>
    8b10:	ddc00017 	ldw	r23,0(sp)
    8b14:	88800117 	ldw	r2,4(r17)
    8b18:	8c802217 	ldw	r18,136(r17)
    8b1c:	143fffc4 	addi	r16,r2,-1
    8b20:	80000b16 	blt	r16,zero,8b50 <__call_exitprocs+0xa4>
    8b24:	9027003a 	cmpeq	r19,r18,zero
    8b28:	a800171e 	bne	r21,zero,8b88 <__call_exitprocs+0xdc>
    8b2c:	9800051e 	bne	r19,zero,8b44 <__call_exitprocs+0x98>
    8b30:	8409883a 	add	r4,r16,r16
    8b34:	2105883a 	add	r2,r4,r4
    8b38:	1485883a 	add	r2,r2,r18
    8b3c:	10c02017 	ldw	r3,128(r2)
    8b40:	b0c01226 	beq	r22,r3,8b8c <__call_exitprocs+0xe0>
    8b44:	843fffc4 	addi	r16,r16,-1
    8b48:	00bfffc4 	movi	r2,-1
    8b4c:	80bff61e 	bne	r16,r2,8b28 <__call_exitprocs+0x7c>
    8b50:	d8800217 	ldw	r2,8(sp)
    8b54:	10003226 	beq	r2,zero,8c20 <__call_exitprocs+0x174>
    8b58:	dfc00c17 	ldw	ra,48(sp)
    8b5c:	df000b17 	ldw	fp,44(sp)
    8b60:	ddc00a17 	ldw	r23,40(sp)
    8b64:	dd800917 	ldw	r22,36(sp)
    8b68:	dd400817 	ldw	r21,32(sp)
    8b6c:	dd000717 	ldw	r20,28(sp)
    8b70:	dcc00617 	ldw	r19,24(sp)
    8b74:	dc800517 	ldw	r18,20(sp)
    8b78:	dc400417 	ldw	r17,16(sp)
    8b7c:	dc000317 	ldw	r16,12(sp)
    8b80:	dec00d04 	addi	sp,sp,52
    8b84:	f800283a 	ret
    8b88:	8409883a 	add	r4,r16,r16
    8b8c:	88c00117 	ldw	r3,4(r17)
    8b90:	2105883a 	add	r2,r4,r4
    8b94:	1445883a 	add	r2,r2,r17
    8b98:	18ffffc4 	addi	r3,r3,-1
    8b9c:	11800217 	ldw	r6,8(r2)
    8ba0:	1c001826 	beq	r3,r16,8c04 <__call_exitprocs+0x158>
    8ba4:	10000215 	stw	zero,8(r2)
    8ba8:	303fe626 	beq	r6,zero,8b44 <__call_exitprocs+0x98>
    8bac:	8d000117 	ldw	r20,4(r17)
    8bb0:	9800121e 	bne	r19,zero,8bfc <__call_exitprocs+0x150>
    8bb4:	00c00044 	movi	r3,1
    8bb8:	1c06983a 	sll	r3,r3,r16
    8bbc:	90804017 	ldw	r2,256(r18)
    8bc0:	1884703a 	and	r2,r3,r2
    8bc4:	10000d26 	beq	r2,zero,8bfc <__call_exitprocs+0x150>
    8bc8:	90804117 	ldw	r2,260(r18)
    8bcc:	1884703a 	and	r2,r3,r2
    8bd0:	10000e1e 	bne	r2,zero,8c0c <__call_exitprocs+0x160>
    8bd4:	2105883a 	add	r2,r4,r4
    8bd8:	1485883a 	add	r2,r2,r18
    8bdc:	11400017 	ldw	r5,0(r2)
    8be0:	d9000117 	ldw	r4,4(sp)
    8be4:	303ee83a 	callr	r6
    8be8:	88800117 	ldw	r2,4(r17)
    8bec:	a0bfc61e 	bne	r20,r2,8b08 <__call_exitprocs+0x5c>
    8bf0:	b8800017 	ldw	r2,0(r23)
    8bf4:	147fd326 	beq	r2,r17,8b44 <__call_exitprocs+0x98>
    8bf8:	003fc306 	br	8b08 <__call_exitprocs+0x5c>
    8bfc:	303ee83a 	callr	r6
    8c00:	003ff906 	br	8be8 <__call_exitprocs+0x13c>
    8c04:	8c000115 	stw	r16,4(r17)
    8c08:	003fe706 	br	8ba8 <__call_exitprocs+0xfc>
    8c0c:	2105883a 	add	r2,r4,r4
    8c10:	1485883a 	add	r2,r2,r18
    8c14:	11000017 	ldw	r4,0(r2)
    8c18:	303ee83a 	callr	r6
    8c1c:	003ff206 	br	8be8 <__call_exitprocs+0x13c>
    8c20:	88800117 	ldw	r2,4(r17)
    8c24:	10000b1e 	bne	r2,zero,8c54 <__call_exitprocs+0x1a8>
    8c28:	89000017 	ldw	r4,0(r17)
    8c2c:	20000a26 	beq	r4,zero,8c58 <__call_exitprocs+0x1ac>
    8c30:	b9000015 	stw	r4,0(r23)
    8c34:	90000226 	beq	r18,zero,8c40 <__call_exitprocs+0x194>
    8c38:	9009883a 	mov	r4,r18
    8c3c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    8c40:	8809883a 	mov	r4,r17
    8c44:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    8c48:	bc400017 	ldw	r17,0(r23)
    8c4c:	883fb11e 	bne	r17,zero,8b14 <__call_exitprocs+0x68>
    8c50:	003fc106 	br	8b58 <__call_exitprocs+0xac>
    8c54:	89000017 	ldw	r4,0(r17)
    8c58:	882f883a 	mov	r23,r17
    8c5c:	2023883a 	mov	r17,r4
    8c60:	883fac1e 	bne	r17,zero,8b14 <__call_exitprocs+0x68>
    8c64:	003fbc06 	br	8b58 <__call_exitprocs+0xac>

00008c68 <__sfvwrite_small_dev>:
    8c68:	2880000b 	ldhu	r2,0(r5)
    8c6c:	defffa04 	addi	sp,sp,-24
    8c70:	dcc00315 	stw	r19,12(sp)
    8c74:	1080020c 	andi	r2,r2,8
    8c78:	dc800215 	stw	r18,8(sp)
    8c7c:	dc400115 	stw	r17,4(sp)
    8c80:	dfc00515 	stw	ra,20(sp)
    8c84:	dd000415 	stw	r20,16(sp)
    8c88:	dc000015 	stw	r16,0(sp)
    8c8c:	2825883a 	mov	r18,r5
    8c90:	2027883a 	mov	r19,r4
    8c94:	3023883a 	mov	r17,r6
    8c98:	10002026 	beq	r2,zero,8d1c <__sfvwrite_small_dev+0xb4>
    8c9c:	2940008f 	ldh	r5,2(r5)
    8ca0:	28000f16 	blt	r5,zero,8ce0 <__sfvwrite_small_dev+0x78>
    8ca4:	01c01b0e 	bge	zero,r7,8d14 <__sfvwrite_small_dev+0xac>
    8ca8:	3821883a 	mov	r16,r7
    8cac:	05010004 	movi	r20,1024
    8cb0:	00000206 	br	8cbc <__sfvwrite_small_dev+0x54>
    8cb4:	0400170e 	bge	zero,r16,8d14 <__sfvwrite_small_dev+0xac>
    8cb8:	9140008f 	ldh	r5,2(r18)
    8cbc:	880d883a 	mov	r6,r17
    8cc0:	9809883a 	mov	r4,r19
    8cc4:	800f883a 	mov	r7,r16
    8cc8:	a400010e 	bge	r20,r16,8cd0 <__sfvwrite_small_dev+0x68>
    8ccc:	01c10004 	movi	r7,1024
    8cd0:	0008d240 	call	8d24 <_write_r>
    8cd4:	88a3883a 	add	r17,r17,r2
    8cd8:	80a1c83a 	sub	r16,r16,r2
    8cdc:	00bff516 	blt	zero,r2,8cb4 <__sfvwrite_small_dev+0x4c>
    8ce0:	9080000b 	ldhu	r2,0(r18)
    8ce4:	00ffffc4 	movi	r3,-1
    8ce8:	10801014 	ori	r2,r2,64
    8cec:	9080000d 	sth	r2,0(r18)
    8cf0:	1805883a 	mov	r2,r3
    8cf4:	dfc00517 	ldw	ra,20(sp)
    8cf8:	dd000417 	ldw	r20,16(sp)
    8cfc:	dcc00317 	ldw	r19,12(sp)
    8d00:	dc800217 	ldw	r18,8(sp)
    8d04:	dc400117 	ldw	r17,4(sp)
    8d08:	dc000017 	ldw	r16,0(sp)
    8d0c:	dec00604 	addi	sp,sp,24
    8d10:	f800283a 	ret
    8d14:	0007883a 	mov	r3,zero
    8d18:	003ff506 	br	8cf0 <__sfvwrite_small_dev+0x88>
    8d1c:	00ffffc4 	movi	r3,-1
    8d20:	003ff306 	br	8cf0 <__sfvwrite_small_dev+0x88>

00008d24 <_write_r>:
    8d24:	defffd04 	addi	sp,sp,-12
    8d28:	dc000015 	stw	r16,0(sp)
    8d2c:	04000074 	movhi	r16,1
    8d30:	84257304 	addi	r16,r16,-27188
    8d34:	dc400115 	stw	r17,4(sp)
    8d38:	80000015 	stw	zero,0(r16)
    8d3c:	2023883a 	mov	r17,r4
    8d40:	2809883a 	mov	r4,r5
    8d44:	300b883a 	mov	r5,r6
    8d48:	380d883a 	mov	r6,r7
    8d4c:	dfc00215 	stw	ra,8(sp)
    8d50:	0008fd80 	call	8fd8 <write>
    8d54:	1007883a 	mov	r3,r2
    8d58:	00bfffc4 	movi	r2,-1
    8d5c:	18800626 	beq	r3,r2,8d78 <_write_r+0x54>
    8d60:	1805883a 	mov	r2,r3
    8d64:	dfc00217 	ldw	ra,8(sp)
    8d68:	dc400117 	ldw	r17,4(sp)
    8d6c:	dc000017 	ldw	r16,0(sp)
    8d70:	dec00304 	addi	sp,sp,12
    8d74:	f800283a 	ret
    8d78:	80800017 	ldw	r2,0(r16)
    8d7c:	103ff826 	beq	r2,zero,8d60 <_write_r+0x3c>
    8d80:	88800015 	stw	r2,0(r17)
    8d84:	1805883a 	mov	r2,r3
    8d88:	dfc00217 	ldw	ra,8(sp)
    8d8c:	dc400117 	ldw	r17,4(sp)
    8d90:	dc000017 	ldw	r16,0(sp)
    8d94:	dec00304 	addi	sp,sp,12
    8d98:	f800283a 	ret

00008d9c <udivmodsi4>:
    8d9c:	29001b2e 	bgeu	r5,r4,8e0c <udivmodsi4+0x70>
    8da0:	28001a16 	blt	r5,zero,8e0c <udivmodsi4+0x70>
    8da4:	00800044 	movi	r2,1
    8da8:	0007883a 	mov	r3,zero
    8dac:	01c007c4 	movi	r7,31
    8db0:	00000306 	br	8dc0 <udivmodsi4+0x24>
    8db4:	19c01326 	beq	r3,r7,8e04 <udivmodsi4+0x68>
    8db8:	18c00044 	addi	r3,r3,1
    8dbc:	28000416 	blt	r5,zero,8dd0 <udivmodsi4+0x34>
    8dc0:	294b883a 	add	r5,r5,r5
    8dc4:	1085883a 	add	r2,r2,r2
    8dc8:	293ffa36 	bltu	r5,r4,8db4 <udivmodsi4+0x18>
    8dcc:	10000d26 	beq	r2,zero,8e04 <udivmodsi4+0x68>
    8dd0:	0007883a 	mov	r3,zero
    8dd4:	21400236 	bltu	r4,r5,8de0 <udivmodsi4+0x44>
    8dd8:	2149c83a 	sub	r4,r4,r5
    8ddc:	1886b03a 	or	r3,r3,r2
    8de0:	1004d07a 	srli	r2,r2,1
    8de4:	280ad07a 	srli	r5,r5,1
    8de8:	103ffa1e 	bne	r2,zero,8dd4 <udivmodsi4+0x38>
    8dec:	30000226 	beq	r6,zero,8df8 <udivmodsi4+0x5c>
    8df0:	2005883a 	mov	r2,r4
    8df4:	f800283a 	ret
    8df8:	1809883a 	mov	r4,r3
    8dfc:	2005883a 	mov	r2,r4
    8e00:	f800283a 	ret
    8e04:	0007883a 	mov	r3,zero
    8e08:	003ff806 	br	8dec <udivmodsi4+0x50>
    8e0c:	00800044 	movi	r2,1
    8e10:	0007883a 	mov	r3,zero
    8e14:	003fef06 	br	8dd4 <udivmodsi4+0x38>

00008e18 <__divsi3>:
    8e18:	defffe04 	addi	sp,sp,-8
    8e1c:	dc000015 	stw	r16,0(sp)
    8e20:	dfc00115 	stw	ra,4(sp)
    8e24:	0021883a 	mov	r16,zero
    8e28:	20000c16 	blt	r4,zero,8e5c <__divsi3+0x44>
    8e2c:	000d883a 	mov	r6,zero
    8e30:	28000e16 	blt	r5,zero,8e6c <__divsi3+0x54>
    8e34:	0008d9c0 	call	8d9c <udivmodsi4>
    8e38:	1007883a 	mov	r3,r2
    8e3c:	8005003a 	cmpeq	r2,r16,zero
    8e40:	1000011e 	bne	r2,zero,8e48 <__divsi3+0x30>
    8e44:	00c7c83a 	sub	r3,zero,r3
    8e48:	1805883a 	mov	r2,r3
    8e4c:	dfc00117 	ldw	ra,4(sp)
    8e50:	dc000017 	ldw	r16,0(sp)
    8e54:	dec00204 	addi	sp,sp,8
    8e58:	f800283a 	ret
    8e5c:	0109c83a 	sub	r4,zero,r4
    8e60:	04000044 	movi	r16,1
    8e64:	000d883a 	mov	r6,zero
    8e68:	283ff20e 	bge	r5,zero,8e34 <__divsi3+0x1c>
    8e6c:	014bc83a 	sub	r5,zero,r5
    8e70:	8021003a 	cmpeq	r16,r16,zero
    8e74:	003fef06 	br	8e34 <__divsi3+0x1c>

00008e78 <__modsi3>:
    8e78:	deffff04 	addi	sp,sp,-4
    8e7c:	dfc00015 	stw	ra,0(sp)
    8e80:	01800044 	movi	r6,1
    8e84:	2807883a 	mov	r3,r5
    8e88:	20000416 	blt	r4,zero,8e9c <__modsi3+0x24>
    8e8c:	28000c16 	blt	r5,zero,8ec0 <__modsi3+0x48>
    8e90:	dfc00017 	ldw	ra,0(sp)
    8e94:	dec00104 	addi	sp,sp,4
    8e98:	0008d9c1 	jmpi	8d9c <udivmodsi4>
    8e9c:	0109c83a 	sub	r4,zero,r4
    8ea0:	28000b16 	blt	r5,zero,8ed0 <__modsi3+0x58>
    8ea4:	180b883a 	mov	r5,r3
    8ea8:	01800044 	movi	r6,1
    8eac:	0008d9c0 	call	8d9c <udivmodsi4>
    8eb0:	0085c83a 	sub	r2,zero,r2
    8eb4:	dfc00017 	ldw	ra,0(sp)
    8eb8:	dec00104 	addi	sp,sp,4
    8ebc:	f800283a 	ret
    8ec0:	014bc83a 	sub	r5,zero,r5
    8ec4:	dfc00017 	ldw	ra,0(sp)
    8ec8:	dec00104 	addi	sp,sp,4
    8ecc:	0008d9c1 	jmpi	8d9c <udivmodsi4>
    8ed0:	0147c83a 	sub	r3,zero,r5
    8ed4:	003ff306 	br	8ea4 <__modsi3+0x2c>

00008ed8 <__udivsi3>:
    8ed8:	000d883a 	mov	r6,zero
    8edc:	0008d9c1 	jmpi	8d9c <udivmodsi4>

00008ee0 <__umodsi3>:
    8ee0:	01800044 	movi	r6,1
    8ee4:	0008d9c1 	jmpi	8d9c <udivmodsi4>

00008ee8 <__mulsi3>:
    8ee8:	20000a26 	beq	r4,zero,8f14 <__mulsi3+0x2c>
    8eec:	0007883a 	mov	r3,zero
    8ef0:	2080004c 	andi	r2,r4,1
    8ef4:	1005003a 	cmpeq	r2,r2,zero
    8ef8:	2008d07a 	srli	r4,r4,1
    8efc:	1000011e 	bne	r2,zero,8f04 <__mulsi3+0x1c>
    8f00:	1947883a 	add	r3,r3,r5
    8f04:	294b883a 	add	r5,r5,r5
    8f08:	203ff91e 	bne	r4,zero,8ef0 <__mulsi3+0x8>
    8f0c:	1805883a 	mov	r2,r3
    8f10:	f800283a 	ret
    8f14:	0007883a 	mov	r3,zero
    8f18:	1805883a 	mov	r2,r3
    8f1c:	f800283a 	ret

00008f20 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8f20:	2900051e 	bne	r5,r4,8f38 <alt_load_section+0x18>
    8f24:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    8f28:	20800017 	ldw	r2,0(r4)
    8f2c:	21000104 	addi	r4,r4,4
    8f30:	28800015 	stw	r2,0(r5)
    8f34:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8f38:	29bffb1e 	bne	r5,r6,8f28 <alt_load_section+0x8>
    8f3c:	f800283a 	ret

00008f40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8f40:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8f44:	01000074 	movhi	r4,1
    8f48:	21253404 	addi	r4,r4,-27440
    8f4c:	01400074 	movhi	r5,1
    8f50:	2964f504 	addi	r5,r5,-27692
    8f54:	01800074 	movhi	r6,1
    8f58:	31a53404 	addi	r6,r6,-27440
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8f5c:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8f60:	0008f200 	call	8f20 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8f64:	01000074 	movhi	r4,1
    8f68:	21200804 	addi	r4,r4,-32736
    8f6c:	01400074 	movhi	r5,1
    8f70:	29600804 	addi	r5,r5,-32736
    8f74:	01800074 	movhi	r6,1
    8f78:	31a05004 	addi	r6,r6,-32448
    8f7c:	0008f200 	call	8f20 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8f80:	01000074 	movhi	r4,1
    8f84:	2124e104 	addi	r4,r4,-27772
    8f88:	01400074 	movhi	r5,1
    8f8c:	2964e104 	addi	r5,r5,-27772
    8f90:	01800074 	movhi	r6,1
    8f94:	31a4f504 	addi	r6,r6,-27692
    8f98:	0008f200 	call	8f20 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8f9c:	00091480 	call	9148 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8fa0:	dfc00017 	ldw	ra,0(sp)
    8fa4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8fa8:	000914c1 	jmpi	914c <alt_icache_flush_all>

00008fac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8fac:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8fb0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8fb4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8fb8:	00090680 	call	9068 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8fbc:	00090500 	call	9050 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8fc0:	d1204717 	ldw	r4,-32484(gp)
    8fc4:	d1604817 	ldw	r5,-32480(gp)
    8fc8:	d1a04917 	ldw	r6,-32476(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8fcc:	dfc00017 	ldw	ra,0(sp)
    8fd0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8fd4:	00081a01 	jmpi	81a0 <main>

00008fd8 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8fd8:	deffff04 	addi	sp,sp,-4
    8fdc:	2007883a 	mov	r3,r4
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8fe0:	00800044 	movi	r2,1
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8fe4:	dfc00015 	stw	ra,0(sp)
#endif

    switch (file) {
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    8fe8:	000f883a 	mov	r7,zero
    8fec:	01000074 	movhi	r4,1
    8ff0:	21252f04 	addi	r4,r4,-27460
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8ff4:	18800526 	beq	r3,r2,900c <write+0x34>
    8ff8:	00800084 	movi	r2,2
    8ffc:	1880061e 	bne	r3,r2,9018 <write+0x40>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    9000:	01000074 	movhi	r4,1
    9004:	21252f04 	addi	r4,r4,-27460
    9008:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
    900c:	dfc00017 	ldw	ra,0(sp)
    9010:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    9014:	00090881 	jmpi	9088 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    9018:	00800074 	movhi	r2,1
    901c:	10a53004 	addi	r2,r2,-27456
    9020:	10800017 	ldw	r2,0(r2)
    9024:	00c00074 	movhi	r3,1
    9028:	18e57304 	addi	r3,r3,-27188
    902c:	10000226 	beq	r2,zero,9038 <write+0x60>
    9030:	103ee83a 	callr	r2
    9034:	1007883a 	mov	r3,r2
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    9038:	00801444 	movi	r2,81
    903c:	18800015 	stw	r2,0(r3)
        return -1;
    }
}
    9040:	00bfffc4 	movi	r2,-1
    9044:	dfc00017 	ldw	ra,0(sp)
    9048:	dec00104 	addi	sp,sp,4
    904c:	f800283a 	ret

00009050 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    9050:	01000074 	movhi	r4,1
    9054:	21040004 	addi	r4,r4,4096
    9058:	000b883a 	mov	r5,zero
    905c:	01800044 	movi	r6,1
    9060:	01c0fa04 	movi	r7,1000
    9064:	00090bc1 	jmpi	90bc <alt_avalon_timer_sc_init>

00009068 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9068:	deffff04 	addi	sp,sp,-4
    906c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    9070:	00093400 	call	9340 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9074:	00800044 	movi	r2,1
    9078:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    907c:	dfc00017 	ldw	ra,0(sp)
    9080:	dec00104 	addi	sp,sp,4
    9084:	f800283a 	ret

00009088 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    9088:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    908c:	298f883a 	add	r7,r5,r6
    9090:	20c00104 	addi	r3,r4,4
    9094:	00000606 	br	90b0 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9098:	18800037 	ldwio	r2,0(r3)
    909c:	10bfffec 	andhi	r2,r2,65535
    90a0:	10000326 	beq	r2,zero,90b0 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    90a4:	28800007 	ldb	r2,0(r5)
    90a8:	29400044 	addi	r5,r5,1
    90ac:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    90b0:	29fff936 	bltu	r5,r7,9098 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    90b4:	3005883a 	mov	r2,r6
    90b8:	f800283a 	ret

000090bc <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    90bc:	02000074 	movhi	r8,1
    90c0:	42257804 	addi	r8,r8,-27168
    90c4:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    90c8:	defffe04 	addi	sp,sp,-8
    90cc:	3807883a 	mov	r3,r7
    90d0:	dfc00115 	stw	ra,4(sp)
    90d4:	200f883a 	mov	r7,r4
    90d8:	1000011e 	bne	r2,zero,90e0 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
    90dc:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    90e0:	008001c4 	movi	r2,7
    90e4:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    90e8:	2809883a 	mov	r4,r5
    90ec:	300b883a 	mov	r5,r6
    90f0:	01800074 	movhi	r6,1
    90f4:	31a44304 	addi	r6,r6,-28404
    90f8:	d8000015 	stw	zero,0(sp)
    90fc:	00091f00 	call	91f0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9100:	dfc00117 	ldw	ra,4(sp)
    9104:	dec00204 	addi	sp,sp,8
    9108:	f800283a 	ret

0000910c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    910c:	defffe04 	addi	sp,sp,-8
    9110:	dfc00115 	stw	ra,4(sp)
    9114:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9118:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    911c:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9120:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9124:	00bfff84 	movi	r2,-2
    9128:	8084703a 	and	r2,r16,r2
    912c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    9130:	00092940 	call	9294 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9134:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    9138:	dfc00117 	ldw	ra,4(sp)
    913c:	dc000017 	ldw	r16,0(sp)
    9140:	dec00204 	addi	sp,sp,8
    9144:	f800283a 	ret

00009148 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9148:	f800283a 	ret

0000914c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    914c:	0009883a 	mov	r4,zero
    9150:	01420004 	movi	r5,2048
    9154:	00093481 	jmpi	9348 <alt_icache_flush>

00009158 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9158:	000530fa 	rdctl	r2,ienable
    915c:	00c00044 	movi	r3,1
    9160:	1946983a 	sll	r3,r3,r5
    9164:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
    9168:	1004c03a 	cmpne	r2,r2,zero
    916c:	f800283a 	ret

00009170 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9170:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9174:	00bfff84 	movi	r2,-2
    9178:	3084703a 	and	r2,r6,r2
    917c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    9180:	01000074 	movhi	r4,1
    9184:	21257704 	addi	r4,r4,-27172
    9188:	00c00044 	movi	r3,1
    918c:	20800017 	ldw	r2,0(r4)
    9190:	1946983a 	sll	r3,r3,r5
    9194:	10c4b03a 	or	r2,r2,r3
    9198:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    919c:	20800017 	ldw	r2,0(r4)
    91a0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    91a4:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    91a8:	0005883a 	mov	r2,zero
    91ac:	f800283a 	ret

000091b0 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    91b0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    91b4:	00bfff84 	movi	r2,-2
    91b8:	3084703a 	and	r2,r6,r2
    91bc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    91c0:	01000074 	movhi	r4,1
    91c4:	21257704 	addi	r4,r4,-27172
    91c8:	00ffff84 	movi	r3,-2
    91cc:	20800017 	ldw	r2,0(r4)
    91d0:	1946183a 	rol	r3,r3,r5
    91d4:	10c4703a 	and	r2,r2,r3
    91d8:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    91dc:	20800017 	ldw	r2,0(r4)
    91e0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    91e4:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    91e8:	0005883a 	mov	r2,zero
    91ec:	f800283a 	ret

000091f0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    91f0:	00091f41 	jmpi	91f4 <alt_iic_isr_register>

000091f4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    91f4:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    91f8:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    91fc:	dfc00115 	stw	ra,4(sp)
    9200:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9204:	00fffa84 	movi	r3,-22
    9208:	11401016 	blt	r2,r5,924c <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    920c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9210:	00bfff84 	movi	r2,-2
    9214:	8084703a 	and	r2,r16,r2
    9218:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    921c:	280490fa 	slli	r2,r5,3
    9220:	00c00074 	movhi	r3,1
    9224:	18e57a04 	addi	r3,r3,-27160
    9228:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = isr_context;
    922c:	11c00115 	stw	r7,4(r2)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    9230:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9234:	30000226 	beq	r6,zero,9240 <alt_iic_isr_register+0x4c>
    9238:	00091700 	call	9170 <alt_ic_irq_enable>
    923c:	00000106 	br	9244 <alt_iic_isr_register+0x50>
    9240:	00091b00 	call	91b0 <alt_ic_irq_disable>
    9244:	1007883a 	mov	r3,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9248:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    924c:	1805883a 	mov	r2,r3
    9250:	dfc00117 	ldw	ra,4(sp)
    9254:	dc000017 	ldw	r16,0(sp)
    9258:	dec00204 	addi	sp,sp,8
    925c:	f800283a 	ret

00009260 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9260:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9264:	00bfff84 	movi	r2,-2
    9268:	2884703a 	and	r2,r5,r2
    926c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9270:	20c00017 	ldw	r3,0(r4)
    9274:	20800117 	ldw	r2,4(r4)
    9278:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    927c:	20800117 	ldw	r2,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    9280:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
    9284:	10c00015 	stw	r3,0(r2)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
    9288:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    928c:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    9290:	f800283a 	ret

00009294 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9294:	defffd04 	addi	sp,sp,-12

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9298:	d0a04c17 	ldw	r2,-32464(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    929c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    92a0:	d4200517 	ldw	r16,-32748(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    92a4:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    92a8:	dfc00215 	stw	ra,8(sp)
    92ac:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    92b0:	d0a04c15 	stw	r2,-32464(gp)
    92b4:	00001b06 	br	9324 <alt_tick+0x90>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    92b8:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    92bc:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    92c0:	10000326 	beq	r2,zero,92d0 <alt_tick+0x3c>
    92c4:	d0a04c17 	ldw	r2,-32464(gp)
    92c8:	1000011e 	bne	r2,zero,92d0 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    92cc:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    92d0:	d0e04c17 	ldw	r3,-32464(gp)
    92d4:	80800217 	ldw	r2,8(r16)
    92d8:	18801136 	bltu	r3,r2,9320 <alt_tick+0x8c>
    92dc:	80800403 	ldbu	r2,16(r16)
    92e0:	10000f1e 	bne	r2,zero,9320 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    92e4:	81000517 	ldw	r4,20(r16)
    92e8:	80800317 	ldw	r2,12(r16)
    92ec:	103ee83a 	callr	r2
    92f0:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    92f4:	1000031e 	bne	r2,zero,9304 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    92f8:	8009883a 	mov	r4,r16
    92fc:	00092600 	call	9260 <alt_alarm_stop>
    9300:	00000706 	br	9320 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    9304:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    9308:	d0e04c17 	ldw	r3,-32464(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    930c:	1105883a 	add	r2,r2,r4
    9310:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    9314:	10c0022e 	bgeu	r2,r3,9320 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    9318:	00800044 	movi	r2,1
    931c:	80800405 	stb	r2,16(r16)
    9320:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9324:	d0a00504 	addi	r2,gp,-32748
    9328:	80bfe31e 	bne	r16,r2,92b8 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    932c:	dfc00217 	ldw	ra,8(sp)
    9330:	dc400117 	ldw	r17,4(sp)
    9334:	dc000017 	ldw	r16,0(sp)
    9338:	dec00304 	addi	sp,sp,12
    933c:	f800283a 	ret

00009340 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    9340:	000170fa 	wrctl	ienable,zero
}
    9344:	f800283a 	ret

00009348 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    9348:	00820004 	movi	r2,2048
    934c:	2007883a 	mov	r3,r4
    9350:	1140012e 	bgeu	r2,r5,9358 <alt_icache_flush+0x10>
    9354:	100b883a 	mov	r5,r2
    9358:	194b883a 	add	r5,r3,r5
    935c:	00000206 	br	9368 <alt_icache_flush+0x20>

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    9360:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    9364:	18c00804 	addi	r3,r3,32
    9368:	197ffd36 	bltu	r3,r5,9360 <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    936c:	208007cc 	andi	r2,r4,31
    9370:	10000126 	beq	r2,zero,9378 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    9374:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    9378:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    937c:	f800283a 	ret
    9380:	00008aa8 	cmpgeui	zero,zero,554
